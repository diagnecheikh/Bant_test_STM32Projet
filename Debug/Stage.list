
Stage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000616c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  0800630c  0800630c  0000730c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006504  08006504  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006504  08006504  00007504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800650c  0800650c  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800650c  0800650c  0000750c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006510  08006510  00007510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006514  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  2000005c  08006570  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08006570  0000834c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ac9  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002449  00000000  00000000  0001bb55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  0001dfa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e0f  00000000  00000000  0001f160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186a3  00000000  00000000  0001ff6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015305  00000000  00000000  00038612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e44f  00000000  00000000  0004d917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ebd66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052b8  00000000  00000000  000ebdac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000f1064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080062f4 	.word	0x080062f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080062f4 	.word	0x080062f4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b988 	b.w	8000df4 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	468e      	mov	lr, r1
 8000b04:	4604      	mov	r4, r0
 8000b06:	4688      	mov	r8, r1
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d14a      	bne.n	8000ba2 <__udivmoddi4+0xa6>
 8000b0c:	428a      	cmp	r2, r1
 8000b0e:	4617      	mov	r7, r2
 8000b10:	d962      	bls.n	8000bd8 <__udivmoddi4+0xdc>
 8000b12:	fab2 f682 	clz	r6, r2
 8000b16:	b14e      	cbz	r6, 8000b2c <__udivmoddi4+0x30>
 8000b18:	f1c6 0320 	rsb	r3, r6, #32
 8000b1c:	fa01 f806 	lsl.w	r8, r1, r6
 8000b20:	fa20 f303 	lsr.w	r3, r0, r3
 8000b24:	40b7      	lsls	r7, r6
 8000b26:	ea43 0808 	orr.w	r8, r3, r8
 8000b2a:	40b4      	lsls	r4, r6
 8000b2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b30:	fa1f fc87 	uxth.w	ip, r7
 8000b34:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b38:	0c23      	lsrs	r3, r4, #16
 8000b3a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b42:	fb01 f20c 	mul.w	r2, r1, ip
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0x62>
 8000b4a:	18fb      	adds	r3, r7, r3
 8000b4c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b50:	f080 80ea 	bcs.w	8000d28 <__udivmoddi4+0x22c>
 8000b54:	429a      	cmp	r2, r3
 8000b56:	f240 80e7 	bls.w	8000d28 <__udivmoddi4+0x22c>
 8000b5a:	3902      	subs	r1, #2
 8000b5c:	443b      	add	r3, r7
 8000b5e:	1a9a      	subs	r2, r3, r2
 8000b60:	b2a3      	uxth	r3, r4
 8000b62:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b66:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b6e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b72:	459c      	cmp	ip, r3
 8000b74:	d909      	bls.n	8000b8a <__udivmoddi4+0x8e>
 8000b76:	18fb      	adds	r3, r7, r3
 8000b78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b7c:	f080 80d6 	bcs.w	8000d2c <__udivmoddi4+0x230>
 8000b80:	459c      	cmp	ip, r3
 8000b82:	f240 80d3 	bls.w	8000d2c <__udivmoddi4+0x230>
 8000b86:	443b      	add	r3, r7
 8000b88:	3802      	subs	r0, #2
 8000b8a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b8e:	eba3 030c 	sub.w	r3, r3, ip
 8000b92:	2100      	movs	r1, #0
 8000b94:	b11d      	cbz	r5, 8000b9e <__udivmoddi4+0xa2>
 8000b96:	40f3      	lsrs	r3, r6
 8000b98:	2200      	movs	r2, #0
 8000b9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d905      	bls.n	8000bb2 <__udivmoddi4+0xb6>
 8000ba6:	b10d      	cbz	r5, 8000bac <__udivmoddi4+0xb0>
 8000ba8:	e9c5 0100 	strd	r0, r1, [r5]
 8000bac:	2100      	movs	r1, #0
 8000bae:	4608      	mov	r0, r1
 8000bb0:	e7f5      	b.n	8000b9e <__udivmoddi4+0xa2>
 8000bb2:	fab3 f183 	clz	r1, r3
 8000bb6:	2900      	cmp	r1, #0
 8000bb8:	d146      	bne.n	8000c48 <__udivmoddi4+0x14c>
 8000bba:	4573      	cmp	r3, lr
 8000bbc:	d302      	bcc.n	8000bc4 <__udivmoddi4+0xc8>
 8000bbe:	4282      	cmp	r2, r0
 8000bc0:	f200 8105 	bhi.w	8000dce <__udivmoddi4+0x2d2>
 8000bc4:	1a84      	subs	r4, r0, r2
 8000bc6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000bca:	2001      	movs	r0, #1
 8000bcc:	4690      	mov	r8, r2
 8000bce:	2d00      	cmp	r5, #0
 8000bd0:	d0e5      	beq.n	8000b9e <__udivmoddi4+0xa2>
 8000bd2:	e9c5 4800 	strd	r4, r8, [r5]
 8000bd6:	e7e2      	b.n	8000b9e <__udivmoddi4+0xa2>
 8000bd8:	2a00      	cmp	r2, #0
 8000bda:	f000 8090 	beq.w	8000cfe <__udivmoddi4+0x202>
 8000bde:	fab2 f682 	clz	r6, r2
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	f040 80a4 	bne.w	8000d30 <__udivmoddi4+0x234>
 8000be8:	1a8a      	subs	r2, r1, r2
 8000bea:	0c03      	lsrs	r3, r0, #16
 8000bec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf0:	b280      	uxth	r0, r0
 8000bf2:	b2bc      	uxth	r4, r7
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000bfa:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c02:	fb04 f20c 	mul.w	r2, r4, ip
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d907      	bls.n	8000c1a <__udivmoddi4+0x11e>
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c10:	d202      	bcs.n	8000c18 <__udivmoddi4+0x11c>
 8000c12:	429a      	cmp	r2, r3
 8000c14:	f200 80e0 	bhi.w	8000dd8 <__udivmoddi4+0x2dc>
 8000c18:	46c4      	mov	ip, r8
 8000c1a:	1a9b      	subs	r3, r3, r2
 8000c1c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c20:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c24:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c28:	fb02 f404 	mul.w	r4, r2, r4
 8000c2c:	429c      	cmp	r4, r3
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x144>
 8000c30:	18fb      	adds	r3, r7, r3
 8000c32:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x142>
 8000c38:	429c      	cmp	r4, r3
 8000c3a:	f200 80ca 	bhi.w	8000dd2 <__udivmoddi4+0x2d6>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	1b1b      	subs	r3, r3, r4
 8000c42:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c46:	e7a5      	b.n	8000b94 <__udivmoddi4+0x98>
 8000c48:	f1c1 0620 	rsb	r6, r1, #32
 8000c4c:	408b      	lsls	r3, r1
 8000c4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c52:	431f      	orrs	r7, r3
 8000c54:	fa0e f401 	lsl.w	r4, lr, r1
 8000c58:	fa20 f306 	lsr.w	r3, r0, r6
 8000c5c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c60:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c64:	4323      	orrs	r3, r4
 8000c66:	fa00 f801 	lsl.w	r8, r0, r1
 8000c6a:	fa1f fc87 	uxth.w	ip, r7
 8000c6e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c72:	0c1c      	lsrs	r4, r3, #16
 8000c74:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c78:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c7c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c80:	45a6      	cmp	lr, r4
 8000c82:	fa02 f201 	lsl.w	r2, r2, r1
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x1a0>
 8000c88:	193c      	adds	r4, r7, r4
 8000c8a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c8e:	f080 809c 	bcs.w	8000dca <__udivmoddi4+0x2ce>
 8000c92:	45a6      	cmp	lr, r4
 8000c94:	f240 8099 	bls.w	8000dca <__udivmoddi4+0x2ce>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	443c      	add	r4, r7
 8000c9c:	eba4 040e 	sub.w	r4, r4, lr
 8000ca0:	fa1f fe83 	uxth.w	lr, r3
 8000ca4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ca8:	fb09 4413 	mls	r4, r9, r3, r4
 8000cac:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000cb0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cb4:	45a4      	cmp	ip, r4
 8000cb6:	d908      	bls.n	8000cca <__udivmoddi4+0x1ce>
 8000cb8:	193c      	adds	r4, r7, r4
 8000cba:	f103 3eff 	add.w	lr, r3, #4294967295
 8000cbe:	f080 8082 	bcs.w	8000dc6 <__udivmoddi4+0x2ca>
 8000cc2:	45a4      	cmp	ip, r4
 8000cc4:	d97f      	bls.n	8000dc6 <__udivmoddi4+0x2ca>
 8000cc6:	3b02      	subs	r3, #2
 8000cc8:	443c      	add	r4, r7
 8000cca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cce:	eba4 040c 	sub.w	r4, r4, ip
 8000cd2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000cd6:	4564      	cmp	r4, ip
 8000cd8:	4673      	mov	r3, lr
 8000cda:	46e1      	mov	r9, ip
 8000cdc:	d362      	bcc.n	8000da4 <__udivmoddi4+0x2a8>
 8000cde:	d05f      	beq.n	8000da0 <__udivmoddi4+0x2a4>
 8000ce0:	b15d      	cbz	r5, 8000cfa <__udivmoddi4+0x1fe>
 8000ce2:	ebb8 0203 	subs.w	r2, r8, r3
 8000ce6:	eb64 0409 	sbc.w	r4, r4, r9
 8000cea:	fa04 f606 	lsl.w	r6, r4, r6
 8000cee:	fa22 f301 	lsr.w	r3, r2, r1
 8000cf2:	431e      	orrs	r6, r3
 8000cf4:	40cc      	lsrs	r4, r1
 8000cf6:	e9c5 6400 	strd	r6, r4, [r5]
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	e74f      	b.n	8000b9e <__udivmoddi4+0xa2>
 8000cfe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d02:	0c01      	lsrs	r1, r0, #16
 8000d04:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d08:	b280      	uxth	r0, r0
 8000d0a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d0e:	463b      	mov	r3, r7
 8000d10:	4638      	mov	r0, r7
 8000d12:	463c      	mov	r4, r7
 8000d14:	46b8      	mov	r8, r7
 8000d16:	46be      	mov	lr, r7
 8000d18:	2620      	movs	r6, #32
 8000d1a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d1e:	eba2 0208 	sub.w	r2, r2, r8
 8000d22:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d26:	e766      	b.n	8000bf6 <__udivmoddi4+0xfa>
 8000d28:	4601      	mov	r1, r0
 8000d2a:	e718      	b.n	8000b5e <__udivmoddi4+0x62>
 8000d2c:	4610      	mov	r0, r2
 8000d2e:	e72c      	b.n	8000b8a <__udivmoddi4+0x8e>
 8000d30:	f1c6 0220 	rsb	r2, r6, #32
 8000d34:	fa2e f302 	lsr.w	r3, lr, r2
 8000d38:	40b7      	lsls	r7, r6
 8000d3a:	40b1      	lsls	r1, r6
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d44:	430a      	orrs	r2, r1
 8000d46:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d4a:	b2bc      	uxth	r4, r7
 8000d4c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d50:	0c11      	lsrs	r1, r2, #16
 8000d52:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d56:	fb08 f904 	mul.w	r9, r8, r4
 8000d5a:	40b0      	lsls	r0, r6
 8000d5c:	4589      	cmp	r9, r1
 8000d5e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d62:	b280      	uxth	r0, r0
 8000d64:	d93e      	bls.n	8000de4 <__udivmoddi4+0x2e8>
 8000d66:	1879      	adds	r1, r7, r1
 8000d68:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d6c:	d201      	bcs.n	8000d72 <__udivmoddi4+0x276>
 8000d6e:	4589      	cmp	r9, r1
 8000d70:	d81f      	bhi.n	8000db2 <__udivmoddi4+0x2b6>
 8000d72:	eba1 0109 	sub.w	r1, r1, r9
 8000d76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d7a:	fb09 f804 	mul.w	r8, r9, r4
 8000d7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d82:	b292      	uxth	r2, r2
 8000d84:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d88:	4542      	cmp	r2, r8
 8000d8a:	d229      	bcs.n	8000de0 <__udivmoddi4+0x2e4>
 8000d8c:	18ba      	adds	r2, r7, r2
 8000d8e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d92:	d2c4      	bcs.n	8000d1e <__udivmoddi4+0x222>
 8000d94:	4542      	cmp	r2, r8
 8000d96:	d2c2      	bcs.n	8000d1e <__udivmoddi4+0x222>
 8000d98:	f1a9 0102 	sub.w	r1, r9, #2
 8000d9c:	443a      	add	r2, r7
 8000d9e:	e7be      	b.n	8000d1e <__udivmoddi4+0x222>
 8000da0:	45f0      	cmp	r8, lr
 8000da2:	d29d      	bcs.n	8000ce0 <__udivmoddi4+0x1e4>
 8000da4:	ebbe 0302 	subs.w	r3, lr, r2
 8000da8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000dac:	3801      	subs	r0, #1
 8000dae:	46e1      	mov	r9, ip
 8000db0:	e796      	b.n	8000ce0 <__udivmoddi4+0x1e4>
 8000db2:	eba7 0909 	sub.w	r9, r7, r9
 8000db6:	4449      	add	r1, r9
 8000db8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000dbc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dc0:	fb09 f804 	mul.w	r8, r9, r4
 8000dc4:	e7db      	b.n	8000d7e <__udivmoddi4+0x282>
 8000dc6:	4673      	mov	r3, lr
 8000dc8:	e77f      	b.n	8000cca <__udivmoddi4+0x1ce>
 8000dca:	4650      	mov	r0, sl
 8000dcc:	e766      	b.n	8000c9c <__udivmoddi4+0x1a0>
 8000dce:	4608      	mov	r0, r1
 8000dd0:	e6fd      	b.n	8000bce <__udivmoddi4+0xd2>
 8000dd2:	443b      	add	r3, r7
 8000dd4:	3a02      	subs	r2, #2
 8000dd6:	e733      	b.n	8000c40 <__udivmoddi4+0x144>
 8000dd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ddc:	443b      	add	r3, r7
 8000dde:	e71c      	b.n	8000c1a <__udivmoddi4+0x11e>
 8000de0:	4649      	mov	r1, r9
 8000de2:	e79c      	b.n	8000d1e <__udivmoddi4+0x222>
 8000de4:	eba1 0109 	sub.w	r1, r1, r9
 8000de8:	46c4      	mov	ip, r8
 8000dea:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dee:	fb09 f804 	mul.w	r8, r9, r4
 8000df2:	e7c4      	b.n	8000d7e <__udivmoddi4+0x282>

08000df4 <__aeabi_idiv0>:
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dfe:	f000 ff41 	bl	8001c84 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e02:	f000 fa6d 	bl	80012e0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e06:	f000 fc0d 	bl	8001624 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e0a:	f000 fbe1 	bl	80015d0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000e0e:	f000 fad1 	bl	80013b4 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000e12:	f000 fb4f 	bl	80014b4 <MX_SPI2_Init>
  MX_I2C1_Init();
 8000e16:	f000 fb1f 	bl	8001458 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000e1a:	f000 fb81 	bl	8001520 <MX_TIM2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char cmd;
  while (1)
  {
    HAL_UART_Receive(&huart2, (uint8_t*)&cmd, 1, HAL_MAX_DELAY);
 8000e1e:	1df9      	adds	r1, r7, #7
 8000e20:	f04f 33ff 	mov.w	r3, #4294967295
 8000e24:	2201      	movs	r2, #1
 8000e26:	4819      	ldr	r0, [pc, #100]	@ (8000e8c <main+0x94>)
 8000e28:	f004 f9e9 	bl	80051fe <HAL_UART_Receive>
    if (cmd == 't') {
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	2b74      	cmp	r3, #116	@ 0x74
 8000e30:	d102      	bne.n	8000e38 <main+0x40>
      run_all_tests();
 8000e32:	f000 fea9 	bl	8001b88 <run_all_tests>
 8000e36:	e7f2      	b.n	8000e1e <main+0x26>
    } else if (cmd == 'b') {
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	2b62      	cmp	r3, #98	@ 0x62
 8000e3c:	d102      	bne.n	8000e44 <main+0x4c>
      test_led();
 8000e3e:	f000 fca3 	bl	8001788 <test_led>
 8000e42:	e7ec      	b.n	8000e1e <main+0x26>
    } else if (cmd == 'c') {
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	2b63      	cmp	r3, #99	@ 0x63
 8000e48:	d102      	bne.n	8000e50 <main+0x58>
      test_button();
 8000e4a:	f000 fccf 	bl	80017ec <test_button>
 8000e4e:	e7e6      	b.n	8000e1e <main+0x26>
    } else if (cmd == 'd') {
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	2b64      	cmp	r3, #100	@ 0x64
 8000e54:	d102      	bne.n	8000e5c <main+0x64>
      test_uart();
 8000e56:	f000 fd0d 	bl	8001874 <test_uart>
 8000e5a:	e7e0      	b.n	8000e1e <main+0x26>
    } else if (cmd == 'e') {
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	2b65      	cmp	r3, #101	@ 0x65
 8000e60:	d102      	bne.n	8000e68 <main+0x70>
      test_adc();
 8000e62:	f000 fd25 	bl	80018b0 <test_adc>
 8000e66:	e7da      	b.n	8000e1e <main+0x26>
    } else if (cmd == 'f') {
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	2b66      	cmp	r3, #102	@ 0x66
 8000e6c:	d102      	bne.n	8000e74 <main+0x7c>
      test_spi();
 8000e6e:	f000 fd97 	bl	80019a0 <test_spi>
 8000e72:	e7d4      	b.n	8000e1e <main+0x26>
    } else if (cmd == 'g') {
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	2b67      	cmp	r3, #103	@ 0x67
 8000e78:	d102      	bne.n	8000e80 <main+0x88>
      test_i2c();
 8000e7a:	f000 fdd9 	bl	8001a30 <test_i2c>
 8000e7e:	e7ce      	b.n	8000e1e <main+0x26>
    } else if (cmd == 'h') {
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	2b68      	cmp	r3, #104	@ 0x68
 8000e84:	d1cb      	bne.n	8000e1e <main+0x26>
      test_timer();
 8000e86:	f000 fe35 	bl	8001af4 <test_timer>
    HAL_UART_Receive(&huart2, (uint8_t*)&cmd, 1, HAL_MAX_DELAY);
 8000e8a:	e7c8      	b.n	8000e1e <main+0x26>
 8000e8c:	200001b4 	.word	0x200001b4

08000e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e94:	b672      	cpsid	i
}
 8000e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <Error_Handler+0x8>

08000e9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <HAL_MspInit+0x4c>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eaa:	4a0f      	ldr	r2, [pc, #60]	@ (8000ee8 <HAL_MspInit+0x4c>)
 8000eac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee8 <HAL_MspInit+0x4c>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	603b      	str	r3, [r7, #0]
 8000ec2:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <HAL_MspInit+0x4c>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec6:	4a08      	ldr	r2, [pc, #32]	@ (8000ee8 <HAL_MspInit+0x4c>)
 8000ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ece:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <HAL_MspInit+0x4c>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000eda:	2007      	movs	r0, #7
 8000edc:	f001 fc0c 	bl	80026f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40023800 	.word	0x40023800

08000eec <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	@ 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a17      	ldr	r2, [pc, #92]	@ (8000f68 <HAL_ADC_MspInit+0x7c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d127      	bne.n	8000f5e <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	4b16      	ldr	r3, [pc, #88]	@ (8000f6c <HAL_ADC_MspInit+0x80>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f16:	4a15      	ldr	r2, [pc, #84]	@ (8000f6c <HAL_ADC_MspInit+0x80>)
 8000f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f1e:	4b13      	ldr	r3, [pc, #76]	@ (8000f6c <HAL_ADC_MspInit+0x80>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f6c <HAL_ADC_MspInit+0x80>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	4a0e      	ldr	r2, [pc, #56]	@ (8000f6c <HAL_ADC_MspInit+0x80>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f6c <HAL_ADC_MspInit+0x80>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f46:	2301      	movs	r3, #1
 8000f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	4805      	ldr	r0, [pc, #20]	@ (8000f70 <HAL_ADC_MspInit+0x84>)
 8000f5a:	f001 fc01 	bl	8002760 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f5e:	bf00      	nop
 8000f60:	3728      	adds	r7, #40	@ 0x28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40012000 	.word	0x40012000
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020000 	.word	0x40020000

08000f74 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	@ 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a19      	ldr	r2, [pc, #100]	@ (8000ff8 <HAL_I2C_MspInit+0x84>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d12b      	bne.n	8000fee <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	4b18      	ldr	r3, [pc, #96]	@ (8000ffc <HAL_I2C_MspInit+0x88>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	4a17      	ldr	r2, [pc, #92]	@ (8000ffc <HAL_I2C_MspInit+0x88>)
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa6:	4b15      	ldr	r3, [pc, #84]	@ (8000ffc <HAL_I2C_MspInit+0x88>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fb2:	23c0      	movs	r3, #192	@ 0xc0
 8000fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb6:	2312      	movs	r3, #18
 8000fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	480c      	ldr	r0, [pc, #48]	@ (8001000 <HAL_I2C_MspInit+0x8c>)
 8000fce:	f001 fbc7 	bl	8002760 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <HAL_I2C_MspInit+0x88>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fda:	4a08      	ldr	r2, [pc, #32]	@ (8000ffc <HAL_I2C_MspInit+0x88>)
 8000fdc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fe0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe2:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <HAL_I2C_MspInit+0x88>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000fee:	bf00      	nop
 8000ff0:	3728      	adds	r7, #40	@ 0x28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40005400 	.word	0x40005400
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020400 	.word	0x40020400

08001004 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	@ 0x28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a28      	ldr	r2, [pc, #160]	@ (80010c4 <HAL_SPI_MspInit+0xc0>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d14a      	bne.n	80010bc <HAL_SPI_MspInit+0xb8>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	4b27      	ldr	r3, [pc, #156]	@ (80010c8 <HAL_SPI_MspInit+0xc4>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102e:	4a26      	ldr	r2, [pc, #152]	@ (80010c8 <HAL_SPI_MspInit+0xc4>)
 8001030:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001034:	6413      	str	r3, [r2, #64]	@ 0x40
 8001036:	4b24      	ldr	r3, [pc, #144]	@ (80010c8 <HAL_SPI_MspInit+0xc4>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b20      	ldr	r3, [pc, #128]	@ (80010c8 <HAL_SPI_MspInit+0xc4>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a1f      	ldr	r2, [pc, #124]	@ (80010c8 <HAL_SPI_MspInit+0xc4>)
 800104c:	f043 0304 	orr.w	r3, r3, #4
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b1d      	ldr	r3, [pc, #116]	@ (80010c8 <HAL_SPI_MspInit+0xc4>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f003 0304 	and.w	r3, r3, #4
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	4b19      	ldr	r3, [pc, #100]	@ (80010c8 <HAL_SPI_MspInit+0xc4>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	4a18      	ldr	r2, [pc, #96]	@ (80010c8 <HAL_SPI_MspInit+0xc4>)
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	6313      	str	r3, [r2, #48]	@ 0x30
 800106e:	4b16      	ldr	r3, [pc, #88]	@ (80010c8 <HAL_SPI_MspInit+0xc4>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800107a:	230c      	movs	r3, #12
 800107c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800108a:	2305      	movs	r3, #5
 800108c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	480d      	ldr	r0, [pc, #52]	@ (80010cc <HAL_SPI_MspInit+0xc8>)
 8001096:	f001 fb63 	bl	8002760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800109a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800109e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a8:	2303      	movs	r3, #3
 80010aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010ac:	2305      	movs	r3, #5
 80010ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4619      	mov	r1, r3
 80010b6:	4806      	ldr	r0, [pc, #24]	@ (80010d0 <HAL_SPI_MspInit+0xcc>)
 80010b8:	f001 fb52 	bl	8002760 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80010bc:	bf00      	nop
 80010be:	3728      	adds	r7, #40	@ 0x28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40003800 	.word	0x40003800
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40020800 	.word	0x40020800
 80010d0:	40020400 	.word	0x40020400

080010d4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010e4:	d10d      	bne.n	8001102 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <HAL_TIM_PWM_MspInit+0x3c>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ee:	4a08      	ldr	r2, [pc, #32]	@ (8001110 <HAL_TIM_PWM_MspInit+0x3c>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f6:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <HAL_TIM_PWM_MspInit+0x3c>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001102:	bf00      	nop
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800

08001114 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001134:	d11e      	bne.n	8001174 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	4b10      	ldr	r3, [pc, #64]	@ (800117c <HAL_TIM_MspPostInit+0x68>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	4a0f      	ldr	r2, [pc, #60]	@ (800117c <HAL_TIM_MspPostInit+0x68>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6313      	str	r3, [r2, #48]	@ 0x30
 8001146:	4b0d      	ldr	r3, [pc, #52]	@ (800117c <HAL_TIM_MspPostInit+0x68>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001152:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001156:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001164:	2301      	movs	r3, #1
 8001166:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	4619      	mov	r1, r3
 800116e:	4804      	ldr	r0, [pc, #16]	@ (8001180 <HAL_TIM_MspPostInit+0x6c>)
 8001170:	f001 faf6 	bl	8002760 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001174:	bf00      	nop
 8001176:	3720      	adds	r7, #32
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40023800 	.word	0x40023800
 8001180:	40020000 	.word	0x40020000

08001184 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	@ 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a19      	ldr	r2, [pc, #100]	@ (8001208 <HAL_UART_MspInit+0x84>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d12b      	bne.n	80011fe <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	4b18      	ldr	r3, [pc, #96]	@ (800120c <HAL_UART_MspInit+0x88>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ae:	4a17      	ldr	r2, [pc, #92]	@ (800120c <HAL_UART_MspInit+0x88>)
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b6:	4b15      	ldr	r3, [pc, #84]	@ (800120c <HAL_UART_MspInit+0x88>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b11      	ldr	r3, [pc, #68]	@ (800120c <HAL_UART_MspInit+0x88>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	4a10      	ldr	r2, [pc, #64]	@ (800120c <HAL_UART_MspInit+0x88>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <HAL_UART_MspInit+0x88>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011de:	230c      	movs	r3, #12
 80011e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ea:	2303      	movs	r3, #3
 80011ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011ee:	2307      	movs	r3, #7
 80011f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	@ (8001210 <HAL_UART_MspInit+0x8c>)
 80011fa:	f001 fab1 	bl	8002760 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80011fe:	bf00      	nop
 8001200:	3728      	adds	r7, #40	@ 0x28
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40004400 	.word	0x40004400
 800120c:	40023800 	.word	0x40023800
 8001210:	40020000 	.word	0x40020000

08001214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <NMI_Handler+0x4>

0800121c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <HardFault_Handler+0x4>

08001224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <MemManage_Handler+0x4>

0800122c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <BusFault_Handler+0x4>

08001234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <UsageFault_Handler+0x4>

0800123c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800126a:	f000 fd5d 	bl	8001d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800127c:	4a14      	ldr	r2, [pc, #80]	@ (80012d0 <_sbrk+0x5c>)
 800127e:	4b15      	ldr	r3, [pc, #84]	@ (80012d4 <_sbrk+0x60>)
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001288:	4b13      	ldr	r3, [pc, #76]	@ (80012d8 <_sbrk+0x64>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d102      	bne.n	8001296 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001290:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <_sbrk+0x64>)
 8001292:	4a12      	ldr	r2, [pc, #72]	@ (80012dc <_sbrk+0x68>)
 8001294:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001296:	4b10      	ldr	r3, [pc, #64]	@ (80012d8 <_sbrk+0x64>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d207      	bcs.n	80012b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a4:	f004 fbb0 	bl	8005a08 <__errno>
 80012a8:	4603      	mov	r3, r0
 80012aa:	220c      	movs	r2, #12
 80012ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
 80012b2:	e009      	b.n	80012c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b4:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <_sbrk+0x64>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ba:	4b07      	ldr	r3, [pc, #28]	@ (80012d8 <_sbrk+0x64>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	4a05      	ldr	r2, [pc, #20]	@ (80012d8 <_sbrk+0x64>)
 80012c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012c6:	68fb      	ldr	r3, [r7, #12]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20020000 	.word	0x20020000
 80012d4:	00000400 	.word	0x00000400
 80012d8:	200001fc 	.word	0x200001fc
 80012dc:	20000350 	.word	0x20000350

080012e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b094      	sub	sp, #80	@ 0x50
 80012e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e6:	f107 0320 	add.w	r3, r7, #32
 80012ea:	2230      	movs	r2, #48	@ 0x30
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f004 fb82 	bl	80059f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001304:	2300      	movs	r3, #0
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	4b28      	ldr	r3, [pc, #160]	@ (80013ac <SystemClock_Config+0xcc>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130c:	4a27      	ldr	r2, [pc, #156]	@ (80013ac <SystemClock_Config+0xcc>)
 800130e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001312:	6413      	str	r3, [r2, #64]	@ 0x40
 8001314:	4b25      	ldr	r3, [pc, #148]	@ (80013ac <SystemClock_Config+0xcc>)
 8001316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001320:	2300      	movs	r3, #0
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	4b22      	ldr	r3, [pc, #136]	@ (80013b0 <SystemClock_Config+0xd0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a21      	ldr	r2, [pc, #132]	@ (80013b0 <SystemClock_Config+0xd0>)
 800132a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	4b1f      	ldr	r3, [pc, #124]	@ (80013b0 <SystemClock_Config+0xd0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800133c:	2302      	movs	r3, #2
 800133e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001340:	2301      	movs	r3, #1
 8001342:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001344:	2310      	movs	r3, #16
 8001346:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001348:	2302      	movs	r3, #2
 800134a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800134c:	2300      	movs	r3, #0
 800134e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001350:	2310      	movs	r3, #16
 8001352:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001354:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001358:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800135a:	2304      	movs	r3, #4
 800135c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800135e:	2304      	movs	r3, #4
 8001360:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001362:	f107 0320 	add.w	r3, r7, #32
 8001366:	4618      	mov	r0, r3
 8001368:	f002 f9fc 	bl	8003764 <HAL_RCC_OscConfig>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001372:	f7ff fd8d 	bl	8000e90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001376:	230f      	movs	r3, #15
 8001378:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137a:	2302      	movs	r3, #2
 800137c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001382:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001386:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	2102      	movs	r1, #2
 8001392:	4618      	mov	r0, r3
 8001394:	f002 fc5e 	bl	8003c54 <HAL_RCC_ClockConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800139e:	f7ff fd77 	bl	8000e90 <Error_Handler>
  }
}
 80013a2:	bf00      	nop
 80013a4:	3750      	adds	r7, #80	@ 0x50
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40007000 	.word	0x40007000

080013b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80013ba:	463b      	mov	r3, r7
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013c6:	4b21      	ldr	r3, [pc, #132]	@ (800144c <MX_ADC1_Init+0x98>)
 80013c8:	4a21      	ldr	r2, [pc, #132]	@ (8001450 <MX_ADC1_Init+0x9c>)
 80013ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013cc:	4b1f      	ldr	r3, [pc, #124]	@ (800144c <MX_ADC1_Init+0x98>)
 80013ce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013d4:	4b1d      	ldr	r3, [pc, #116]	@ (800144c <MX_ADC1_Init+0x98>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013da:	4b1c      	ldr	r3, [pc, #112]	@ (800144c <MX_ADC1_Init+0x98>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013e0:	4b1a      	ldr	r3, [pc, #104]	@ (800144c <MX_ADC1_Init+0x98>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013e6:	4b19      	ldr	r3, [pc, #100]	@ (800144c <MX_ADC1_Init+0x98>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013ee:	4b17      	ldr	r3, [pc, #92]	@ (800144c <MX_ADC1_Init+0x98>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013f4:	4b15      	ldr	r3, [pc, #84]	@ (800144c <MX_ADC1_Init+0x98>)
 80013f6:	4a17      	ldr	r2, [pc, #92]	@ (8001454 <MX_ADC1_Init+0xa0>)
 80013f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013fa:	4b14      	ldr	r3, [pc, #80]	@ (800144c <MX_ADC1_Init+0x98>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001400:	4b12      	ldr	r3, [pc, #72]	@ (800144c <MX_ADC1_Init+0x98>)
 8001402:	2201      	movs	r2, #1
 8001404:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001406:	4b11      	ldr	r3, [pc, #68]	@ (800144c <MX_ADC1_Init+0x98>)
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800140e:	4b0f      	ldr	r3, [pc, #60]	@ (800144c <MX_ADC1_Init+0x98>)
 8001410:	2201      	movs	r2, #1
 8001412:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001414:	480d      	ldr	r0, [pc, #52]	@ (800144c <MX_ADC1_Init+0x98>)
 8001416:	f000 fccb 	bl	8001db0 <HAL_ADC_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001420:	f7ff fd36 	bl	8000e90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001424:	2300      	movs	r3, #0
 8001426:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001428:	2301      	movs	r3, #1
 800142a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800142c:	2300      	movs	r3, #0
 800142e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001430:	463b      	mov	r3, r7
 8001432:	4619      	mov	r1, r3
 8001434:	4805      	ldr	r0, [pc, #20]	@ (800144c <MX_ADC1_Init+0x98>)
 8001436:	f000 fe7f 	bl	8002138 <HAL_ADC_ConfigChannel>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001440:	f7ff fd26 	bl	8000e90 <Error_Handler>
  }
}
 8001444:	bf00      	nop
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000078 	.word	0x20000078
 8001450:	40012000 	.word	0x40012000
 8001454:	0f000001 	.word	0x0f000001

08001458 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 800145c:	4b12      	ldr	r3, [pc, #72]	@ (80014a8 <MX_I2C1_Init+0x50>)
 800145e:	4a13      	ldr	r2, [pc, #76]	@ (80014ac <MX_I2C1_Init+0x54>)
 8001460:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001462:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <MX_I2C1_Init+0x50>)
 8001464:	4a12      	ldr	r2, [pc, #72]	@ (80014b0 <MX_I2C1_Init+0x58>)
 8001466:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001468:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <MX_I2C1_Init+0x50>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800146e:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <MX_I2C1_Init+0x50>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001474:	4b0c      	ldr	r3, [pc, #48]	@ (80014a8 <MX_I2C1_Init+0x50>)
 8001476:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800147a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800147c:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <MX_I2C1_Init+0x50>)
 800147e:	2200      	movs	r2, #0
 8001480:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001482:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <MX_I2C1_Init+0x50>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001488:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <MX_I2C1_Init+0x50>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800148e:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <MX_I2C1_Init+0x50>)
 8001490:	2200      	movs	r2, #0
 8001492:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001494:	4804      	ldr	r0, [pc, #16]	@ (80014a8 <MX_I2C1_Init+0x50>)
 8001496:	f001 fb19 	bl	8002acc <HAL_I2C_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014a0:	f7ff fcf6 	bl	8000e90 <Error_Handler>
  }
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200000c0 	.word	0x200000c0
 80014ac:	40005400 	.word	0x40005400
 80014b0:	000186a0 	.word	0x000186a0

080014b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI2_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  hspi2.Instance = SPI2;
 80014b8:	4b17      	ldr	r3, [pc, #92]	@ (8001518 <MX_SPI2_Init+0x64>)
 80014ba:	4a18      	ldr	r2, [pc, #96]	@ (800151c <MX_SPI2_Init+0x68>)
 80014bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014be:	4b16      	ldr	r3, [pc, #88]	@ (8001518 <MX_SPI2_Init+0x64>)
 80014c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014c6:	4b14      	ldr	r3, [pc, #80]	@ (8001518 <MX_SPI2_Init+0x64>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014cc:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <MX_SPI2_Init+0x64>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014d2:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <MX_SPI2_Init+0x64>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001518 <MX_SPI2_Init+0x64>)
 80014da:	2200      	movs	r2, #0
 80014dc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014de:	4b0e      	ldr	r3, [pc, #56]	@ (8001518 <MX_SPI2_Init+0x64>)
 80014e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014e4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001518 <MX_SPI2_Init+0x64>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001518 <MX_SPI2_Init+0x64>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014f2:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <MX_SPI2_Init+0x64>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014f8:	4b07      	ldr	r3, [pc, #28]	@ (8001518 <MX_SPI2_Init+0x64>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80014fe:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <MX_SPI2_Init+0x64>)
 8001500:	220a      	movs	r2, #10
 8001502:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001504:	4804      	ldr	r0, [pc, #16]	@ (8001518 <MX_SPI2_Init+0x64>)
 8001506:	f002 fdc5 	bl	8004094 <HAL_SPI_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001510:	f7ff fcbe 	bl	8000e90 <Error_Handler>
  }
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000114 	.word	0x20000114
 800151c:	40003800 	.word	0x40003800

08001520 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	@ 0x28
 8001524:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001526:	f107 0320 	add.w	r3, r7, #32
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
 800153c:	611a      	str	r2, [r3, #16]
 800153e:	615a      	str	r2, [r3, #20]
 8001540:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001542:	4b22      	ldr	r3, [pc, #136]	@ (80015cc <MX_TIM2_Init+0xac>)
 8001544:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001548:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800154a:	4b20      	ldr	r3, [pc, #128]	@ (80015cc <MX_TIM2_Init+0xac>)
 800154c:	2253      	movs	r2, #83	@ 0x53
 800154e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001550:	4b1e      	ldr	r3, [pc, #120]	@ (80015cc <MX_TIM2_Init+0xac>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001556:	4b1d      	ldr	r3, [pc, #116]	@ (80015cc <MX_TIM2_Init+0xac>)
 8001558:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800155c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155e:	4b1b      	ldr	r3, [pc, #108]	@ (80015cc <MX_TIM2_Init+0xac>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001564:	4b19      	ldr	r3, [pc, #100]	@ (80015cc <MX_TIM2_Init+0xac>)
 8001566:	2200      	movs	r2, #0
 8001568:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800156a:	4818      	ldr	r0, [pc, #96]	@ (80015cc <MX_TIM2_Init+0xac>)
 800156c:	f003 f8a0 	bl	80046b0 <HAL_TIM_PWM_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001576:	f7ff fc8b 	bl	8000e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001582:	f107 0320 	add.w	r3, r7, #32
 8001586:	4619      	mov	r1, r3
 8001588:	4810      	ldr	r0, [pc, #64]	@ (80015cc <MX_TIM2_Init+0xac>)
 800158a:	f003 fcef 	bl	8004f6c <HAL_TIMEx_MasterConfigSynchronization>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001594:	f7ff fc7c 	bl	8000e90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001598:	2360      	movs	r3, #96	@ 0x60
 800159a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	2200      	movs	r2, #0
 80015ac:	4619      	mov	r1, r3
 80015ae:	4807      	ldr	r0, [pc, #28]	@ (80015cc <MX_TIM2_Init+0xac>)
 80015b0:	f003 f9e2 	bl	8004978 <HAL_TIM_PWM_ConfigChannel>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80015ba:	f7ff fc69 	bl	8000e90 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80015be:	4803      	ldr	r0, [pc, #12]	@ (80015cc <MX_TIM2_Init+0xac>)
 80015c0:	f7ff fda8 	bl	8001114 <HAL_TIM_MspPostInit>
}
 80015c4:	bf00      	nop
 80015c6:	3728      	adds	r7, #40	@ 0x28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	2000016c 	.word	0x2000016c

080015d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80015d4:	4b11      	ldr	r3, [pc, #68]	@ (800161c <MX_USART2_UART_Init+0x4c>)
 80015d6:	4a12      	ldr	r2, [pc, #72]	@ (8001620 <MX_USART2_UART_Init+0x50>)
 80015d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015da:	4b10      	ldr	r3, [pc, #64]	@ (800161c <MX_USART2_UART_Init+0x4c>)
 80015dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	@ (800161c <MX_USART2_UART_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <MX_USART2_UART_Init+0x4c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ee:	4b0b      	ldr	r3, [pc, #44]	@ (800161c <MX_USART2_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015f4:	4b09      	ldr	r3, [pc, #36]	@ (800161c <MX_USART2_UART_Init+0x4c>)
 80015f6:	220c      	movs	r2, #12
 80015f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fa:	4b08      	ldr	r3, [pc, #32]	@ (800161c <MX_USART2_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <MX_USART2_UART_Init+0x4c>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001606:	4805      	ldr	r0, [pc, #20]	@ (800161c <MX_USART2_UART_Init+0x4c>)
 8001608:	f003 fd1e 	bl	8005048 <HAL_UART_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001612:	f7ff fc3d 	bl	8000e90 <Error_Handler>
  }
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200001b4 	.word	0x200001b4
 8001620:	40004400 	.word	0x40004400

08001624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	@ 0x28
 8001628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	4b2d      	ldr	r3, [pc, #180]	@ (80016f4 <MX_GPIO_Init+0xd0>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	4a2c      	ldr	r2, [pc, #176]	@ (80016f4 <MX_GPIO_Init+0xd0>)
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	6313      	str	r3, [r2, #48]	@ 0x30
 800164a:	4b2a      	ldr	r3, [pc, #168]	@ (80016f4 <MX_GPIO_Init+0xd0>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b26      	ldr	r3, [pc, #152]	@ (80016f4 <MX_GPIO_Init+0xd0>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	4a25      	ldr	r2, [pc, #148]	@ (80016f4 <MX_GPIO_Init+0xd0>)
 8001660:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001664:	6313      	str	r3, [r2, #48]	@ 0x30
 8001666:	4b23      	ldr	r3, [pc, #140]	@ (80016f4 <MX_GPIO_Init+0xd0>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	4b1f      	ldr	r3, [pc, #124]	@ (80016f4 <MX_GPIO_Init+0xd0>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a1e      	ldr	r2, [pc, #120]	@ (80016f4 <MX_GPIO_Init+0xd0>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b1c      	ldr	r3, [pc, #112]	@ (80016f4 <MX_GPIO_Init+0xd0>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	4b18      	ldr	r3, [pc, #96]	@ (80016f4 <MX_GPIO_Init+0xd0>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	4a17      	ldr	r2, [pc, #92]	@ (80016f4 <MX_GPIO_Init+0xd0>)
 8001698:	f043 0302 	orr.w	r3, r3, #2
 800169c:	6313      	str	r3, [r2, #48]	@ 0x30
 800169e:	4b15      	ldr	r3, [pc, #84]	@ (80016f4 <MX_GPIO_Init+0xd0>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2120      	movs	r1, #32
 80016ae:	4812      	ldr	r0, [pc, #72]	@ (80016f8 <MX_GPIO_Init+0xd4>)
 80016b0:	f001 f9f2 	bl	8002a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016be:	2301      	movs	r3, #1
 80016c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	480c      	ldr	r0, [pc, #48]	@ (80016fc <MX_GPIO_Init+0xd8>)
 80016ca:	f001 f849 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016ce:	2320      	movs	r3, #32
 80016d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2300      	movs	r3, #0
 80016dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	4804      	ldr	r0, [pc, #16]	@ (80016f8 <MX_GPIO_Init+0xd4>)
 80016e6:	f001 f83b 	bl	8002760 <HAL_GPIO_Init>
}
 80016ea:	bf00      	nop
 80016ec:	3728      	adds	r7, #40	@ 0x28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40020000 	.word	0x40020000
 80016fc:	40020800 	.word	0x40020800

08001700 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001704:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <SystemInit+0x20>)
 8001706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800170a:	4a05      	ldr	r2, [pc, #20]	@ (8001720 <SystemInit+0x20>)
 800170c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001710:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <test_system>:

#include "main.h"
#include "test_functions.h"
#include <stdio.h> // Pour snprintf

void test_system(void) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b08e      	sub	sp, #56	@ 0x38
 8001728:	af00      	add	r7, sp, #0
    char msg[50];
    if (RCC->CR & RCC_CR_HSIRDY) {
 800172a:	4b13      	ldr	r3, [pc, #76]	@ (8001778 <test_system+0x54>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d006      	beq.n	8001744 <test_system+0x20>
        snprintf(msg, sizeof(msg), "SYSTEM OK: HSI Ready\n\n");
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	4a10      	ldr	r2, [pc, #64]	@ (800177c <test_system+0x58>)
 800173a:	2132      	movs	r1, #50	@ 0x32
 800173c:	4618      	mov	r0, r3
 800173e:	f004 f925 	bl	800598c <sniprintf>
 8001742:	e005      	b.n	8001750 <test_system+0x2c>
    } else {
        snprintf(msg, sizeof(msg), "SYSTEM ERROR: HSI Not Ready\n");
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	4a0e      	ldr	r2, [pc, #56]	@ (8001780 <test_system+0x5c>)
 8001748:	2132      	movs	r1, #50	@ 0x32
 800174a:	4618      	mov	r0, r3
 800174c:	f004 f91e 	bl	800598c <sniprintf>
    }
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe fd44 	bl	80001e0 <strlen>
 8001758:	4603      	mov	r3, r0
 800175a:	b29a      	uxth	r2, r3
 800175c:	1d39      	adds	r1, r7, #4
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
 8001762:	4808      	ldr	r0, [pc, #32]	@ (8001784 <test_system+0x60>)
 8001764:	f003 fcc0 	bl	80050e8 <HAL_UART_Transmit>
    HAL_Delay(300);
 8001768:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800176c:	f000 fafc 	bl	8001d68 <HAL_Delay>
}
 8001770:	bf00      	nop
 8001772:	3738      	adds	r7, #56	@ 0x38
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40023800 	.word	0x40023800
 800177c:	0800630c 	.word	0x0800630c
 8001780:	08006324 	.word	0x08006324
 8001784:	200001b4 	.word	0x200001b4

08001788 <test_led>:

void test_led(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800178e:	2201      	movs	r2, #1
 8001790:	2120      	movs	r1, #32
 8001792:	4813      	ldr	r0, [pc, #76]	@ (80017e0 <test_led+0x58>)
 8001794:	f001 f980 	bl	8002a98 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001798:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800179c:	f000 fae4 	bl	8001d68 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2120      	movs	r1, #32
 80017a4:	480e      	ldr	r0, [pc, #56]	@ (80017e0 <test_led+0x58>)
 80017a6:	f001 f977 	bl	8002a98 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80017aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017ae:	f000 fadb 	bl	8001d68 <HAL_Delay>

    char msg[] = "LED OK\n";
 80017b2:	4a0c      	ldr	r2, [pc, #48]	@ (80017e4 <test_led+0x5c>)
 80017b4:	463b      	mov	r3, r7
 80017b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017ba:	e883 0003 	stmia.w	r3, {r0, r1}
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80017be:	463b      	mov	r3, r7
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fd0d 	bl	80001e0 <strlen>
 80017c6:	4603      	mov	r3, r0
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	4639      	mov	r1, r7
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295
 80017d0:	4805      	ldr	r0, [pc, #20]	@ (80017e8 <test_led+0x60>)
 80017d2:	f003 fc89 	bl	80050e8 <HAL_UART_Transmit>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40020000 	.word	0x40020000
 80017e4:	08006344 	.word	0x08006344
 80017e8:	200001b4 	.word	0x200001b4

080017ec <test_button>:

void test_button(void)
{
 80017ec:	b5b0      	push	{r4, r5, r7, lr}
 80017ee:	b08a      	sub	sp, #40	@ 0x28
 80017f0:	af00      	add	r7, sp, #0
    GPIO_PinState state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80017f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017f6:	481b      	ldr	r0, [pc, #108]	@ (8001864 <test_button+0x78>)
 80017f8:	f001 f936 	bl	8002a68 <HAL_GPIO_ReadPin>
 80017fc:	4603      	mov	r3, r0
 80017fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (state == GPIO_PIN_RESET) {
 8001802:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001806:	2b00      	cmp	r3, #0
 8001808:	d114      	bne.n	8001834 <test_button+0x48>
        char msg[] = "BUTTON PRESSED\n";
 800180a:	4b17      	ldr	r3, [pc, #92]	@ (8001868 <test_button+0x7c>)
 800180c:	f107 0414 	add.w	r4, r7, #20
 8001810:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001812:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fce0 	bl	80001e0 <strlen>
 8001820:	4603      	mov	r3, r0
 8001822:	b29a      	uxth	r2, r3
 8001824:	f107 0114 	add.w	r1, r7, #20
 8001828:	f04f 33ff 	mov.w	r3, #4294967295
 800182c:	480f      	ldr	r0, [pc, #60]	@ (800186c <test_button+0x80>)
 800182e:	f003 fc5b 	bl	80050e8 <HAL_UART_Transmit>
    } else {
        char msg[] = "BUTTON RELEASED\n";
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
    }
}
 8001832:	e012      	b.n	800185a <test_button+0x6e>
        char msg[] = "BUTTON RELEASED\n";
 8001834:	4b0e      	ldr	r3, [pc, #56]	@ (8001870 <test_button+0x84>)
 8001836:	463c      	mov	r4, r7
 8001838:	461d      	mov	r5, r3
 800183a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800183c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800183e:	682b      	ldr	r3, [r5, #0]
 8001840:	7023      	strb	r3, [r4, #0]
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001842:	463b      	mov	r3, r7
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fccb 	bl	80001e0 <strlen>
 800184a:	4603      	mov	r3, r0
 800184c:	b29a      	uxth	r2, r3
 800184e:	4639      	mov	r1, r7
 8001850:	f04f 33ff 	mov.w	r3, #4294967295
 8001854:	4805      	ldr	r0, [pc, #20]	@ (800186c <test_button+0x80>)
 8001856:	f003 fc47 	bl	80050e8 <HAL_UART_Transmit>
}
 800185a:	bf00      	nop
 800185c:	3728      	adds	r7, #40	@ 0x28
 800185e:	46bd      	mov	sp, r7
 8001860:	bdb0      	pop	{r4, r5, r7, pc}
 8001862:	bf00      	nop
 8001864:	40020800 	.word	0x40020800
 8001868:	0800634c 	.word	0x0800634c
 800186c:	200001b4 	.word	0x200001b4
 8001870:	0800635c 	.word	0x0800635c

08001874 <test_uart>:

void test_uart(void) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b08e      	sub	sp, #56	@ 0x38
 8001878:	af00      	add	r7, sp, #0
    char msg[50];
    snprintf(msg, sizeof(msg), "UART OK: Transmission sent\n");
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	4a0a      	ldr	r2, [pc, #40]	@ (80018a8 <test_uart+0x34>)
 800187e:	2132      	movs	r1, #50	@ 0x32
 8001880:	4618      	mov	r0, r3
 8001882:	f004 f883 	bl	800598c <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fca9 	bl	80001e0 <strlen>
 800188e:	4603      	mov	r3, r0
 8001890:	b29a      	uxth	r2, r3
 8001892:	1d39      	adds	r1, r7, #4
 8001894:	f04f 33ff 	mov.w	r3, #4294967295
 8001898:	4804      	ldr	r0, [pc, #16]	@ (80018ac <test_uart+0x38>)
 800189a:	f003 fc25 	bl	80050e8 <HAL_UART_Transmit>
}
 800189e:	bf00      	nop
 80018a0:	3738      	adds	r7, #56	@ 0x38
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	08006370 	.word	0x08006370
 80018ac:	200001b4 	.word	0x200001b4

080018b0 <test_adc>:

void test_adc(void) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b094      	sub	sp, #80	@ 0x50
 80018b4:	af02      	add	r7, sp, #8
    HAL_ADC_Start(&hadc1);
 80018b6:	4834      	ldr	r0, [pc, #208]	@ (8001988 <test_adc+0xd8>)
 80018b8:	f000 fabe 	bl	8001e38 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 80018bc:	2164      	movs	r1, #100	@ 0x64
 80018be:	4832      	ldr	r0, [pc, #200]	@ (8001988 <test_adc+0xd8>)
 80018c0:	f000 fba1 	bl	8002006 <HAL_ADC_PollForConversion>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d14a      	bne.n	8001960 <test_adc+0xb0>
        uint32_t adc_val = HAL_ADC_GetValue(&hadc1);
 80018ca:	482f      	ldr	r0, [pc, #188]	@ (8001988 <test_adc+0xd8>)
 80018cc:	f000 fc26 	bl	800211c <HAL_ADC_GetValue>
 80018d0:	6478      	str	r0, [r7, #68]	@ 0x44
        float voltage = adc_val * 3.3 / 4096;
 80018d2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80018d4:	f7fe fe1e 	bl	8000514 <__aeabi_ui2d>
 80018d8:	a329      	add	r3, pc, #164	@ (adr r3, 8001980 <test_adc+0xd0>)
 80018da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018de:	f7fe fe93 	bl	8000608 <__aeabi_dmul>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4610      	mov	r0, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	4b27      	ldr	r3, [pc, #156]	@ (800198c <test_adc+0xdc>)
 80018f0:	f7fe ffb4 	bl	800085c <__aeabi_ddiv>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	f7ff f896 	bl	8000a2c <__aeabi_d2f>
 8001900:	4603      	mov	r3, r0
 8001902:	643b      	str	r3, [r7, #64]	@ 0x40
        char msg[50];
        int voltage_int = (int)voltage;
 8001904:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001908:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800190c:	ee17 3a90 	vmov	r3, s15
 8001910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        int voltage_dec = (int)((voltage - voltage_int) * 100);
 8001912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001914:	ee07 3a90 	vmov	s15, r3
 8001918:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800191c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001920:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001924:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001990 <test_adc+0xe0>
 8001928:	ee67 7a87 	vmul.f32	s15, s15, s14
 800192c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001930:	ee17 3a90 	vmov	r3, s15
 8001934:	63bb      	str	r3, [r7, #56]	@ 0x38
        snprintf(msg, sizeof(msg), "ADC OK: PA0 = %d.%02dV\n", voltage_int, voltage_dec);
 8001936:	1d38      	adds	r0, r7, #4
 8001938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800193e:	4a15      	ldr	r2, [pc, #84]	@ (8001994 <test_adc+0xe4>)
 8001940:	2132      	movs	r1, #50	@ 0x32
 8001942:	f004 f823 	bl	800598c <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fc49 	bl	80001e0 <strlen>
 800194e:	4603      	mov	r3, r0
 8001950:	b29a      	uxth	r2, r3
 8001952:	1d39      	adds	r1, r7, #4
 8001954:	f04f 33ff 	mov.w	r3, #4294967295
 8001958:	480f      	ldr	r0, [pc, #60]	@ (8001998 <test_adc+0xe8>)
 800195a:	f003 fbc5 	bl	80050e8 <HAL_UART_Transmit>
 800195e:	e006      	b.n	800196e <test_adc+0xbe>
    } else {
        HAL_UART_Transmit(&huart2, (uint8_t*)"ADC FAIL\n", 9, HAL_MAX_DELAY);
 8001960:	f04f 33ff 	mov.w	r3, #4294967295
 8001964:	2209      	movs	r2, #9
 8001966:	490d      	ldr	r1, [pc, #52]	@ (800199c <test_adc+0xec>)
 8001968:	480b      	ldr	r0, [pc, #44]	@ (8001998 <test_adc+0xe8>)
 800196a:	f003 fbbd 	bl	80050e8 <HAL_UART_Transmit>
    }
    HAL_ADC_Stop(&hadc1);
 800196e:	4806      	ldr	r0, [pc, #24]	@ (8001988 <test_adc+0xd8>)
 8001970:	f000 fb16 	bl	8001fa0 <HAL_ADC_Stop>
}
 8001974:	bf00      	nop
 8001976:	3748      	adds	r7, #72	@ 0x48
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	f3af 8000 	nop.w
 8001980:	66666666 	.word	0x66666666
 8001984:	400a6666 	.word	0x400a6666
 8001988:	20000078 	.word	0x20000078
 800198c:	40b00000 	.word	0x40b00000
 8001990:	42c80000 	.word	0x42c80000
 8001994:	0800638c 	.word	0x0800638c
 8001998:	200001b4 	.word	0x200001b4
 800199c:	080063a4 	.word	0x080063a4

080019a0 <test_spi>:

void test_spi(void) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b090      	sub	sp, #64	@ 0x40
 80019a4:	af02      	add	r7, sp, #8
    uint8_t tx = 0x5A;
 80019a6:	235a      	movs	r3, #90	@ 0x5a
 80019a8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    uint8_t rx = 0x00;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    char msg[50];

    HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(&hspi2, &tx, &rx, 1, 1000);
 80019b2:	f107 0235 	add.w	r2, r7, #53	@ 0x35
 80019b6:	f107 0136 	add.w	r1, r7, #54	@ 0x36
 80019ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	2301      	movs	r3, #1
 80019c2:	4817      	ldr	r0, [pc, #92]	@ (8001a20 <test_spi+0x80>)
 80019c4:	f002 fbef 	bl	80041a6 <HAL_SPI_TransmitReceive>
 80019c8:	4603      	mov	r3, r0
 80019ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if (status == HAL_OK && rx == tx) {
 80019ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10d      	bne.n	80019f2 <test_spi+0x52>
 80019d6:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 80019da:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80019de:	429a      	cmp	r2, r3
 80019e0:	d107      	bne.n	80019f2 <test_spi+0x52>
        snprintf(msg, sizeof(msg), "SPI OK: Data 0x%02X received\n", rx);
 80019e2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80019e6:	4638      	mov	r0, r7
 80019e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001a24 <test_spi+0x84>)
 80019ea:	2132      	movs	r1, #50	@ 0x32
 80019ec:	f003 ffce 	bl	800598c <sniprintf>
 80019f0:	e005      	b.n	80019fe <test_spi+0x5e>
    } else {
        snprintf(msg, sizeof(msg), "SPI FAIL: Error or incorrect data\n");
 80019f2:	463b      	mov	r3, r7
 80019f4:	4a0c      	ldr	r2, [pc, #48]	@ (8001a28 <test_spi+0x88>)
 80019f6:	2132      	movs	r1, #50	@ 0x32
 80019f8:	4618      	mov	r0, r3
 80019fa:	f003 ffc7 	bl	800598c <sniprintf>
    }
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80019fe:	463b      	mov	r3, r7
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fbed 	bl	80001e0 <strlen>
 8001a06:	4603      	mov	r3, r0
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	4639      	mov	r1, r7
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a10:	4806      	ldr	r0, [pc, #24]	@ (8001a2c <test_spi+0x8c>)
 8001a12:	f003 fb69 	bl	80050e8 <HAL_UART_Transmit>
}
 8001a16:	bf00      	nop
 8001a18:	3738      	adds	r7, #56	@ 0x38
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000114 	.word	0x20000114
 8001a24:	080063b0 	.word	0x080063b0
 8001a28:	080063d0 	.word	0x080063d0
 8001a2c:	200001b4 	.word	0x200001b4

08001a30 <test_i2c>:

void test_i2c(void) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b092      	sub	sp, #72	@ 0x48
 8001a34:	af04      	add	r7, sp, #16
    uint8_t who_am_i_reg = 0x75;
 8001a36:	2375      	movs	r3, #117	@ 0x75
 8001a38:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t response = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    char msg[50];
    uint8_t mpu_addr = 0x68 << 1;
 8001a42:	23d0      	movs	r3, #208	@ 0xd0
 8001a44:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, mpu_addr, who_am_i_reg, I2C_MEMADD_SIZE_8BIT, &response, 1, 1000);
 8001a48:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001a4c:	b299      	uxth	r1, r3
 8001a4e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a58:	9302      	str	r3, [sp, #8]
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	2301      	movs	r3, #1
 8001a66:	481e      	ldr	r0, [pc, #120]	@ (8001ae0 <test_i2c+0xb0>)
 8001a68:	f001 f974 	bl	8002d54 <HAL_I2C_Mem_Read>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    if (status == HAL_OK) {
 8001a72:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d11b      	bne.n	8001ab2 <test_i2c+0x82>
        if (response == 0x71 || response == 0x70 || response == 0x73) {
 8001a7a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001a7e:	2b71      	cmp	r3, #113	@ 0x71
 8001a80:	d007      	beq.n	8001a92 <test_i2c+0x62>
 8001a82:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001a86:	2b70      	cmp	r3, #112	@ 0x70
 8001a88:	d003      	beq.n	8001a92 <test_i2c+0x62>
 8001a8a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001a8e:	2b73      	cmp	r3, #115	@ 0x73
 8001a90:	d107      	bne.n	8001aa2 <test_i2c+0x72>
            snprintf(msg, sizeof(msg), "I2C OK: MPU WHO_AM_I = 0x%02X\n", response);
 8001a92:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001a96:	4638      	mov	r0, r7
 8001a98:	4a12      	ldr	r2, [pc, #72]	@ (8001ae4 <test_i2c+0xb4>)
 8001a9a:	2132      	movs	r1, #50	@ 0x32
 8001a9c:	f003 ff76 	bl	800598c <sniprintf>
 8001aa0:	e00d      	b.n	8001abe <test_i2c+0x8e>
        } else {
            snprintf(msg, sizeof(msg), "I2C FAIL: Unexpected WHO_AM_I = 0x%02X\n", response);
 8001aa2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001aa6:	4638      	mov	r0, r7
 8001aa8:	4a0f      	ldr	r2, [pc, #60]	@ (8001ae8 <test_i2c+0xb8>)
 8001aaa:	2132      	movs	r1, #50	@ 0x32
 8001aac:	f003 ff6e 	bl	800598c <sniprintf>
 8001ab0:	e005      	b.n	8001abe <test_i2c+0x8e>
        }
    } else {
        snprintf(msg, sizeof(msg), "I2C FAIL: No response\n");
 8001ab2:	463b      	mov	r3, r7
 8001ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8001aec <test_i2c+0xbc>)
 8001ab6:	2132      	movs	r1, #50	@ 0x32
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f003 ff67 	bl	800598c <sniprintf>
    }
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001abe:	463b      	mov	r3, r7
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fb8d 	bl	80001e0 <strlen>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	4639      	mov	r1, r7
 8001acc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad0:	4807      	ldr	r0, [pc, #28]	@ (8001af0 <test_i2c+0xc0>)
 8001ad2:	f003 fb09 	bl	80050e8 <HAL_UART_Transmit>
}
 8001ad6:	bf00      	nop
 8001ad8:	3738      	adds	r7, #56	@ 0x38
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200000c0 	.word	0x200000c0
 8001ae4:	080063f4 	.word	0x080063f4
 8001ae8:	08006414 	.word	0x08006414
 8001aec:	0800643c 	.word	0x0800643c
 8001af0:	200001b4 	.word	0x200001b4

08001af4 <test_timer>:

void test_timer(void) {
 8001af4:	b590      	push	{r4, r7, lr}
 8001af6:	b095      	sub	sp, #84	@ 0x54
 8001af8:	af00      	add	r7, sp, #0
    char msg[50];
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001afa:	2100      	movs	r1, #0
 8001afc:	481e      	ldr	r0, [pc, #120]	@ (8001b78 <test_timer+0x84>)
 8001afe:	f002 fe27 	bl	8004750 <HAL_TIM_PWM_Start>

    uint32_t duty_cycles[] = {250, 500, 750, 1000};
 8001b02:	4b1e      	ldr	r3, [pc, #120]	@ (8001b7c <test_timer+0x88>)
 8001b04:	1d3c      	adds	r4, r7, #4
 8001b06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const int num_cycles = sizeof(duty_cycles) / sizeof(duty_cycles[0]);
 8001b0c:	2304      	movs	r3, #4
 8001b0e:	64bb      	str	r3, [r7, #72]	@ 0x48

    for (int i = 0; i < num_cycles; ++i) {
 8001b10:	2300      	movs	r3, #0
 8001b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b14:	e00f      	b.n	8001b36 <test_timer+0x42>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycles[i]);
 8001b16:	4b18      	ldr	r3, [pc, #96]	@ (8001b78 <test_timer+0x84>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	3350      	adds	r3, #80	@ 0x50
 8001b20:	443b      	add	r3, r7
 8001b22:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8001b26:	6353      	str	r3, [r2, #52]	@ 0x34
        HAL_Delay(500);
 8001b28:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b2c:	f000 f91c 	bl	8001d68 <HAL_Delay>
    for (int i = 0; i < num_cycles; ++i) {
 8001b30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b32:	3301      	adds	r3, #1
 8001b34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	dbeb      	blt.n	8001b16 <test_timer+0x22>
    }

    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001b3e:	2100      	movs	r1, #0
 8001b40:	480d      	ldr	r0, [pc, #52]	@ (8001b78 <test_timer+0x84>)
 8001b42:	f002 feb5 	bl	80048b0 <HAL_TIM_PWM_Stop>
    snprintf(msg, sizeof(msg), "PWM OK: Duty cycles tested\n");
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	4a0d      	ldr	r2, [pc, #52]	@ (8001b80 <test_timer+0x8c>)
 8001b4c:	2132      	movs	r1, #50	@ 0x32
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f003 ff1c 	bl	800598c <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fb41 	bl	80001e0 <strlen>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	f107 0114 	add.w	r1, r7, #20
 8001b66:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6a:	4806      	ldr	r0, [pc, #24]	@ (8001b84 <test_timer+0x90>)
 8001b6c:	f003 fabc 	bl	80050e8 <HAL_UART_Transmit>
}
 8001b70:	bf00      	nop
 8001b72:	3754      	adds	r7, #84	@ 0x54
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd90      	pop	{r4, r7, pc}
 8001b78:	2000016c 	.word	0x2000016c
 8001b7c:	08006470 	.word	0x08006470
 8001b80:	08006454 	.word	0x08006454
 8001b84:	200001b4 	.word	0x200001b4

08001b88 <run_all_tests>:

void run_all_tests(void) {
 8001b88:	b5b0      	push	{r4, r5, r7, lr}
 8001b8a:	b08e      	sub	sp, #56	@ 0x38
 8001b8c:	af00      	add	r7, sp, #0
    char start_msg[] = "START: Running all tests\n\n";
 8001b8e:	4b25      	ldr	r3, [pc, #148]	@ (8001c24 <run_all_tests+0x9c>)
 8001b90:	f107 041c 	add.w	r4, r7, #28
 8001b94:	461d      	mov	r5, r3
 8001b96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b9e:	c403      	stmia	r4!, {r0, r1}
 8001ba0:	8022      	strh	r2, [r4, #0]
 8001ba2:	3402      	adds	r4, #2
 8001ba4:	0c13      	lsrs	r3, r2, #16
 8001ba6:	7023      	strb	r3, [r4, #0]
    char end_msg[] = "END: All tests completed\n";
 8001ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c28 <run_all_tests+0xa0>)
 8001baa:	463c      	mov	r4, r7
 8001bac:	461d      	mov	r5, r3
 8001bae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bb2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bb6:	c403      	stmia	r4!, {r0, r1}
 8001bb8:	8022      	strh	r2, [r4, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)start_msg, strlen(start_msg), HAL_MAX_DELAY);
 8001bba:	f107 031c 	add.w	r3, r7, #28
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fb0e 	bl	80001e0 <strlen>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	f107 011c 	add.w	r1, r7, #28
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd0:	4816      	ldr	r0, [pc, #88]	@ (8001c2c <run_all_tests+0xa4>)
 8001bd2:	f003 fa89 	bl	80050e8 <HAL_UART_Transmit>
    HAL_Delay(10);
 8001bd6:	200a      	movs	r0, #10
 8001bd8:	f000 f8c6 	bl	8001d68 <HAL_Delay>

    test_system();
 8001bdc:	f7ff fda2 	bl	8001724 <test_system>
    test_led();
 8001be0:	f7ff fdd2 	bl	8001788 <test_led>
    test_button();
 8001be4:	f7ff fe02 	bl	80017ec <test_button>
    test_uart();
 8001be8:	f7ff fe44 	bl	8001874 <test_uart>
    test_adc();
 8001bec:	f7ff fe60 	bl	80018b0 <test_adc>
    test_spi();
 8001bf0:	f7ff fed6 	bl	80019a0 <test_spi>
    test_i2c();
 8001bf4:	f7ff ff1c 	bl	8001a30 <test_i2c>
    test_timer();
 8001bf8:	f7ff ff7c 	bl	8001af4 <test_timer>

    HAL_UART_Transmit(&huart2, (uint8_t*)end_msg, strlen(end_msg), HAL_MAX_DELAY);
 8001bfc:	463b      	mov	r3, r7
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe faee 	bl	80001e0 <strlen>
 8001c04:	4603      	mov	r3, r0
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	4639      	mov	r1, r7
 8001c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0e:	4807      	ldr	r0, [pc, #28]	@ (8001c2c <run_all_tests+0xa4>)
 8001c10:	f003 fa6a 	bl	80050e8 <HAL_UART_Transmit>
    HAL_Delay(5000);
 8001c14:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001c18:	f000 f8a6 	bl	8001d68 <HAL_Delay>
}
 8001c1c:	bf00      	nop
 8001c1e:	3738      	adds	r7, #56	@ 0x38
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bdb0      	pop	{r4, r5, r7, pc}
 8001c24:	08006480 	.word	0x08006480
 8001c28:	0800649c 	.word	0x0800649c
 8001c2c:	200001b4 	.word	0x200001b4

08001c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c34:	f7ff fd64 	bl	8001700 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c38:	480c      	ldr	r0, [pc, #48]	@ (8001c6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c3a:	490d      	ldr	r1, [pc, #52]	@ (8001c70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c40:	e002      	b.n	8001c48 <LoopCopyDataInit>

08001c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c46:	3304      	adds	r3, #4

08001c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c4c:	d3f9      	bcc.n	8001c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c50:	4c0a      	ldr	r4, [pc, #40]	@ (8001c7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c54:	e001      	b.n	8001c5a <LoopFillZerobss>

08001c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c58:	3204      	adds	r2, #4

08001c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c5c:	d3fb      	bcc.n	8001c56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c5e:	f003 fed9 	bl	8005a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c62:	f7ff f8c9 	bl	8000df8 <main>
  bx  lr    
 8001c66:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c70:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001c74:	08006514 	.word	0x08006514
  ldr r2, =_sbss
 8001c78:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001c7c:	2000034c 	.word	0x2000034c

08001c80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c80:	e7fe      	b.n	8001c80 <ADC_IRQHandler>
	...

08001c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c88:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc4 <HAL_Init+0x40>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc4 <HAL_Init+0x40>)
 8001c8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c94:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc4 <HAL_Init+0x40>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <HAL_Init+0x40>)
 8001c9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca0:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <HAL_Init+0x40>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a07      	ldr	r2, [pc, #28]	@ (8001cc4 <HAL_Init+0x40>)
 8001ca6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001caa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cac:	2003      	movs	r0, #3
 8001cae:	f000 fd23 	bl	80026f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	f000 f808 	bl	8001cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb8:	f7ff f8f0 	bl	8000e9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023c00 	.word	0x40023c00

08001cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cd0:	4b12      	ldr	r3, [pc, #72]	@ (8001d1c <HAL_InitTick+0x54>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b12      	ldr	r3, [pc, #72]	@ (8001d20 <HAL_InitTick+0x58>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 fd2d 	bl	8002746 <HAL_SYSTICK_Config>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00e      	b.n	8001d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b0f      	cmp	r3, #15
 8001cfa:	d80a      	bhi.n	8001d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295
 8001d04:	f000 fd03 	bl	800270e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d08:	4a06      	ldr	r2, [pc, #24]	@ (8001d24 <HAL_InitTick+0x5c>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e000      	b.n	8001d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	20000008 	.word	0x20000008
 8001d24:	20000004 	.word	0x20000004

08001d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <HAL_IncTick+0x20>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <HAL_IncTick+0x24>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4413      	add	r3, r2
 8001d38:	4a04      	ldr	r2, [pc, #16]	@ (8001d4c <HAL_IncTick+0x24>)
 8001d3a:	6013      	str	r3, [r2, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000008 	.word	0x20000008
 8001d4c:	20000200 	.word	0x20000200

08001d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return uwTick;
 8001d54:	4b03      	ldr	r3, [pc, #12]	@ (8001d64 <HAL_GetTick+0x14>)
 8001d56:	681b      	ldr	r3, [r3, #0]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	20000200 	.word	0x20000200

08001d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d70:	f7ff ffee 	bl	8001d50 <HAL_GetTick>
 8001d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d80:	d005      	beq.n	8001d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d82:	4b0a      	ldr	r3, [pc, #40]	@ (8001dac <HAL_Delay+0x44>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d8e:	bf00      	nop
 8001d90:	f7ff ffde 	bl	8001d50 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d8f7      	bhi.n	8001d90 <HAL_Delay+0x28>
  {
  }
}
 8001da0:	bf00      	nop
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000008 	.word	0x20000008

08001db0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e033      	b.n	8001e2e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d109      	bne.n	8001de2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff f88c 	bl	8000eec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	f003 0310 	and.w	r3, r3, #16
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d118      	bne.n	8001e20 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001df6:	f023 0302 	bic.w	r3, r3, #2
 8001dfa:	f043 0202 	orr.w	r2, r3, #2
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 faca 	bl	800239c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e12:	f023 0303 	bic.w	r3, r3, #3
 8001e16:	f043 0201 	orr.w	r2, r3, #1
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e1e:	e001      	b.n	8001e24 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_ADC_Start+0x1a>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e097      	b.n	8001f82 <HAL_ADC_Start+0x14a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d018      	beq.n	8001e9a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e78:	4b45      	ldr	r3, [pc, #276]	@ (8001f90 <HAL_ADC_Start+0x158>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a45      	ldr	r2, [pc, #276]	@ (8001f94 <HAL_ADC_Start+0x15c>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	0c9a      	lsrs	r2, r3, #18
 8001e84:	4613      	mov	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4413      	add	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001e8c:	e002      	b.n	8001e94 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	3b01      	subs	r3, #1
 8001e92:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f9      	bne.n	8001e8e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d15f      	bne.n	8001f68 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eac:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001eb0:	f023 0301 	bic.w	r3, r3, #1
 8001eb4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d007      	beq.n	8001eda <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ed2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ede:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ee6:	d106      	bne.n	8001ef6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eec:	f023 0206 	bic.w	r2, r3, #6
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ef4:	e002      	b.n	8001efc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f04:	4b24      	ldr	r3, [pc, #144]	@ (8001f98 <HAL_ADC_Start+0x160>)
 8001f06:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001f10:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10f      	bne.n	8001f3e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d129      	bne.n	8001f80 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	e020      	b.n	8001f80 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a16      	ldr	r2, [pc, #88]	@ (8001f9c <HAL_ADC_Start+0x164>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d11b      	bne.n	8001f80 <HAL_ADC_Start+0x148>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d114      	bne.n	8001f80 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	e00b      	b.n	8001f80 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6c:	f043 0210 	orr.w	r2, r3, #16
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f78:	f043 0201 	orr.w	r2, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	20000000 	.word	0x20000000
 8001f94:	431bde83 	.word	0x431bde83
 8001f98:	40012300 	.word	0x40012300
 8001f9c:	40012000 	.word	0x40012000

08001fa0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <HAL_ADC_Stop+0x16>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e021      	b.n	8001ffa <HAL_ADC_Stop+0x5a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0201 	bic.w	r2, r2, #1
 8001fcc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d109      	bne.n	8001ff0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001fe4:	f023 0301 	bic.w	r3, r3, #1
 8001fe8:	f043 0201 	orr.w	r2, r3, #1
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800201e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002022:	d113      	bne.n	800204c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800202e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002032:	d10b      	bne.n	800204c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002038:	f043 0220 	orr.w	r2, r3, #32
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e063      	b.n	8002114 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800204c:	f7ff fe80 	bl	8001d50 <HAL_GetTick>
 8002050:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002052:	e021      	b.n	8002098 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205a:	d01d      	beq.n	8002098 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d007      	beq.n	8002072 <HAL_ADC_PollForConversion+0x6c>
 8002062:	f7ff fe75 	bl	8001d50 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d212      	bcs.n	8002098 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b02      	cmp	r3, #2
 800207e:	d00b      	beq.n	8002098 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002084:	f043 0204 	orr.w	r2, r3, #4
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e03d      	b.n	8002114 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d1d6      	bne.n	8002054 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f06f 0212 	mvn.w	r2, #18
 80020ae:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d123      	bne.n	8002112 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d11f      	bne.n	8002112 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d006      	beq.n	80020ee <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d111      	bne.n	8002112 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d105      	bne.n	8002112 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210a:	f043 0201 	orr.w	r2, r3, #1
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800212a:	4618      	mov	r0, r3
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
	...

08002138 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x1c>
 8002150:	2302      	movs	r3, #2
 8002152:	e113      	b.n	800237c <HAL_ADC_ConfigChannel+0x244>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b09      	cmp	r3, #9
 8002162:	d925      	bls.n	80021b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68d9      	ldr	r1, [r3, #12]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	b29b      	uxth	r3, r3
 8002170:	461a      	mov	r2, r3
 8002172:	4613      	mov	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4413      	add	r3, r2
 8002178:	3b1e      	subs	r3, #30
 800217a:	2207      	movs	r2, #7
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43da      	mvns	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	400a      	ands	r2, r1
 8002188:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68d9      	ldr	r1, [r3, #12]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	b29b      	uxth	r3, r3
 800219a:	4618      	mov	r0, r3
 800219c:	4603      	mov	r3, r0
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4403      	add	r3, r0
 80021a2:	3b1e      	subs	r3, #30
 80021a4:	409a      	lsls	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	e022      	b.n	80021f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6919      	ldr	r1, [r3, #16]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	461a      	mov	r2, r3
 80021be:	4613      	mov	r3, r2
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4413      	add	r3, r2
 80021c4:	2207      	movs	r2, #7
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43da      	mvns	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	400a      	ands	r2, r1
 80021d2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6919      	ldr	r1, [r3, #16]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	4618      	mov	r0, r3
 80021e6:	4603      	mov	r3, r0
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	4403      	add	r3, r0
 80021ec:	409a      	lsls	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b06      	cmp	r3, #6
 80021fc:	d824      	bhi.n	8002248 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	3b05      	subs	r3, #5
 8002210:	221f      	movs	r2, #31
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43da      	mvns	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	400a      	ands	r2, r1
 800221e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	b29b      	uxth	r3, r3
 800222c:	4618      	mov	r0, r3
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	3b05      	subs	r3, #5
 800223a:	fa00 f203 	lsl.w	r2, r0, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	635a      	str	r2, [r3, #52]	@ 0x34
 8002246:	e04c      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b0c      	cmp	r3, #12
 800224e:	d824      	bhi.n	800229a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	3b23      	subs	r3, #35	@ 0x23
 8002262:	221f      	movs	r2, #31
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43da      	mvns	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	400a      	ands	r2, r1
 8002270:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	b29b      	uxth	r3, r3
 800227e:	4618      	mov	r0, r3
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	3b23      	subs	r3, #35	@ 0x23
 800228c:	fa00 f203 	lsl.w	r2, r0, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	631a      	str	r2, [r3, #48]	@ 0x30
 8002298:	e023      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	3b41      	subs	r3, #65	@ 0x41
 80022ac:	221f      	movs	r2, #31
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43da      	mvns	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	400a      	ands	r2, r1
 80022ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	4618      	mov	r0, r3
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	3b41      	subs	r3, #65	@ 0x41
 80022d6:	fa00 f203 	lsl.w	r2, r0, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022e2:	4b29      	ldr	r3, [pc, #164]	@ (8002388 <HAL_ADC_ConfigChannel+0x250>)
 80022e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a28      	ldr	r2, [pc, #160]	@ (800238c <HAL_ADC_ConfigChannel+0x254>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d10f      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x1d8>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b12      	cmp	r3, #18
 80022f6:	d10b      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a1d      	ldr	r2, [pc, #116]	@ (800238c <HAL_ADC_ConfigChannel+0x254>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d12b      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x23a>
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a1c      	ldr	r2, [pc, #112]	@ (8002390 <HAL_ADC_ConfigChannel+0x258>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d003      	beq.n	800232c <HAL_ADC_ConfigChannel+0x1f4>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b11      	cmp	r3, #17
 800232a:	d122      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a11      	ldr	r2, [pc, #68]	@ (8002390 <HAL_ADC_ConfigChannel+0x258>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d111      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800234e:	4b11      	ldr	r3, [pc, #68]	@ (8002394 <HAL_ADC_ConfigChannel+0x25c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a11      	ldr	r2, [pc, #68]	@ (8002398 <HAL_ADC_ConfigChannel+0x260>)
 8002354:	fba2 2303 	umull	r2, r3, r2, r3
 8002358:	0c9a      	lsrs	r2, r3, #18
 800235a:	4613      	mov	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002364:	e002      	b.n	800236c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	3b01      	subs	r3, #1
 800236a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f9      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	40012300 	.word	0x40012300
 800238c:	40012000 	.word	0x40012000
 8002390:	10000012 	.word	0x10000012
 8002394:	20000000 	.word	0x20000000
 8002398:	431bde83 	.word	0x431bde83

0800239c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023a4:	4b79      	ldr	r3, [pc, #484]	@ (800258c <ADC_Init+0x1f0>)
 80023a6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	431a      	orrs	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6859      	ldr	r1, [r3, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	021a      	lsls	r2, r3, #8
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80023f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6859      	ldr	r1, [r3, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002416:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6899      	ldr	r1, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68da      	ldr	r2, [r3, #12]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800242e:	4a58      	ldr	r2, [pc, #352]	@ (8002590 <ADC_Init+0x1f4>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d022      	beq.n	800247a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002442:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6899      	ldr	r1, [r3, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002464:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6899      	ldr	r1, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	e00f      	b.n	800249a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002488:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002498:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0202 	bic.w	r2, r2, #2
 80024a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6899      	ldr	r1, [r3, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	7e1b      	ldrb	r3, [r3, #24]
 80024b4:	005a      	lsls	r2, r3, #1
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d01b      	beq.n	8002500 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024d6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80024e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6859      	ldr	r1, [r3, #4]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f2:	3b01      	subs	r3, #1
 80024f4:	035a      	lsls	r2, r3, #13
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	e007      	b.n	8002510 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800250e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800251e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	3b01      	subs	r3, #1
 800252c:	051a      	lsls	r2, r3, #20
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002544:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6899      	ldr	r1, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002552:	025a      	lsls	r2, r3, #9
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800256a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6899      	ldr	r1, [r3, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	029a      	lsls	r2, r3, #10
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	609a      	str	r2, [r3, #8]
}
 8002580:	bf00      	nop
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	40012300 	.word	0x40012300
 8002590:	0f000001 	.word	0x0f000001

08002594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a4:	4b0c      	ldr	r3, [pc, #48]	@ (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025b0:	4013      	ands	r3, r2
 80025b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025c6:	4a04      	ldr	r2, [pc, #16]	@ (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	60d3      	str	r3, [r2, #12]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e0:	4b04      	ldr	r3, [pc, #16]	@ (80025f4 <__NVIC_GetPriorityGrouping+0x18>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	0a1b      	lsrs	r3, r3, #8
 80025e6:	f003 0307 	and.w	r3, r3, #7
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	6039      	str	r1, [r7, #0]
 8002602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002608:	2b00      	cmp	r3, #0
 800260a:	db0a      	blt.n	8002622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	b2da      	uxtb	r2, r3
 8002610:	490c      	ldr	r1, [pc, #48]	@ (8002644 <__NVIC_SetPriority+0x4c>)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	0112      	lsls	r2, r2, #4
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	440b      	add	r3, r1
 800261c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002620:	e00a      	b.n	8002638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	b2da      	uxtb	r2, r3
 8002626:	4908      	ldr	r1, [pc, #32]	@ (8002648 <__NVIC_SetPriority+0x50>)
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	3b04      	subs	r3, #4
 8002630:	0112      	lsls	r2, r2, #4
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	440b      	add	r3, r1
 8002636:	761a      	strb	r2, [r3, #24]
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	e000e100 	.word	0xe000e100
 8002648:	e000ed00 	.word	0xe000ed00

0800264c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800264c:	b480      	push	{r7}
 800264e:	b089      	sub	sp, #36	@ 0x24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f1c3 0307 	rsb	r3, r3, #7
 8002666:	2b04      	cmp	r3, #4
 8002668:	bf28      	it	cs
 800266a:	2304      	movcs	r3, #4
 800266c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3304      	adds	r3, #4
 8002672:	2b06      	cmp	r3, #6
 8002674:	d902      	bls.n	800267c <NVIC_EncodePriority+0x30>
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	3b03      	subs	r3, #3
 800267a:	e000      	b.n	800267e <NVIC_EncodePriority+0x32>
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002680:	f04f 32ff 	mov.w	r2, #4294967295
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43da      	mvns	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	401a      	ands	r2, r3
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002694:	f04f 31ff 	mov.w	r1, #4294967295
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	fa01 f303 	lsl.w	r3, r1, r3
 800269e:	43d9      	mvns	r1, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a4:	4313      	orrs	r3, r2
         );
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3724      	adds	r7, #36	@ 0x24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3b01      	subs	r3, #1
 80026c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026c4:	d301      	bcc.n	80026ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026c6:	2301      	movs	r3, #1
 80026c8:	e00f      	b.n	80026ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ca:	4a0a      	ldr	r2, [pc, #40]	@ (80026f4 <SysTick_Config+0x40>)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026d2:	210f      	movs	r1, #15
 80026d4:	f04f 30ff 	mov.w	r0, #4294967295
 80026d8:	f7ff ff8e 	bl	80025f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026dc:	4b05      	ldr	r3, [pc, #20]	@ (80026f4 <SysTick_Config+0x40>)
 80026de:	2200      	movs	r2, #0
 80026e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026e2:	4b04      	ldr	r3, [pc, #16]	@ (80026f4 <SysTick_Config+0x40>)
 80026e4:	2207      	movs	r2, #7
 80026e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	e000e010 	.word	0xe000e010

080026f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ff47 	bl	8002594 <__NVIC_SetPriorityGrouping>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800270e:	b580      	push	{r7, lr}
 8002710:	b086      	sub	sp, #24
 8002712:	af00      	add	r7, sp, #0
 8002714:	4603      	mov	r3, r0
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
 800271a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002720:	f7ff ff5c 	bl	80025dc <__NVIC_GetPriorityGrouping>
 8002724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	68b9      	ldr	r1, [r7, #8]
 800272a:	6978      	ldr	r0, [r7, #20]
 800272c:	f7ff ff8e 	bl	800264c <NVIC_EncodePriority>
 8002730:	4602      	mov	r2, r0
 8002732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002736:	4611      	mov	r1, r2
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff ff5d 	bl	80025f8 <__NVIC_SetPriority>
}
 800273e:	bf00      	nop
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff ffb0 	bl	80026b4 <SysTick_Config>
 8002754:	4603      	mov	r3, r0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002760:	b480      	push	{r7}
 8002762:	b089      	sub	sp, #36	@ 0x24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800276e:	2300      	movs	r3, #0
 8002770:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002772:	2300      	movs	r3, #0
 8002774:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
 800277a:	e159      	b.n	8002a30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800277c:	2201      	movs	r2, #1
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	4013      	ands	r3, r2
 800278e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	429a      	cmp	r2, r3
 8002796:	f040 8148 	bne.w	8002a2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d005      	beq.n	80027b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d130      	bne.n	8002814 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	2203      	movs	r2, #3
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027e8:	2201      	movs	r2, #1
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	f003 0201 	and.w	r2, r3, #1
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	2b03      	cmp	r3, #3
 800281e:	d017      	beq.n	8002850 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	2203      	movs	r2, #3
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d123      	bne.n	80028a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	08da      	lsrs	r2, r3, #3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3208      	adds	r2, #8
 8002864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002868:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	220f      	movs	r2, #15
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	08da      	lsrs	r2, r3, #3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	3208      	adds	r2, #8
 800289e:	69b9      	ldr	r1, [r7, #24]
 80028a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	2203      	movs	r2, #3
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4013      	ands	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 0203 	and.w	r2, r3, #3
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 80a2 	beq.w	8002a2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	4b57      	ldr	r3, [pc, #348]	@ (8002a48 <HAL_GPIO_Init+0x2e8>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ee:	4a56      	ldr	r2, [pc, #344]	@ (8002a48 <HAL_GPIO_Init+0x2e8>)
 80028f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80028f6:	4b54      	ldr	r3, [pc, #336]	@ (8002a48 <HAL_GPIO_Init+0x2e8>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002902:	4a52      	ldr	r2, [pc, #328]	@ (8002a4c <HAL_GPIO_Init+0x2ec>)
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	089b      	lsrs	r3, r3, #2
 8002908:	3302      	adds	r3, #2
 800290a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800290e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	220f      	movs	r2, #15
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4013      	ands	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a49      	ldr	r2, [pc, #292]	@ (8002a50 <HAL_GPIO_Init+0x2f0>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d019      	beq.n	8002962 <HAL_GPIO_Init+0x202>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a48      	ldr	r2, [pc, #288]	@ (8002a54 <HAL_GPIO_Init+0x2f4>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d013      	beq.n	800295e <HAL_GPIO_Init+0x1fe>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a47      	ldr	r2, [pc, #284]	@ (8002a58 <HAL_GPIO_Init+0x2f8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00d      	beq.n	800295a <HAL_GPIO_Init+0x1fa>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a46      	ldr	r2, [pc, #280]	@ (8002a5c <HAL_GPIO_Init+0x2fc>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d007      	beq.n	8002956 <HAL_GPIO_Init+0x1f6>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a45      	ldr	r2, [pc, #276]	@ (8002a60 <HAL_GPIO_Init+0x300>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d101      	bne.n	8002952 <HAL_GPIO_Init+0x1f2>
 800294e:	2304      	movs	r3, #4
 8002950:	e008      	b.n	8002964 <HAL_GPIO_Init+0x204>
 8002952:	2307      	movs	r3, #7
 8002954:	e006      	b.n	8002964 <HAL_GPIO_Init+0x204>
 8002956:	2303      	movs	r3, #3
 8002958:	e004      	b.n	8002964 <HAL_GPIO_Init+0x204>
 800295a:	2302      	movs	r3, #2
 800295c:	e002      	b.n	8002964 <HAL_GPIO_Init+0x204>
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <HAL_GPIO_Init+0x204>
 8002962:	2300      	movs	r3, #0
 8002964:	69fa      	ldr	r2, [r7, #28]
 8002966:	f002 0203 	and.w	r2, r2, #3
 800296a:	0092      	lsls	r2, r2, #2
 800296c:	4093      	lsls	r3, r2
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002974:	4935      	ldr	r1, [pc, #212]	@ (8002a4c <HAL_GPIO_Init+0x2ec>)
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	089b      	lsrs	r3, r3, #2
 800297a:	3302      	adds	r3, #2
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002982:	4b38      	ldr	r3, [pc, #224]	@ (8002a64 <HAL_GPIO_Init+0x304>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	43db      	mvns	r3, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4013      	ands	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029a6:	4a2f      	ldr	r2, [pc, #188]	@ (8002a64 <HAL_GPIO_Init+0x304>)
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002a64 <HAL_GPIO_Init+0x304>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029d0:	4a24      	ldr	r2, [pc, #144]	@ (8002a64 <HAL_GPIO_Init+0x304>)
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029d6:	4b23      	ldr	r3, [pc, #140]	@ (8002a64 <HAL_GPIO_Init+0x304>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002a64 <HAL_GPIO_Init+0x304>)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a00:	4b18      	ldr	r3, [pc, #96]	@ (8002a64 <HAL_GPIO_Init+0x304>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a24:	4a0f      	ldr	r2, [pc, #60]	@ (8002a64 <HAL_GPIO_Init+0x304>)
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	61fb      	str	r3, [r7, #28]
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	2b0f      	cmp	r3, #15
 8002a34:	f67f aea2 	bls.w	800277c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a38:	bf00      	nop
 8002a3a:	bf00      	nop
 8002a3c:	3724      	adds	r7, #36	@ 0x24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40013800 	.word	0x40013800
 8002a50:	40020000 	.word	0x40020000
 8002a54:	40020400 	.word	0x40020400
 8002a58:	40020800 	.word	0x40020800
 8002a5c:	40020c00 	.word	0x40020c00
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40013c00 	.word	0x40013c00

08002a68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	887b      	ldrh	r3, [r7, #2]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d002      	beq.n	8002a86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a80:	2301      	movs	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
 8002a84:	e001      	b.n	8002a8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a86:	2300      	movs	r3, #0
 8002a88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	807b      	strh	r3, [r7, #2]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002aa8:	787b      	ldrb	r3, [r7, #1]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aae:	887a      	ldrh	r2, [r7, #2]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ab4:	e003      	b.n	8002abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ab6:	887b      	ldrh	r3, [r7, #2]
 8002ab8:	041a      	lsls	r2, r3, #16
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	619a      	str	r2, [r3, #24]
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e12b      	b.n	8002d36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7fe fa3e 	bl	8000f74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2224      	movs	r2, #36	@ 0x24
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0201 	bic.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b30:	f001 fa88 	bl	8004044 <HAL_RCC_GetPCLK1Freq>
 8002b34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	4a81      	ldr	r2, [pc, #516]	@ (8002d40 <HAL_I2C_Init+0x274>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d807      	bhi.n	8002b50 <HAL_I2C_Init+0x84>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4a80      	ldr	r2, [pc, #512]	@ (8002d44 <HAL_I2C_Init+0x278>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	bf94      	ite	ls
 8002b48:	2301      	movls	r3, #1
 8002b4a:	2300      	movhi	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	e006      	b.n	8002b5e <HAL_I2C_Init+0x92>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4a7d      	ldr	r2, [pc, #500]	@ (8002d48 <HAL_I2C_Init+0x27c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	bf94      	ite	ls
 8002b58:	2301      	movls	r3, #1
 8002b5a:	2300      	movhi	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e0e7      	b.n	8002d36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4a78      	ldr	r2, [pc, #480]	@ (8002d4c <HAL_I2C_Init+0x280>)
 8002b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6e:	0c9b      	lsrs	r3, r3, #18
 8002b70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	4a6a      	ldr	r2, [pc, #424]	@ (8002d40 <HAL_I2C_Init+0x274>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d802      	bhi.n	8002ba0 <HAL_I2C_Init+0xd4>
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	e009      	b.n	8002bb4 <HAL_I2C_Init+0xe8>
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002ba6:	fb02 f303 	mul.w	r3, r2, r3
 8002baa:	4a69      	ldr	r2, [pc, #420]	@ (8002d50 <HAL_I2C_Init+0x284>)
 8002bac:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb0:	099b      	lsrs	r3, r3, #6
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6812      	ldr	r2, [r2, #0]
 8002bb8:	430b      	orrs	r3, r1
 8002bba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002bc6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	495c      	ldr	r1, [pc, #368]	@ (8002d40 <HAL_I2C_Init+0x274>)
 8002bd0:	428b      	cmp	r3, r1
 8002bd2:	d819      	bhi.n	8002c08 <HAL_I2C_Init+0x13c>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	1e59      	subs	r1, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	fbb1 f3f3 	udiv	r3, r1, r3
 8002be2:	1c59      	adds	r1, r3, #1
 8002be4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002be8:	400b      	ands	r3, r1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00a      	beq.n	8002c04 <HAL_I2C_Init+0x138>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	1e59      	subs	r1, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c02:	e051      	b.n	8002ca8 <HAL_I2C_Init+0x1dc>
 8002c04:	2304      	movs	r3, #4
 8002c06:	e04f      	b.n	8002ca8 <HAL_I2C_Init+0x1dc>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d111      	bne.n	8002c34 <HAL_I2C_Init+0x168>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	1e58      	subs	r0, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6859      	ldr	r1, [r3, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	440b      	add	r3, r1
 8002c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c22:	3301      	adds	r3, #1
 8002c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	bf0c      	ite	eq
 8002c2c:	2301      	moveq	r3, #1
 8002c2e:	2300      	movne	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	e012      	b.n	8002c5a <HAL_I2C_Init+0x18e>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	1e58      	subs	r0, r3, #1
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6859      	ldr	r1, [r3, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	0099      	lsls	r1, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	bf0c      	ite	eq
 8002c54:	2301      	moveq	r3, #1
 8002c56:	2300      	movne	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_I2C_Init+0x196>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e022      	b.n	8002ca8 <HAL_I2C_Init+0x1dc>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10e      	bne.n	8002c88 <HAL_I2C_Init+0x1bc>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	1e58      	subs	r0, r3, #1
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6859      	ldr	r1, [r3, #4]
 8002c72:	460b      	mov	r3, r1
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	440b      	add	r3, r1
 8002c78:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c86:	e00f      	b.n	8002ca8 <HAL_I2C_Init+0x1dc>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	1e58      	subs	r0, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6859      	ldr	r1, [r3, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	0099      	lsls	r1, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	6809      	ldr	r1, [r1, #0]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69da      	ldr	r2, [r3, #28]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002cd6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6911      	ldr	r1, [r2, #16]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68d2      	ldr	r2, [r2, #12]
 8002ce2:	4311      	orrs	r1, r2
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6812      	ldr	r2, [r2, #0]
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695a      	ldr	r2, [r3, #20]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0201 	orr.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	000186a0 	.word	0x000186a0
 8002d44:	001e847f 	.word	0x001e847f
 8002d48:	003d08ff 	.word	0x003d08ff
 8002d4c:	431bde83 	.word	0x431bde83
 8002d50:	10624dd3 	.word	0x10624dd3

08002d54 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08c      	sub	sp, #48	@ 0x30
 8002d58:	af02      	add	r7, sp, #8
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	4608      	mov	r0, r1
 8002d5e:	4611      	mov	r1, r2
 8002d60:	461a      	mov	r2, r3
 8002d62:	4603      	mov	r3, r0
 8002d64:	817b      	strh	r3, [r7, #10]
 8002d66:	460b      	mov	r3, r1
 8002d68:	813b      	strh	r3, [r7, #8]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d6e:	f7fe ffef 	bl	8001d50 <HAL_GetTick>
 8002d72:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b20      	cmp	r3, #32
 8002d7e:	f040 8214 	bne.w	80031aa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	2319      	movs	r3, #25
 8002d88:	2201      	movs	r2, #1
 8002d8a:	497b      	ldr	r1, [pc, #492]	@ (8002f78 <HAL_I2C_Mem_Read+0x224>)
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 fafb 	bl	8003388 <I2C_WaitOnFlagUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e207      	b.n	80031ac <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_I2C_Mem_Read+0x56>
 8002da6:	2302      	movs	r3, #2
 8002da8:	e200      	b.n	80031ac <HAL_I2C_Mem_Read+0x458>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d007      	beq.n	8002dd0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2222      	movs	r2, #34	@ 0x22
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2240      	movs	r2, #64	@ 0x40
 8002dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dfa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002e00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4a5b      	ldr	r2, [pc, #364]	@ (8002f7c <HAL_I2C_Mem_Read+0x228>)
 8002e10:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e12:	88f8      	ldrh	r0, [r7, #6]
 8002e14:	893a      	ldrh	r2, [r7, #8]
 8002e16:	8979      	ldrh	r1, [r7, #10]
 8002e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1a:	9301      	str	r3, [sp, #4]
 8002e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	4603      	mov	r3, r0
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 f9c8 	bl	80031b8 <I2C_RequestMemoryRead>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e1bc      	b.n	80031ac <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d113      	bne.n	8002e62 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	623b      	str	r3, [r7, #32]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	623b      	str	r3, [r7, #32]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	623b      	str	r3, [r7, #32]
 8002e4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	e190      	b.n	8003184 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d11b      	bne.n	8002ea2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61fb      	str	r3, [r7, #28]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	61fb      	str	r3, [r7, #28]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	e170      	b.n	8003184 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d11b      	bne.n	8002ee2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eb8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ec8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61bb      	str	r3, [r7, #24]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	61bb      	str	r3, [r7, #24]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	61bb      	str	r3, [r7, #24]
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	e150      	b.n	8003184 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ef8:	e144      	b.n	8003184 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002efe:	2b03      	cmp	r3, #3
 8002f00:	f200 80f1 	bhi.w	80030e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d123      	bne.n	8002f54 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f0e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 fb9b 	bl	800364c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e145      	b.n	80031ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691a      	ldr	r2, [r3, #16]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f32:	1c5a      	adds	r2, r3, #1
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f52:	e117      	b.n	8003184 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d14e      	bne.n	8002ffa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f62:	2200      	movs	r2, #0
 8002f64:	4906      	ldr	r1, [pc, #24]	@ (8002f80 <HAL_I2C_Mem_Read+0x22c>)
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 fa0e 	bl	8003388 <I2C_WaitOnFlagUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d008      	beq.n	8002f84 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e11a      	b.n	80031ac <HAL_I2C_Mem_Read+0x458>
 8002f76:	bf00      	nop
 8002f78:	00100002 	.word	0x00100002
 8002f7c:	ffff0000 	.word	0xffff0000
 8002f80:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691a      	ldr	r2, [r3, #16]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ff8:	e0c4      	b.n	8003184 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003000:	2200      	movs	r2, #0
 8003002:	496c      	ldr	r1, [pc, #432]	@ (80031b4 <HAL_I2C_Mem_Read+0x460>)
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 f9bf 	bl	8003388 <I2C_WaitOnFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0cb      	b.n	80031ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003022:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691a      	ldr	r2, [r3, #16]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003036:	1c5a      	adds	r2, r3, #1
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800304c:	b29b      	uxth	r3, r3
 800304e:	3b01      	subs	r3, #1
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800305c:	2200      	movs	r2, #0
 800305e:	4955      	ldr	r1, [pc, #340]	@ (80031b4 <HAL_I2C_Mem_Read+0x460>)
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 f991 	bl	8003388 <I2C_WaitOnFlagUntilTimeout>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e09d      	b.n	80031ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800307e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003092:	1c5a      	adds	r2, r3, #1
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030da:	b29b      	uxth	r3, r3
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030e4:	e04e      	b.n	8003184 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 faae 	bl	800364c <I2C_WaitOnRXNEFlagUntilTimeout>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e058      	b.n	80031ac <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003116:	3b01      	subs	r3, #1
 8003118:	b29a      	uxth	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	2b04      	cmp	r3, #4
 8003138:	d124      	bne.n	8003184 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800313e:	2b03      	cmp	r3, #3
 8003140:	d107      	bne.n	8003152 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003150:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	691a      	ldr	r2, [r3, #16]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800317a:	b29b      	uxth	r3, r3
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003188:	2b00      	cmp	r3, #0
 800318a:	f47f aeb6 	bne.w	8002efa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2220      	movs	r2, #32
 8003192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	e000      	b.n	80031ac <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80031aa:	2302      	movs	r3, #2
  }
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3728      	adds	r7, #40	@ 0x28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	00010004 	.word	0x00010004

080031b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b088      	sub	sp, #32
 80031bc:	af02      	add	r7, sp, #8
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	4608      	mov	r0, r1
 80031c2:	4611      	mov	r1, r2
 80031c4:	461a      	mov	r2, r3
 80031c6:	4603      	mov	r3, r0
 80031c8:	817b      	strh	r3, [r7, #10]
 80031ca:	460b      	mov	r3, r1
 80031cc:	813b      	strh	r3, [r7, #8]
 80031ce:	4613      	mov	r3, r2
 80031d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80031e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 f8c2 	bl	8003388 <I2C_WaitOnFlagUntilTimeout>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00d      	beq.n	8003226 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003214:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003218:	d103      	bne.n	8003222 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003220:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e0aa      	b.n	800337c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003226:	897b      	ldrh	r3, [r7, #10]
 8003228:	b2db      	uxtb	r3, r3
 800322a:	461a      	mov	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003234:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003238:	6a3a      	ldr	r2, [r7, #32]
 800323a:	4952      	ldr	r1, [pc, #328]	@ (8003384 <I2C_RequestMemoryRead+0x1cc>)
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 f91d 	bl	800347c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e097      	b.n	800337c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003264:	6a39      	ldr	r1, [r7, #32]
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 f9a8 	bl	80035bc <I2C_WaitOnTXEFlagUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00d      	beq.n	800328e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003276:	2b04      	cmp	r3, #4
 8003278:	d107      	bne.n	800328a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003288:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e076      	b.n	800337c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800328e:	88fb      	ldrh	r3, [r7, #6]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d105      	bne.n	80032a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003294:	893b      	ldrh	r3, [r7, #8]
 8003296:	b2da      	uxtb	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	611a      	str	r2, [r3, #16]
 800329e:	e021      	b.n	80032e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032a0:	893b      	ldrh	r3, [r7, #8]
 80032a2:	0a1b      	lsrs	r3, r3, #8
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032b0:	6a39      	ldr	r1, [r7, #32]
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 f982 	bl	80035bc <I2C_WaitOnTXEFlagUntilTimeout>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00d      	beq.n	80032da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d107      	bne.n	80032d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e050      	b.n	800337c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032da:	893b      	ldrh	r3, [r7, #8]
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032e6:	6a39      	ldr	r1, [r7, #32]
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 f967 	bl	80035bc <I2C_WaitOnTXEFlagUntilTimeout>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00d      	beq.n	8003310 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d107      	bne.n	800330c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800330a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e035      	b.n	800337c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800331e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	2200      	movs	r2, #0
 8003328:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f000 f82b 	bl	8003388 <I2C_WaitOnFlagUntilTimeout>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00d      	beq.n	8003354 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003342:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003346:	d103      	bne.n	8003350 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800334e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e013      	b.n	800337c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003354:	897b      	ldrh	r3, [r7, #10]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	f043 0301 	orr.w	r3, r3, #1
 800335c:	b2da      	uxtb	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003366:	6a3a      	ldr	r2, [r7, #32]
 8003368:	4906      	ldr	r1, [pc, #24]	@ (8003384 <I2C_RequestMemoryRead+0x1cc>)
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 f886 	bl	800347c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	00010002 	.word	0x00010002

08003388 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	4613      	mov	r3, r2
 8003396:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003398:	e048      	b.n	800342c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a0:	d044      	beq.n	800342c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033a2:	f7fe fcd5 	bl	8001d50 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d302      	bcc.n	80033b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d139      	bne.n	800342c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	0c1b      	lsrs	r3, r3, #16
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d10d      	bne.n	80033de <I2C_WaitOnFlagUntilTimeout+0x56>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	43da      	mvns	r2, r3
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	4013      	ands	r3, r2
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bf0c      	ite	eq
 80033d4:	2301      	moveq	r3, #1
 80033d6:	2300      	movne	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	461a      	mov	r2, r3
 80033dc:	e00c      	b.n	80033f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	43da      	mvns	r2, r3
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	4013      	ands	r3, r2
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf0c      	ite	eq
 80033f0:	2301      	moveq	r3, #1
 80033f2:	2300      	movne	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	461a      	mov	r2, r3
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d116      	bne.n	800342c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003418:	f043 0220 	orr.w	r2, r3, #32
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e023      	b.n	8003474 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	0c1b      	lsrs	r3, r3, #16
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b01      	cmp	r3, #1
 8003434:	d10d      	bne.n	8003452 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	43da      	mvns	r2, r3
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	4013      	ands	r3, r2
 8003442:	b29b      	uxth	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	bf0c      	ite	eq
 8003448:	2301      	moveq	r3, #1
 800344a:	2300      	movne	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	461a      	mov	r2, r3
 8003450:	e00c      	b.n	800346c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	43da      	mvns	r2, r3
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	4013      	ands	r3, r2
 800345e:	b29b      	uxth	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	bf0c      	ite	eq
 8003464:	2301      	moveq	r3, #1
 8003466:	2300      	movne	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	461a      	mov	r2, r3
 800346c:	79fb      	ldrb	r3, [r7, #7]
 800346e:	429a      	cmp	r2, r3
 8003470:	d093      	beq.n	800339a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
 8003488:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800348a:	e071      	b.n	8003570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003496:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800349a:	d123      	bne.n	80034e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2220      	movs	r2, #32
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d0:	f043 0204 	orr.w	r2, r3, #4
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e067      	b.n	80035b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ea:	d041      	beq.n	8003570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ec:	f7fe fc30 	bl	8001d50 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d302      	bcc.n	8003502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d136      	bne.n	8003570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	0c1b      	lsrs	r3, r3, #16
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b01      	cmp	r3, #1
 800350a:	d10c      	bne.n	8003526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	43da      	mvns	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4013      	ands	r3, r2
 8003518:	b29b      	uxth	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	bf14      	ite	ne
 800351e:	2301      	movne	r3, #1
 8003520:	2300      	moveq	r3, #0
 8003522:	b2db      	uxtb	r3, r3
 8003524:	e00b      	b.n	800353e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	43da      	mvns	r2, r3
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	4013      	ands	r3, r2
 8003532:	b29b      	uxth	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	bf14      	ite	ne
 8003538:	2301      	movne	r3, #1
 800353a:	2300      	moveq	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d016      	beq.n	8003570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2220      	movs	r2, #32
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355c:	f043 0220 	orr.w	r2, r3, #32
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e021      	b.n	80035b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	0c1b      	lsrs	r3, r3, #16
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b01      	cmp	r3, #1
 8003578:	d10c      	bne.n	8003594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	43da      	mvns	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	4013      	ands	r3, r2
 8003586:	b29b      	uxth	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	bf14      	ite	ne
 800358c:	2301      	movne	r3, #1
 800358e:	2300      	moveq	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	e00b      	b.n	80035ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	43da      	mvns	r2, r3
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	4013      	ands	r3, r2
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	bf14      	ite	ne
 80035a6:	2301      	movne	r3, #1
 80035a8:	2300      	moveq	r3, #0
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f47f af6d 	bne.w	800348c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035c8:	e034      	b.n	8003634 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f89b 	bl	8003706 <I2C_IsAcknowledgeFailed>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e034      	b.n	8003644 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e0:	d028      	beq.n	8003634 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e2:	f7fe fbb5 	bl	8001d50 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d302      	bcc.n	80035f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d11d      	bne.n	8003634 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003602:	2b80      	cmp	r3, #128	@ 0x80
 8003604:	d016      	beq.n	8003634 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003620:	f043 0220 	orr.w	r2, r3, #32
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e007      	b.n	8003644 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800363e:	2b80      	cmp	r3, #128	@ 0x80
 8003640:	d1c3      	bne.n	80035ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003658:	e049      	b.n	80036ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	f003 0310 	and.w	r3, r3, #16
 8003664:	2b10      	cmp	r3, #16
 8003666:	d119      	bne.n	800369c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0210 	mvn.w	r2, #16
 8003670:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e030      	b.n	80036fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800369c:	f7fe fb58 	bl	8001d50 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d302      	bcc.n	80036b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d11d      	bne.n	80036ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036bc:	2b40      	cmp	r3, #64	@ 0x40
 80036be:	d016      	beq.n	80036ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036da:	f043 0220 	orr.w	r2, r3, #32
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e007      	b.n	80036fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f8:	2b40      	cmp	r3, #64	@ 0x40
 80036fa:	d1ae      	bne.n	800365a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003718:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800371c:	d11b      	bne.n	8003756 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003726:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2220      	movs	r2, #32
 8003732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003742:	f043 0204 	orr.w	r2, r3, #4
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e267      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d075      	beq.n	800386e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003782:	4b88      	ldr	r3, [pc, #544]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 030c 	and.w	r3, r3, #12
 800378a:	2b04      	cmp	r3, #4
 800378c:	d00c      	beq.n	80037a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800378e:	4b85      	ldr	r3, [pc, #532]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003796:	2b08      	cmp	r3, #8
 8003798:	d112      	bne.n	80037c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800379a:	4b82      	ldr	r3, [pc, #520]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037a6:	d10b      	bne.n	80037c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a8:	4b7e      	ldr	r3, [pc, #504]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d05b      	beq.n	800386c <HAL_RCC_OscConfig+0x108>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d157      	bne.n	800386c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e242      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037c8:	d106      	bne.n	80037d8 <HAL_RCC_OscConfig+0x74>
 80037ca:	4b76      	ldr	r3, [pc, #472]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a75      	ldr	r2, [pc, #468]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	e01d      	b.n	8003814 <HAL_RCC_OscConfig+0xb0>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037e0:	d10c      	bne.n	80037fc <HAL_RCC_OscConfig+0x98>
 80037e2:	4b70      	ldr	r3, [pc, #448]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a6f      	ldr	r2, [pc, #444]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	4b6d      	ldr	r3, [pc, #436]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a6c      	ldr	r2, [pc, #432]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	e00b      	b.n	8003814 <HAL_RCC_OscConfig+0xb0>
 80037fc:	4b69      	ldr	r3, [pc, #420]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a68      	ldr	r2, [pc, #416]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003802:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	4b66      	ldr	r3, [pc, #408]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a65      	ldr	r2, [pc, #404]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 800380e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d013      	beq.n	8003844 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381c:	f7fe fa98 	bl	8001d50 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003824:	f7fe fa94 	bl	8001d50 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b64      	cmp	r3, #100	@ 0x64
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e207      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003836:	4b5b      	ldr	r3, [pc, #364]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0f0      	beq.n	8003824 <HAL_RCC_OscConfig+0xc0>
 8003842:	e014      	b.n	800386e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003844:	f7fe fa84 	bl	8001d50 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800384c:	f7fe fa80 	bl	8001d50 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b64      	cmp	r3, #100	@ 0x64
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e1f3      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800385e:	4b51      	ldr	r3, [pc, #324]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1f0      	bne.n	800384c <HAL_RCC_OscConfig+0xe8>
 800386a:	e000      	b.n	800386e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800386c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d063      	beq.n	8003942 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800387a:	4b4a      	ldr	r3, [pc, #296]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 030c 	and.w	r3, r3, #12
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00b      	beq.n	800389e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003886:	4b47      	ldr	r3, [pc, #284]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800388e:	2b08      	cmp	r3, #8
 8003890:	d11c      	bne.n	80038cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003892:	4b44      	ldr	r3, [pc, #272]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d116      	bne.n	80038cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800389e:	4b41      	ldr	r3, [pc, #260]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d005      	beq.n	80038b6 <HAL_RCC_OscConfig+0x152>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d001      	beq.n	80038b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e1c7      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b6:	4b3b      	ldr	r3, [pc, #236]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	4937      	ldr	r1, [pc, #220]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ca:	e03a      	b.n	8003942 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d020      	beq.n	8003916 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038d4:	4b34      	ldr	r3, [pc, #208]	@ (80039a8 <HAL_RCC_OscConfig+0x244>)
 80038d6:	2201      	movs	r2, #1
 80038d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038da:	f7fe fa39 	bl	8001d50 <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038e2:	f7fe fa35 	bl	8001d50 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e1a8      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f4:	4b2b      	ldr	r3, [pc, #172]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f0      	beq.n	80038e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003900:	4b28      	ldr	r3, [pc, #160]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4925      	ldr	r1, [pc, #148]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003910:	4313      	orrs	r3, r2
 8003912:	600b      	str	r3, [r1, #0]
 8003914:	e015      	b.n	8003942 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003916:	4b24      	ldr	r3, [pc, #144]	@ (80039a8 <HAL_RCC_OscConfig+0x244>)
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391c:	f7fe fa18 	bl	8001d50 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003924:	f7fe fa14 	bl	8001d50 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e187      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003936:	4b1b      	ldr	r3, [pc, #108]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f0      	bne.n	8003924 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b00      	cmp	r3, #0
 800394c:	d036      	beq.n	80039bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d016      	beq.n	8003984 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003956:	4b15      	ldr	r3, [pc, #84]	@ (80039ac <HAL_RCC_OscConfig+0x248>)
 8003958:	2201      	movs	r2, #1
 800395a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395c:	f7fe f9f8 	bl	8001d50 <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003964:	f7fe f9f4 	bl	8001d50 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e167      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003976:	4b0b      	ldr	r3, [pc, #44]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003978:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0f0      	beq.n	8003964 <HAL_RCC_OscConfig+0x200>
 8003982:	e01b      	b.n	80039bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003984:	4b09      	ldr	r3, [pc, #36]	@ (80039ac <HAL_RCC_OscConfig+0x248>)
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800398a:	f7fe f9e1 	bl	8001d50 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003990:	e00e      	b.n	80039b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003992:	f7fe f9dd 	bl	8001d50 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d907      	bls.n	80039b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e150      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
 80039a4:	40023800 	.word	0x40023800
 80039a8:	42470000 	.word	0x42470000
 80039ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b0:	4b88      	ldr	r3, [pc, #544]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 80039b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1ea      	bne.n	8003992 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 8097 	beq.w	8003af8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ca:	2300      	movs	r3, #0
 80039cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ce:	4b81      	ldr	r3, [pc, #516]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 80039d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10f      	bne.n	80039fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039da:	2300      	movs	r3, #0
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	4b7d      	ldr	r3, [pc, #500]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e2:	4a7c      	ldr	r2, [pc, #496]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 80039e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80039ea:	4b7a      	ldr	r3, [pc, #488]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f2:	60bb      	str	r3, [r7, #8]
 80039f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f6:	2301      	movs	r3, #1
 80039f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fa:	4b77      	ldr	r3, [pc, #476]	@ (8003bd8 <HAL_RCC_OscConfig+0x474>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d118      	bne.n	8003a38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a06:	4b74      	ldr	r3, [pc, #464]	@ (8003bd8 <HAL_RCC_OscConfig+0x474>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a73      	ldr	r2, [pc, #460]	@ (8003bd8 <HAL_RCC_OscConfig+0x474>)
 8003a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a12:	f7fe f99d 	bl	8001d50 <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1a:	f7fe f999 	bl	8001d50 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e10c      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2c:	4b6a      	ldr	r3, [pc, #424]	@ (8003bd8 <HAL_RCC_OscConfig+0x474>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0f0      	beq.n	8003a1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d106      	bne.n	8003a4e <HAL_RCC_OscConfig+0x2ea>
 8003a40:	4b64      	ldr	r3, [pc, #400]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a44:	4a63      	ldr	r2, [pc, #396]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a4c:	e01c      	b.n	8003a88 <HAL_RCC_OscConfig+0x324>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	2b05      	cmp	r3, #5
 8003a54:	d10c      	bne.n	8003a70 <HAL_RCC_OscConfig+0x30c>
 8003a56:	4b5f      	ldr	r3, [pc, #380]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5a:	4a5e      	ldr	r2, [pc, #376]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a5c:	f043 0304 	orr.w	r3, r3, #4
 8003a60:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a62:	4b5c      	ldr	r3, [pc, #368]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a66:	4a5b      	ldr	r2, [pc, #364]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a68:	f043 0301 	orr.w	r3, r3, #1
 8003a6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a6e:	e00b      	b.n	8003a88 <HAL_RCC_OscConfig+0x324>
 8003a70:	4b58      	ldr	r3, [pc, #352]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a74:	4a57      	ldr	r2, [pc, #348]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a76:	f023 0301 	bic.w	r3, r3, #1
 8003a7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a7c:	4b55      	ldr	r3, [pc, #340]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a80:	4a54      	ldr	r2, [pc, #336]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a82:	f023 0304 	bic.w	r3, r3, #4
 8003a86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d015      	beq.n	8003abc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a90:	f7fe f95e 	bl	8001d50 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a96:	e00a      	b.n	8003aae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a98:	f7fe f95a 	bl	8001d50 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e0cb      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aae:	4b49      	ldr	r3, [pc, #292]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0ee      	beq.n	8003a98 <HAL_RCC_OscConfig+0x334>
 8003aba:	e014      	b.n	8003ae6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003abc:	f7fe f948 	bl	8001d50 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac2:	e00a      	b.n	8003ada <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac4:	f7fe f944 	bl	8001d50 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e0b5      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ada:	4b3e      	ldr	r3, [pc, #248]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1ee      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ae6:	7dfb      	ldrb	r3, [r7, #23]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d105      	bne.n	8003af8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aec:	4b39      	ldr	r3, [pc, #228]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af0:	4a38      	ldr	r2, [pc, #224]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003af2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003af6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 80a1 	beq.w	8003c44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b02:	4b34      	ldr	r3, [pc, #208]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d05c      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d141      	bne.n	8003b9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b16:	4b31      	ldr	r3, [pc, #196]	@ (8003bdc <HAL_RCC_OscConfig+0x478>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1c:	f7fe f918 	bl	8001d50 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b24:	f7fe f914 	bl	8001d50 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e087      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b36:	4b27      	ldr	r3, [pc, #156]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f0      	bne.n	8003b24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69da      	ldr	r2, [r3, #28]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b50:	019b      	lsls	r3, r3, #6
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b58:	085b      	lsrs	r3, r3, #1
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	041b      	lsls	r3, r3, #16
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b64:	061b      	lsls	r3, r3, #24
 8003b66:	491b      	ldr	r1, [pc, #108]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bdc <HAL_RCC_OscConfig+0x478>)
 8003b6e:	2201      	movs	r2, #1
 8003b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b72:	f7fe f8ed 	bl	8001d50 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b7a:	f7fe f8e9 	bl	8001d50 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e05c      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b8c:	4b11      	ldr	r3, [pc, #68]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0f0      	beq.n	8003b7a <HAL_RCC_OscConfig+0x416>
 8003b98:	e054      	b.n	8003c44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b9a:	4b10      	ldr	r3, [pc, #64]	@ (8003bdc <HAL_RCC_OscConfig+0x478>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba0:	f7fe f8d6 	bl	8001d50 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba8:	f7fe f8d2 	bl	8001d50 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e045      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bba:	4b06      	ldr	r3, [pc, #24]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f0      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x444>
 8003bc6:	e03d      	b.n	8003c44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d107      	bne.n	8003be0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e038      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	40007000 	.word	0x40007000
 8003bdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003be0:	4b1b      	ldr	r3, [pc, #108]	@ (8003c50 <HAL_RCC_OscConfig+0x4ec>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d028      	beq.n	8003c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d121      	bne.n	8003c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d11a      	bne.n	8003c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c10:	4013      	ands	r3, r2
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d111      	bne.n	8003c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c26:	085b      	lsrs	r3, r3, #1
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d107      	bne.n	8003c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40023800 	.word	0x40023800

08003c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0cc      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c68:	4b68      	ldr	r3, [pc, #416]	@ (8003e0c <HAL_RCC_ClockConfig+0x1b8>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d90c      	bls.n	8003c90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c76:	4b65      	ldr	r3, [pc, #404]	@ (8003e0c <HAL_RCC_ClockConfig+0x1b8>)
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c7e:	4b63      	ldr	r3, [pc, #396]	@ (8003e0c <HAL_RCC_ClockConfig+0x1b8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d001      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e0b8      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d020      	beq.n	8003cde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ca8:	4b59      	ldr	r3, [pc, #356]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	4a58      	ldr	r2, [pc, #352]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d005      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cc0:	4b53      	ldr	r3, [pc, #332]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	4a52      	ldr	r2, [pc, #328]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003cca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ccc:	4b50      	ldr	r3, [pc, #320]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	494d      	ldr	r1, [pc, #308]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d044      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d107      	bne.n	8003d02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf2:	4b47      	ldr	r3, [pc, #284]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d119      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e07f      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d003      	beq.n	8003d12 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d0e:	2b03      	cmp	r3, #3
 8003d10:	d107      	bne.n	8003d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d12:	4b3f      	ldr	r3, [pc, #252]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d109      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e06f      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d22:	4b3b      	ldr	r3, [pc, #236]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e067      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d32:	4b37      	ldr	r3, [pc, #220]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f023 0203 	bic.w	r2, r3, #3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	4934      	ldr	r1, [pc, #208]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d44:	f7fe f804 	bl	8001d50 <HAL_GetTick>
 8003d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4a:	e00a      	b.n	8003d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d4c:	f7fe f800 	bl	8001d50 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e04f      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d62:	4b2b      	ldr	r3, [pc, #172]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 020c 	and.w	r2, r3, #12
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d1eb      	bne.n	8003d4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d74:	4b25      	ldr	r3, [pc, #148]	@ (8003e0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d20c      	bcs.n	8003d9c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d82:	4b22      	ldr	r3, [pc, #136]	@ (8003e0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8a:	4b20      	ldr	r3, [pc, #128]	@ (8003e0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e032      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d008      	beq.n	8003dba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003da8:	4b19      	ldr	r3, [pc, #100]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	4916      	ldr	r1, [pc, #88]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d009      	beq.n	8003dda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dc6:	4b12      	ldr	r3, [pc, #72]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	490e      	ldr	r1, [pc, #56]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dda:	f000 f821 	bl	8003e20 <HAL_RCC_GetSysClockFreq>
 8003dde:	4602      	mov	r2, r0
 8003de0:	4b0b      	ldr	r3, [pc, #44]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	091b      	lsrs	r3, r3, #4
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	490a      	ldr	r1, [pc, #40]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c0>)
 8003dec:	5ccb      	ldrb	r3, [r1, r3]
 8003dee:	fa22 f303 	lsr.w	r3, r2, r3
 8003df2:	4a09      	ldr	r2, [pc, #36]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003df6:	4b09      	ldr	r3, [pc, #36]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fd ff64 	bl	8001cc8 <HAL_InitTick>

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40023c00 	.word	0x40023c00
 8003e10:	40023800 	.word	0x40023800
 8003e14:	080064b8 	.word	0x080064b8
 8003e18:	20000000 	.word	0x20000000
 8003e1c:	20000004 	.word	0x20000004

08003e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e24:	b094      	sub	sp, #80	@ 0x50
 8003e26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e38:	4b79      	ldr	r3, [pc, #484]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f003 030c 	and.w	r3, r3, #12
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d00d      	beq.n	8003e60 <HAL_RCC_GetSysClockFreq+0x40>
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	f200 80e1 	bhi.w	800400c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <HAL_RCC_GetSysClockFreq+0x34>
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d003      	beq.n	8003e5a <HAL_RCC_GetSysClockFreq+0x3a>
 8003e52:	e0db      	b.n	800400c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e54:	4b73      	ldr	r3, [pc, #460]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e58:	e0db      	b.n	8004012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e5a:	4b73      	ldr	r3, [pc, #460]	@ (8004028 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e5e:	e0d8      	b.n	8004012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e60:	4b6f      	ldr	r3, [pc, #444]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e68:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e6a:	4b6d      	ldr	r3, [pc, #436]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d063      	beq.n	8003f3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e76:	4b6a      	ldr	r3, [pc, #424]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	099b      	lsrs	r3, r3, #6
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e80:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e88:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e92:	4622      	mov	r2, r4
 8003e94:	462b      	mov	r3, r5
 8003e96:	f04f 0000 	mov.w	r0, #0
 8003e9a:	f04f 0100 	mov.w	r1, #0
 8003e9e:	0159      	lsls	r1, r3, #5
 8003ea0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ea4:	0150      	lsls	r0, r2, #5
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4621      	mov	r1, r4
 8003eac:	1a51      	subs	r1, r2, r1
 8003eae:	6139      	str	r1, [r7, #16]
 8003eb0:	4629      	mov	r1, r5
 8003eb2:	eb63 0301 	sbc.w	r3, r3, r1
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ec4:	4659      	mov	r1, fp
 8003ec6:	018b      	lsls	r3, r1, #6
 8003ec8:	4651      	mov	r1, sl
 8003eca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ece:	4651      	mov	r1, sl
 8003ed0:	018a      	lsls	r2, r1, #6
 8003ed2:	4651      	mov	r1, sl
 8003ed4:	ebb2 0801 	subs.w	r8, r2, r1
 8003ed8:	4659      	mov	r1, fp
 8003eda:	eb63 0901 	sbc.w	r9, r3, r1
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ef2:	4690      	mov	r8, r2
 8003ef4:	4699      	mov	r9, r3
 8003ef6:	4623      	mov	r3, r4
 8003ef8:	eb18 0303 	adds.w	r3, r8, r3
 8003efc:	60bb      	str	r3, [r7, #8]
 8003efe:	462b      	mov	r3, r5
 8003f00:	eb49 0303 	adc.w	r3, r9, r3
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f12:	4629      	mov	r1, r5
 8003f14:	024b      	lsls	r3, r1, #9
 8003f16:	4621      	mov	r1, r4
 8003f18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f1c:	4621      	mov	r1, r4
 8003f1e:	024a      	lsls	r2, r1, #9
 8003f20:	4610      	mov	r0, r2
 8003f22:	4619      	mov	r1, r3
 8003f24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f26:	2200      	movs	r2, #0
 8003f28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f30:	f7fc fdcc 	bl	8000acc <__aeabi_uldivmod>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4613      	mov	r3, r2
 8003f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f3c:	e058      	b.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f3e:	4b38      	ldr	r3, [pc, #224]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	099b      	lsrs	r3, r3, #6
 8003f44:	2200      	movs	r2, #0
 8003f46:	4618      	mov	r0, r3
 8003f48:	4611      	mov	r1, r2
 8003f4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f4e:	623b      	str	r3, [r7, #32]
 8003f50:	2300      	movs	r3, #0
 8003f52:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f58:	4642      	mov	r2, r8
 8003f5a:	464b      	mov	r3, r9
 8003f5c:	f04f 0000 	mov.w	r0, #0
 8003f60:	f04f 0100 	mov.w	r1, #0
 8003f64:	0159      	lsls	r1, r3, #5
 8003f66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f6a:	0150      	lsls	r0, r2, #5
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4641      	mov	r1, r8
 8003f72:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f76:	4649      	mov	r1, r9
 8003f78:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f90:	ebb2 040a 	subs.w	r4, r2, sl
 8003f94:	eb63 050b 	sbc.w	r5, r3, fp
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	f04f 0300 	mov.w	r3, #0
 8003fa0:	00eb      	lsls	r3, r5, #3
 8003fa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fa6:	00e2      	lsls	r2, r4, #3
 8003fa8:	4614      	mov	r4, r2
 8003faa:	461d      	mov	r5, r3
 8003fac:	4643      	mov	r3, r8
 8003fae:	18e3      	adds	r3, r4, r3
 8003fb0:	603b      	str	r3, [r7, #0]
 8003fb2:	464b      	mov	r3, r9
 8003fb4:	eb45 0303 	adc.w	r3, r5, r3
 8003fb8:	607b      	str	r3, [r7, #4]
 8003fba:	f04f 0200 	mov.w	r2, #0
 8003fbe:	f04f 0300 	mov.w	r3, #0
 8003fc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fc6:	4629      	mov	r1, r5
 8003fc8:	028b      	lsls	r3, r1, #10
 8003fca:	4621      	mov	r1, r4
 8003fcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fd0:	4621      	mov	r1, r4
 8003fd2:	028a      	lsls	r2, r1, #10
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fda:	2200      	movs	r2, #0
 8003fdc:	61bb      	str	r3, [r7, #24]
 8003fde:	61fa      	str	r2, [r7, #28]
 8003fe0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fe4:	f7fc fd72 	bl	8000acc <__aeabi_uldivmod>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4613      	mov	r3, r2
 8003fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	0c1b      	lsrs	r3, r3, #16
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004000:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004002:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004004:	fbb2 f3f3 	udiv	r3, r2, r3
 8004008:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800400a:	e002      	b.n	8004012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800400c:	4b05      	ldr	r3, [pc, #20]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x204>)
 800400e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004012:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004014:	4618      	mov	r0, r3
 8004016:	3750      	adds	r7, #80	@ 0x50
 8004018:	46bd      	mov	sp, r7
 800401a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800401e:	bf00      	nop
 8004020:	40023800 	.word	0x40023800
 8004024:	00f42400 	.word	0x00f42400
 8004028:	007a1200 	.word	0x007a1200

0800402c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004030:	4b03      	ldr	r3, [pc, #12]	@ (8004040 <HAL_RCC_GetHCLKFreq+0x14>)
 8004032:	681b      	ldr	r3, [r3, #0]
}
 8004034:	4618      	mov	r0, r3
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	20000000 	.word	0x20000000

08004044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004048:	f7ff fff0 	bl	800402c <HAL_RCC_GetHCLKFreq>
 800404c:	4602      	mov	r2, r0
 800404e:	4b05      	ldr	r3, [pc, #20]	@ (8004064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	0a9b      	lsrs	r3, r3, #10
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	4903      	ldr	r1, [pc, #12]	@ (8004068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800405a:	5ccb      	ldrb	r3, [r1, r3]
 800405c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004060:	4618      	mov	r0, r3
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40023800 	.word	0x40023800
 8004068:	080064c8 	.word	0x080064c8

0800406c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004070:	f7ff ffdc 	bl	800402c <HAL_RCC_GetHCLKFreq>
 8004074:	4602      	mov	r2, r0
 8004076:	4b05      	ldr	r3, [pc, #20]	@ (800408c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	0b5b      	lsrs	r3, r3, #13
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	4903      	ldr	r1, [pc, #12]	@ (8004090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004082:	5ccb      	ldrb	r3, [r1, r3]
 8004084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004088:	4618      	mov	r0, r3
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40023800 	.word	0x40023800
 8004090:	080064c8 	.word	0x080064c8

08004094 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e07b      	b.n	800419e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d108      	bne.n	80040c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040b6:	d009      	beq.n	80040cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	61da      	str	r2, [r3, #28]
 80040be:	e005      	b.n	80040cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d106      	bne.n	80040ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7fc ff8c 	bl	8001004 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004102:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004114:	431a      	orrs	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	431a      	orrs	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800413c:	431a      	orrs	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004150:	ea42 0103 	orr.w	r1, r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004158:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	0c1b      	lsrs	r3, r3, #16
 800416a:	f003 0104 	and.w	r1, r3, #4
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004172:	f003 0210 	and.w	r2, r3, #16
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69da      	ldr	r2, [r3, #28]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800418c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b08a      	sub	sp, #40	@ 0x28
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	60f8      	str	r0, [r7, #12]
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	607a      	str	r2, [r7, #4]
 80041b2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80041b4:	2301      	movs	r3, #1
 80041b6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041b8:	f7fd fdca 	bl	8001d50 <HAL_GetTick>
 80041bc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041c4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80041cc:	887b      	ldrh	r3, [r7, #2]
 80041ce:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041d0:	7ffb      	ldrb	r3, [r7, #31]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d00c      	beq.n	80041f0 <HAL_SPI_TransmitReceive+0x4a>
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041dc:	d106      	bne.n	80041ec <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d102      	bne.n	80041ec <HAL_SPI_TransmitReceive+0x46>
 80041e6:	7ffb      	ldrb	r3, [r7, #31]
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d001      	beq.n	80041f0 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80041ec:	2302      	movs	r3, #2
 80041ee:	e17f      	b.n	80044f0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d005      	beq.n	8004202 <HAL_SPI_TransmitReceive+0x5c>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <HAL_SPI_TransmitReceive+0x5c>
 80041fc:	887b      	ldrh	r3, [r7, #2]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e174      	b.n	80044f0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800420c:	2b01      	cmp	r3, #1
 800420e:	d101      	bne.n	8004214 <HAL_SPI_TransmitReceive+0x6e>
 8004210:	2302      	movs	r3, #2
 8004212:	e16d      	b.n	80044f0 <HAL_SPI_TransmitReceive+0x34a>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b04      	cmp	r3, #4
 8004226:	d003      	beq.n	8004230 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2205      	movs	r2, #5
 800422c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	887a      	ldrh	r2, [r7, #2]
 8004240:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	887a      	ldrh	r2, [r7, #2]
 8004246:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	887a      	ldrh	r2, [r7, #2]
 8004252:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	887a      	ldrh	r2, [r7, #2]
 8004258:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004270:	2b40      	cmp	r3, #64	@ 0x40
 8004272:	d007      	beq.n	8004284 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004282:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800428c:	d17e      	bne.n	800438c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d002      	beq.n	800429c <HAL_SPI_TransmitReceive+0xf6>
 8004296:	8afb      	ldrh	r3, [r7, #22]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d16c      	bne.n	8004376 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a0:	881a      	ldrh	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ac:	1c9a      	adds	r2, r3, #2
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042c0:	e059      	b.n	8004376 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d11b      	bne.n	8004308 <HAL_SPI_TransmitReceive+0x162>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d016      	beq.n	8004308 <HAL_SPI_TransmitReceive+0x162>
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d113      	bne.n	8004308 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e4:	881a      	ldrh	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f0:	1c9a      	adds	r2, r3, #2
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b01      	cmp	r3, #1
 8004314:	d119      	bne.n	800434a <HAL_SPI_TransmitReceive+0x1a4>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d014      	beq.n	800434a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800432a:	b292      	uxth	r2, r2
 800432c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004332:	1c9a      	adds	r2, r3, #2
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800433c:	b29b      	uxth	r3, r3
 800433e:	3b01      	subs	r3, #1
 8004340:	b29a      	uxth	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004346:	2301      	movs	r3, #1
 8004348:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800434a:	f7fd fd01 	bl	8001d50 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004356:	429a      	cmp	r2, r3
 8004358:	d80d      	bhi.n	8004376 <HAL_SPI_TransmitReceive+0x1d0>
 800435a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800435c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004360:	d009      	beq.n	8004376 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e0bc      	b.n	80044f0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800437a:	b29b      	uxth	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1a0      	bne.n	80042c2 <HAL_SPI_TransmitReceive+0x11c>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004384:	b29b      	uxth	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d19b      	bne.n	80042c2 <HAL_SPI_TransmitReceive+0x11c>
 800438a:	e082      	b.n	8004492 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d002      	beq.n	800439a <HAL_SPI_TransmitReceive+0x1f4>
 8004394:	8afb      	ldrh	r3, [r7, #22]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d171      	bne.n	800447e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	330c      	adds	r3, #12
 80043a4:	7812      	ldrb	r2, [r2, #0]
 80043a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043c0:	e05d      	b.n	800447e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d11c      	bne.n	800440a <HAL_SPI_TransmitReceive+0x264>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d017      	beq.n	800440a <HAL_SPI_TransmitReceive+0x264>
 80043da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d114      	bne.n	800440a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	330c      	adds	r3, #12
 80043ea:	7812      	ldrb	r2, [r2, #0]
 80043ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f2:	1c5a      	adds	r2, r3, #1
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	3b01      	subs	r3, #1
 8004400:	b29a      	uxth	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004406:	2300      	movs	r3, #0
 8004408:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b01      	cmp	r3, #1
 8004416:	d119      	bne.n	800444c <HAL_SPI_TransmitReceive+0x2a6>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800441c:	b29b      	uxth	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d014      	beq.n	800444c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004448:	2301      	movs	r3, #1
 800444a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800444c:	f7fd fc80 	bl	8001d50 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004458:	429a      	cmp	r2, r3
 800445a:	d803      	bhi.n	8004464 <HAL_SPI_TransmitReceive+0x2be>
 800445c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004462:	d102      	bne.n	800446a <HAL_SPI_TransmitReceive+0x2c4>
 8004464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004466:	2b00      	cmp	r3, #0
 8004468:	d109      	bne.n	800447e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e038      	b.n	80044f0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004482:	b29b      	uxth	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	d19c      	bne.n	80043c2 <HAL_SPI_TransmitReceive+0x21c>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d197      	bne.n	80043c2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004492:	6a3a      	ldr	r2, [r7, #32]
 8004494:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f000 f8b6 	bl	8004608 <SPI_EndRxTxTransaction>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d008      	beq.n	80044b4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2220      	movs	r2, #32
 80044a6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e01d      	b.n	80044f0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10a      	bne.n	80044d2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044bc:	2300      	movs	r3, #0
 80044be:	613b      	str	r3, [r7, #16]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	613b      	str	r3, [r7, #16]
 80044d0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80044ee:	2300      	movs	r3, #0
  }
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3728      	adds	r7, #40	@ 0x28
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b088      	sub	sp, #32
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	603b      	str	r3, [r7, #0]
 8004504:	4613      	mov	r3, r2
 8004506:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004508:	f7fd fc22 	bl	8001d50 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004510:	1a9b      	subs	r3, r3, r2
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	4413      	add	r3, r2
 8004516:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004518:	f7fd fc1a 	bl	8001d50 <HAL_GetTick>
 800451c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800451e:	4b39      	ldr	r3, [pc, #228]	@ (8004604 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	015b      	lsls	r3, r3, #5
 8004524:	0d1b      	lsrs	r3, r3, #20
 8004526:	69fa      	ldr	r2, [r7, #28]
 8004528:	fb02 f303 	mul.w	r3, r2, r3
 800452c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800452e:	e055      	b.n	80045dc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004536:	d051      	beq.n	80045dc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004538:	f7fd fc0a 	bl	8001d50 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	69fa      	ldr	r2, [r7, #28]
 8004544:	429a      	cmp	r2, r3
 8004546:	d902      	bls.n	800454e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d13d      	bne.n	80045ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800455c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004566:	d111      	bne.n	800458c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004570:	d004      	beq.n	800457c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800457a:	d107      	bne.n	800458c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800458a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004590:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004594:	d10f      	bne.n	80045b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e018      	b.n	80045fc <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d102      	bne.n	80045d6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	61fb      	str	r3, [r7, #28]
 80045d4:	e002      	b.n	80045dc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	3b01      	subs	r3, #1
 80045da:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689a      	ldr	r2, [r3, #8]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	4013      	ands	r3, r2
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	bf0c      	ite	eq
 80045ec:	2301      	moveq	r3, #1
 80045ee:	2300      	movne	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	461a      	mov	r2, r3
 80045f4:	79fb      	ldrb	r3, [r7, #7]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d19a      	bne.n	8004530 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3720      	adds	r7, #32
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	20000000 	.word	0x20000000

08004608 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b088      	sub	sp, #32
 800460c:	af02      	add	r7, sp, #8
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2201      	movs	r2, #1
 800461c:	2102      	movs	r1, #2
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f7ff ff6a 	bl	80044f8 <SPI_WaitFlagStateUntilTimeout>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d007      	beq.n	800463a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800462e:	f043 0220 	orr.w	r2, r3, #32
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e032      	b.n	80046a0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800463a:	4b1b      	ldr	r3, [pc, #108]	@ (80046a8 <SPI_EndRxTxTransaction+0xa0>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a1b      	ldr	r2, [pc, #108]	@ (80046ac <SPI_EndRxTxTransaction+0xa4>)
 8004640:	fba2 2303 	umull	r2, r3, r2, r3
 8004644:	0d5b      	lsrs	r3, r3, #21
 8004646:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800464a:	fb02 f303 	mul.w	r3, r2, r3
 800464e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004658:	d112      	bne.n	8004680 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2200      	movs	r2, #0
 8004662:	2180      	movs	r1, #128	@ 0x80
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f7ff ff47 	bl	80044f8 <SPI_WaitFlagStateUntilTimeout>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d016      	beq.n	800469e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004674:	f043 0220 	orr.w	r2, r3, #32
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e00f      	b.n	80046a0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	3b01      	subs	r3, #1
 800468a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004696:	2b80      	cmp	r3, #128	@ 0x80
 8004698:	d0f2      	beq.n	8004680 <SPI_EndRxTxTransaction+0x78>
 800469a:	e000      	b.n	800469e <SPI_EndRxTxTransaction+0x96>
        break;
 800469c:	bf00      	nop
  }

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	20000000 	.word	0x20000000
 80046ac:	165e9f81 	.word	0x165e9f81

080046b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e041      	b.n	8004746 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d106      	bne.n	80046dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7fc fcfc 	bl	80010d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3304      	adds	r3, #4
 80046ec:	4619      	mov	r1, r3
 80046ee:	4610      	mov	r0, r2
 80046f0:	f000 fa04 	bl	8004afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
	...

08004750 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d109      	bne.n	8004774 <HAL_TIM_PWM_Start+0x24>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b01      	cmp	r3, #1
 800476a:	bf14      	ite	ne
 800476c:	2301      	movne	r3, #1
 800476e:	2300      	moveq	r3, #0
 8004770:	b2db      	uxtb	r3, r3
 8004772:	e022      	b.n	80047ba <HAL_TIM_PWM_Start+0x6a>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	2b04      	cmp	r3, #4
 8004778:	d109      	bne.n	800478e <HAL_TIM_PWM_Start+0x3e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b01      	cmp	r3, #1
 8004784:	bf14      	ite	ne
 8004786:	2301      	movne	r3, #1
 8004788:	2300      	moveq	r3, #0
 800478a:	b2db      	uxtb	r3, r3
 800478c:	e015      	b.n	80047ba <HAL_TIM_PWM_Start+0x6a>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b08      	cmp	r3, #8
 8004792:	d109      	bne.n	80047a8 <HAL_TIM_PWM_Start+0x58>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b01      	cmp	r3, #1
 800479e:	bf14      	ite	ne
 80047a0:	2301      	movne	r3, #1
 80047a2:	2300      	moveq	r3, #0
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	e008      	b.n	80047ba <HAL_TIM_PWM_Start+0x6a>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	bf14      	ite	ne
 80047b4:	2301      	movne	r3, #1
 80047b6:	2300      	moveq	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e068      	b.n	8004894 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d104      	bne.n	80047d2 <HAL_TIM_PWM_Start+0x82>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2202      	movs	r2, #2
 80047cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047d0:	e013      	b.n	80047fa <HAL_TIM_PWM_Start+0xaa>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b04      	cmp	r3, #4
 80047d6:	d104      	bne.n	80047e2 <HAL_TIM_PWM_Start+0x92>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047e0:	e00b      	b.n	80047fa <HAL_TIM_PWM_Start+0xaa>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d104      	bne.n	80047f2 <HAL_TIM_PWM_Start+0xa2>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047f0:	e003      	b.n	80047fa <HAL_TIM_PWM_Start+0xaa>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2202      	movs	r2, #2
 80047f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2201      	movs	r2, #1
 8004800:	6839      	ldr	r1, [r7, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f000 fb8c 	bl	8004f20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a23      	ldr	r2, [pc, #140]	@ (800489c <HAL_TIM_PWM_Start+0x14c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d107      	bne.n	8004822 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004820:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a1d      	ldr	r2, [pc, #116]	@ (800489c <HAL_TIM_PWM_Start+0x14c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d018      	beq.n	800485e <HAL_TIM_PWM_Start+0x10e>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004834:	d013      	beq.n	800485e <HAL_TIM_PWM_Start+0x10e>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a19      	ldr	r2, [pc, #100]	@ (80048a0 <HAL_TIM_PWM_Start+0x150>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00e      	beq.n	800485e <HAL_TIM_PWM_Start+0x10e>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a17      	ldr	r2, [pc, #92]	@ (80048a4 <HAL_TIM_PWM_Start+0x154>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d009      	beq.n	800485e <HAL_TIM_PWM_Start+0x10e>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a16      	ldr	r2, [pc, #88]	@ (80048a8 <HAL_TIM_PWM_Start+0x158>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d004      	beq.n	800485e <HAL_TIM_PWM_Start+0x10e>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a14      	ldr	r2, [pc, #80]	@ (80048ac <HAL_TIM_PWM_Start+0x15c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d111      	bne.n	8004882 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2b06      	cmp	r3, #6
 800486e:	d010      	beq.n	8004892 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0201 	orr.w	r2, r2, #1
 800487e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004880:	e007      	b.n	8004892 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f042 0201 	orr.w	r2, r2, #1
 8004890:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	40010000 	.word	0x40010000
 80048a0:	40000400 	.word	0x40000400
 80048a4:	40000800 	.word	0x40000800
 80048a8:	40000c00 	.word	0x40000c00
 80048ac:	40014000 	.word	0x40014000

080048b0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2200      	movs	r2, #0
 80048c0:	6839      	ldr	r1, [r7, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 fb2c 	bl	8004f20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a29      	ldr	r2, [pc, #164]	@ (8004974 <HAL_TIM_PWM_Stop+0xc4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d117      	bne.n	8004902 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6a1a      	ldr	r2, [r3, #32]
 80048d8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80048dc:	4013      	ands	r3, r2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10f      	bne.n	8004902 <HAL_TIM_PWM_Stop+0x52>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6a1a      	ldr	r2, [r3, #32]
 80048e8:	f240 4344 	movw	r3, #1092	@ 0x444
 80048ec:	4013      	ands	r3, r2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d107      	bne.n	8004902 <HAL_TIM_PWM_Stop+0x52>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004900:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6a1a      	ldr	r2, [r3, #32]
 8004908:	f241 1311 	movw	r3, #4369	@ 0x1111
 800490c:	4013      	ands	r3, r2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10f      	bne.n	8004932 <HAL_TIM_PWM_Stop+0x82>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6a1a      	ldr	r2, [r3, #32]
 8004918:	f240 4344 	movw	r3, #1092	@ 0x444
 800491c:	4013      	ands	r3, r2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d107      	bne.n	8004932 <HAL_TIM_PWM_Stop+0x82>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0201 	bic.w	r2, r2, #1
 8004930:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d104      	bne.n	8004942 <HAL_TIM_PWM_Stop+0x92>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004940:	e013      	b.n	800496a <HAL_TIM_PWM_Stop+0xba>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b04      	cmp	r3, #4
 8004946:	d104      	bne.n	8004952 <HAL_TIM_PWM_Stop+0xa2>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004950:	e00b      	b.n	800496a <HAL_TIM_PWM_Stop+0xba>
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b08      	cmp	r3, #8
 8004956:	d104      	bne.n	8004962 <HAL_TIM_PWM_Stop+0xb2>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004960:	e003      	b.n	800496a <HAL_TIM_PWM_Stop+0xba>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40010000 	.word	0x40010000

08004978 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004984:	2300      	movs	r3, #0
 8004986:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800498e:	2b01      	cmp	r3, #1
 8004990:	d101      	bne.n	8004996 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004992:	2302      	movs	r3, #2
 8004994:	e0ae      	b.n	8004af4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b0c      	cmp	r3, #12
 80049a2:	f200 809f 	bhi.w	8004ae4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80049a6:	a201      	add	r2, pc, #4	@ (adr r2, 80049ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ac:	080049e1 	.word	0x080049e1
 80049b0:	08004ae5 	.word	0x08004ae5
 80049b4:	08004ae5 	.word	0x08004ae5
 80049b8:	08004ae5 	.word	0x08004ae5
 80049bc:	08004a21 	.word	0x08004a21
 80049c0:	08004ae5 	.word	0x08004ae5
 80049c4:	08004ae5 	.word	0x08004ae5
 80049c8:	08004ae5 	.word	0x08004ae5
 80049cc:	08004a63 	.word	0x08004a63
 80049d0:	08004ae5 	.word	0x08004ae5
 80049d4:	08004ae5 	.word	0x08004ae5
 80049d8:	08004ae5 	.word	0x08004ae5
 80049dc:	08004aa3 	.word	0x08004aa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68b9      	ldr	r1, [r7, #8]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 f90e 	bl	8004c08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	699a      	ldr	r2, [r3, #24]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f042 0208 	orr.w	r2, r2, #8
 80049fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699a      	ldr	r2, [r3, #24]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 0204 	bic.w	r2, r2, #4
 8004a0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6999      	ldr	r1, [r3, #24]
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	691a      	ldr	r2, [r3, #16]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	619a      	str	r2, [r3, #24]
      break;
 8004a1e:	e064      	b.n	8004aea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68b9      	ldr	r1, [r7, #8]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 f954 	bl	8004cd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	699a      	ldr	r2, [r3, #24]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699a      	ldr	r2, [r3, #24]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6999      	ldr	r1, [r3, #24]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	021a      	lsls	r2, r3, #8
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	619a      	str	r2, [r3, #24]
      break;
 8004a60:	e043      	b.n	8004aea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68b9      	ldr	r1, [r7, #8]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 f99f 	bl	8004dac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69da      	ldr	r2, [r3, #28]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f042 0208 	orr.w	r2, r2, #8
 8004a7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69da      	ldr	r2, [r3, #28]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0204 	bic.w	r2, r2, #4
 8004a8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	69d9      	ldr	r1, [r3, #28]
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	691a      	ldr	r2, [r3, #16]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	61da      	str	r2, [r3, #28]
      break;
 8004aa0:	e023      	b.n	8004aea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68b9      	ldr	r1, [r7, #8]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 f9e9 	bl	8004e80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69da      	ldr	r2, [r3, #28]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004abc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69da      	ldr	r2, [r3, #28]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004acc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69d9      	ldr	r1, [r3, #28]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	021a      	lsls	r2, r3, #8
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	61da      	str	r2, [r3, #28]
      break;
 8004ae2:	e002      	b.n	8004aea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ae8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a37      	ldr	r2, [pc, #220]	@ (8004bec <TIM_Base_SetConfig+0xf0>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d00f      	beq.n	8004b34 <TIM_Base_SetConfig+0x38>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b1a:	d00b      	beq.n	8004b34 <TIM_Base_SetConfig+0x38>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a34      	ldr	r2, [pc, #208]	@ (8004bf0 <TIM_Base_SetConfig+0xf4>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d007      	beq.n	8004b34 <TIM_Base_SetConfig+0x38>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a33      	ldr	r2, [pc, #204]	@ (8004bf4 <TIM_Base_SetConfig+0xf8>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d003      	beq.n	8004b34 <TIM_Base_SetConfig+0x38>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a32      	ldr	r2, [pc, #200]	@ (8004bf8 <TIM_Base_SetConfig+0xfc>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d108      	bne.n	8004b46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a28      	ldr	r2, [pc, #160]	@ (8004bec <TIM_Base_SetConfig+0xf0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d01b      	beq.n	8004b86 <TIM_Base_SetConfig+0x8a>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b54:	d017      	beq.n	8004b86 <TIM_Base_SetConfig+0x8a>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a25      	ldr	r2, [pc, #148]	@ (8004bf0 <TIM_Base_SetConfig+0xf4>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d013      	beq.n	8004b86 <TIM_Base_SetConfig+0x8a>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a24      	ldr	r2, [pc, #144]	@ (8004bf4 <TIM_Base_SetConfig+0xf8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d00f      	beq.n	8004b86 <TIM_Base_SetConfig+0x8a>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a23      	ldr	r2, [pc, #140]	@ (8004bf8 <TIM_Base_SetConfig+0xfc>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d00b      	beq.n	8004b86 <TIM_Base_SetConfig+0x8a>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a22      	ldr	r2, [pc, #136]	@ (8004bfc <TIM_Base_SetConfig+0x100>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d007      	beq.n	8004b86 <TIM_Base_SetConfig+0x8a>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a21      	ldr	r2, [pc, #132]	@ (8004c00 <TIM_Base_SetConfig+0x104>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d003      	beq.n	8004b86 <TIM_Base_SetConfig+0x8a>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a20      	ldr	r2, [pc, #128]	@ (8004c04 <TIM_Base_SetConfig+0x108>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d108      	bne.n	8004b98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	689a      	ldr	r2, [r3, #8]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a0c      	ldr	r2, [pc, #48]	@ (8004bec <TIM_Base_SetConfig+0xf0>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d103      	bne.n	8004bc6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	691a      	ldr	r2, [r3, #16]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f043 0204 	orr.w	r2, r3, #4
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	601a      	str	r2, [r3, #0]
}
 8004bde:	bf00      	nop
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40010000 	.word	0x40010000
 8004bf0:	40000400 	.word	0x40000400
 8004bf4:	40000800 	.word	0x40000800
 8004bf8:	40000c00 	.word	0x40000c00
 8004bfc:	40014000 	.word	0x40014000
 8004c00:	40014400 	.word	0x40014400
 8004c04:	40014800 	.word	0x40014800

08004c08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	f023 0201 	bic.w	r2, r3, #1
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f023 0303 	bic.w	r3, r3, #3
 8004c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f023 0302 	bic.w	r3, r3, #2
 8004c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8004cd0 <TIM_OC1_SetConfig+0xc8>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d10c      	bne.n	8004c7e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f023 0308 	bic.w	r3, r3, #8
 8004c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f023 0304 	bic.w	r3, r3, #4
 8004c7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a13      	ldr	r2, [pc, #76]	@ (8004cd0 <TIM_OC1_SetConfig+0xc8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d111      	bne.n	8004caa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	621a      	str	r2, [r3, #32]
}
 8004cc4:	bf00      	nop
 8004cc6:	371c      	adds	r7, #28
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	40010000 	.word	0x40010000

08004cd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	f023 0210 	bic.w	r2, r3, #16
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	021b      	lsls	r3, r3, #8
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f023 0320 	bic.w	r3, r3, #32
 8004d1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a1e      	ldr	r2, [pc, #120]	@ (8004da8 <TIM_OC2_SetConfig+0xd4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d10d      	bne.n	8004d50 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	011b      	lsls	r3, r3, #4
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a15      	ldr	r2, [pc, #84]	@ (8004da8 <TIM_OC2_SetConfig+0xd4>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d113      	bne.n	8004d80 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	621a      	str	r2, [r3, #32]
}
 8004d9a:	bf00      	nop
 8004d9c:	371c      	adds	r7, #28
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	40010000 	.word	0x40010000

08004dac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f023 0303 	bic.w	r3, r3, #3
 8004de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	021b      	lsls	r3, r3, #8
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a1d      	ldr	r2, [pc, #116]	@ (8004e7c <TIM_OC3_SetConfig+0xd0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d10d      	bne.n	8004e26 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	021b      	lsls	r3, r3, #8
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a14      	ldr	r2, [pc, #80]	@ (8004e7c <TIM_OC3_SetConfig+0xd0>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d113      	bne.n	8004e56 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	011b      	lsls	r3, r3, #4
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	621a      	str	r2, [r3, #32]
}
 8004e70:	bf00      	nop
 8004e72:	371c      	adds	r7, #28
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	40010000 	.word	0x40010000

08004e80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	021b      	lsls	r3, r3, #8
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004eca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	031b      	lsls	r3, r3, #12
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a10      	ldr	r2, [pc, #64]	@ (8004f1c <TIM_OC4_SetConfig+0x9c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d109      	bne.n	8004ef4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ee6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	019b      	lsls	r3, r3, #6
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	621a      	str	r2, [r3, #32]
}
 8004f0e:	bf00      	nop
 8004f10:	371c      	adds	r7, #28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	40010000 	.word	0x40010000

08004f20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f003 031f 	and.w	r3, r3, #31
 8004f32:	2201      	movs	r2, #1
 8004f34:	fa02 f303 	lsl.w	r3, r2, r3
 8004f38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6a1a      	ldr	r2, [r3, #32]
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	43db      	mvns	r3, r3
 8004f42:	401a      	ands	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a1a      	ldr	r2, [r3, #32]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	f003 031f 	and.w	r3, r3, #31
 8004f52:	6879      	ldr	r1, [r7, #4]
 8004f54:	fa01 f303 	lsl.w	r3, r1, r3
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	621a      	str	r2, [r3, #32]
}
 8004f5e:	bf00      	nop
 8004f60:	371c      	adds	r7, #28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
	...

08004f6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d101      	bne.n	8004f84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f80:	2302      	movs	r3, #2
 8004f82:	e050      	b.n	8005026 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004faa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a1c      	ldr	r2, [pc, #112]	@ (8005034 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d018      	beq.n	8004ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fd0:	d013      	beq.n	8004ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a18      	ldr	r2, [pc, #96]	@ (8005038 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d00e      	beq.n	8004ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a16      	ldr	r2, [pc, #88]	@ (800503c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d009      	beq.n	8004ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a15      	ldr	r2, [pc, #84]	@ (8005040 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d004      	beq.n	8004ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a13      	ldr	r2, [pc, #76]	@ (8005044 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d10c      	bne.n	8005014 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005000:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	4313      	orrs	r3, r2
 800500a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	40010000 	.word	0x40010000
 8005038:	40000400 	.word	0x40000400
 800503c:	40000800 	.word	0x40000800
 8005040:	40000c00 	.word	0x40000c00
 8005044:	40014000 	.word	0x40014000

08005048 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e042      	b.n	80050e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d106      	bne.n	8005074 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7fc f888 	bl	8001184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2224      	movs	r2, #36	@ 0x24
 8005078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800508a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 fa09 	bl	80054a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	691a      	ldr	r2, [r3, #16]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	695a      	ldr	r2, [r3, #20]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68da      	ldr	r2, [r3, #12]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08a      	sub	sp, #40	@ 0x28
 80050ec:	af02      	add	r7, sp, #8
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	603b      	str	r3, [r7, #0]
 80050f4:	4613      	mov	r3, r2
 80050f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b20      	cmp	r3, #32
 8005106:	d175      	bne.n	80051f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <HAL_UART_Transmit+0x2c>
 800510e:	88fb      	ldrh	r3, [r7, #6]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e06e      	b.n	80051f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2221      	movs	r2, #33	@ 0x21
 8005122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005126:	f7fc fe13 	bl	8001d50 <HAL_GetTick>
 800512a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	88fa      	ldrh	r2, [r7, #6]
 8005130:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	88fa      	ldrh	r2, [r7, #6]
 8005136:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005140:	d108      	bne.n	8005154 <HAL_UART_Transmit+0x6c>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d104      	bne.n	8005154 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800514a:	2300      	movs	r3, #0
 800514c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	61bb      	str	r3, [r7, #24]
 8005152:	e003      	b.n	800515c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005158:	2300      	movs	r3, #0
 800515a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800515c:	e02e      	b.n	80051bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2200      	movs	r2, #0
 8005166:	2180      	movs	r1, #128	@ 0x80
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 f8df 	bl	800532c <UART_WaitOnFlagUntilTimeout>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d005      	beq.n	8005180 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2220      	movs	r2, #32
 8005178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e03a      	b.n	80051f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10b      	bne.n	800519e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	881b      	ldrh	r3, [r3, #0]
 800518a:	461a      	mov	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005194:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	3302      	adds	r3, #2
 800519a:	61bb      	str	r3, [r7, #24]
 800519c:	e007      	b.n	80051ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	781a      	ldrb	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	3301      	adds	r3, #1
 80051ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	3b01      	subs	r3, #1
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1cb      	bne.n	800515e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2200      	movs	r2, #0
 80051ce:	2140      	movs	r1, #64	@ 0x40
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 f8ab 	bl	800532c <UART_WaitOnFlagUntilTimeout>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d005      	beq.n	80051e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2220      	movs	r2, #32
 80051e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e006      	b.n	80051f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80051f0:	2300      	movs	r3, #0
 80051f2:	e000      	b.n	80051f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80051f4:	2302      	movs	r3, #2
  }
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3720      	adds	r7, #32
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b08a      	sub	sp, #40	@ 0x28
 8005202:	af02      	add	r7, sp, #8
 8005204:	60f8      	str	r0, [r7, #12]
 8005206:	60b9      	str	r1, [r7, #8]
 8005208:	603b      	str	r3, [r7, #0]
 800520a:	4613      	mov	r3, r2
 800520c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b20      	cmp	r3, #32
 800521c:	f040 8081 	bne.w	8005322 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d002      	beq.n	800522c <HAL_UART_Receive+0x2e>
 8005226:	88fb      	ldrh	r3, [r7, #6]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e079      	b.n	8005324 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2222      	movs	r2, #34	@ 0x22
 800523a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005244:	f7fc fd84 	bl	8001d50 <HAL_GetTick>
 8005248:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	88fa      	ldrh	r2, [r7, #6]
 800524e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	88fa      	ldrh	r2, [r7, #6]
 8005254:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800525e:	d108      	bne.n	8005272 <HAL_UART_Receive+0x74>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d104      	bne.n	8005272 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005268:	2300      	movs	r3, #0
 800526a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	61bb      	str	r3, [r7, #24]
 8005270:	e003      	b.n	800527a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005276:	2300      	movs	r3, #0
 8005278:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800527a:	e047      	b.n	800530c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	2200      	movs	r2, #0
 8005284:	2120      	movs	r1, #32
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 f850 	bl	800532c <UART_WaitOnFlagUntilTimeout>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d005      	beq.n	800529e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2220      	movs	r2, #32
 8005296:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e042      	b.n	8005324 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10c      	bne.n	80052be <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	3302      	adds	r3, #2
 80052ba:	61bb      	str	r3, [r7, #24]
 80052bc:	e01f      	b.n	80052fe <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052c6:	d007      	beq.n	80052d8 <HAL_UART_Receive+0xda>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10a      	bne.n	80052e6 <HAL_UART_Receive+0xe8>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d106      	bne.n	80052e6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	701a      	strb	r2, [r3, #0]
 80052e4:	e008      	b.n	80052f8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	3301      	adds	r3, #1
 80052fc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005302:	b29b      	uxth	r3, r3
 8005304:	3b01      	subs	r3, #1
 8005306:	b29a      	uxth	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005310:	b29b      	uxth	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1b2      	bne.n	800527c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2220      	movs	r2, #32
 800531a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	e000      	b.n	8005324 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005322:	2302      	movs	r3, #2
  }
}
 8005324:	4618      	mov	r0, r3
 8005326:	3720      	adds	r7, #32
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	603b      	str	r3, [r7, #0]
 8005338:	4613      	mov	r3, r2
 800533a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800533c:	e03b      	b.n	80053b6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005344:	d037      	beq.n	80053b6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005346:	f7fc fd03 	bl	8001d50 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	6a3a      	ldr	r2, [r7, #32]
 8005352:	429a      	cmp	r2, r3
 8005354:	d302      	bcc.n	800535c <UART_WaitOnFlagUntilTimeout+0x30>
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e03a      	b.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f003 0304 	and.w	r3, r3, #4
 800536a:	2b00      	cmp	r3, #0
 800536c:	d023      	beq.n	80053b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2b80      	cmp	r3, #128	@ 0x80
 8005372:	d020      	beq.n	80053b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2b40      	cmp	r3, #64	@ 0x40
 8005378:	d01d      	beq.n	80053b6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0308 	and.w	r3, r3, #8
 8005384:	2b08      	cmp	r3, #8
 8005386:	d116      	bne.n	80053b6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005388:	2300      	movs	r3, #0
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 f81d 	bl	80053de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2208      	movs	r2, #8
 80053a8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e00f      	b.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	4013      	ands	r3, r2
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	bf0c      	ite	eq
 80053c6:	2301      	moveq	r3, #1
 80053c8:	2300      	movne	r3, #0
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	461a      	mov	r2, r3
 80053ce:	79fb      	ldrb	r3, [r7, #7]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d0b4      	beq.n	800533e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053de:	b480      	push	{r7}
 80053e0:	b095      	sub	sp, #84	@ 0x54
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	330c      	adds	r3, #12
 80053ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f0:	e853 3f00 	ldrex	r3, [r3]
 80053f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	330c      	adds	r3, #12
 8005404:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005406:	643a      	str	r2, [r7, #64]	@ 0x40
 8005408:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800540c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800540e:	e841 2300 	strex	r3, r2, [r1]
 8005412:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1e5      	bne.n	80053e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	3314      	adds	r3, #20
 8005420:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	e853 3f00 	ldrex	r3, [r3]
 8005428:	61fb      	str	r3, [r7, #28]
   return(result);
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	f023 0301 	bic.w	r3, r3, #1
 8005430:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	3314      	adds	r3, #20
 8005438:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800543a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800543c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005440:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005442:	e841 2300 	strex	r3, r2, [r1]
 8005446:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1e5      	bne.n	800541a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005452:	2b01      	cmp	r3, #1
 8005454:	d119      	bne.n	800548a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	330c      	adds	r3, #12
 800545c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	e853 3f00 	ldrex	r3, [r3]
 8005464:	60bb      	str	r3, [r7, #8]
   return(result);
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	f023 0310 	bic.w	r3, r3, #16
 800546c:	647b      	str	r3, [r7, #68]	@ 0x44
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	330c      	adds	r3, #12
 8005474:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005476:	61ba      	str	r2, [r7, #24]
 8005478:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547a:	6979      	ldr	r1, [r7, #20]
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	e841 2300 	strex	r3, r2, [r1]
 8005482:	613b      	str	r3, [r7, #16]
   return(result);
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1e5      	bne.n	8005456 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2220      	movs	r2, #32
 800548e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005498:	bf00      	nop
 800549a:	3754      	adds	r7, #84	@ 0x54
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054a8:	b0c0      	sub	sp, #256	@ 0x100
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80054bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c0:	68d9      	ldr	r1, [r3, #12]
 80054c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	ea40 0301 	orr.w	r3, r0, r1
 80054cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054d2:	689a      	ldr	r2, [r3, #8]
 80054d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	431a      	orrs	r2, r3
 80054dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	431a      	orrs	r2, r3
 80054e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80054f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80054fc:	f021 010c 	bic.w	r1, r1, #12
 8005500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800550a:	430b      	orrs	r3, r1
 800550c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800550e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800551a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800551e:	6999      	ldr	r1, [r3, #24]
 8005520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	ea40 0301 	orr.w	r3, r0, r1
 800552a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800552c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	4b8f      	ldr	r3, [pc, #572]	@ (8005770 <UART_SetConfig+0x2cc>)
 8005534:	429a      	cmp	r2, r3
 8005536:	d005      	beq.n	8005544 <UART_SetConfig+0xa0>
 8005538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	4b8d      	ldr	r3, [pc, #564]	@ (8005774 <UART_SetConfig+0x2d0>)
 8005540:	429a      	cmp	r2, r3
 8005542:	d104      	bne.n	800554e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005544:	f7fe fd92 	bl	800406c <HAL_RCC_GetPCLK2Freq>
 8005548:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800554c:	e003      	b.n	8005556 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800554e:	f7fe fd79 	bl	8004044 <HAL_RCC_GetPCLK1Freq>
 8005552:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800555a:	69db      	ldr	r3, [r3, #28]
 800555c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005560:	f040 810c 	bne.w	800577c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005564:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005568:	2200      	movs	r2, #0
 800556a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800556e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005572:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005576:	4622      	mov	r2, r4
 8005578:	462b      	mov	r3, r5
 800557a:	1891      	adds	r1, r2, r2
 800557c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800557e:	415b      	adcs	r3, r3
 8005580:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005582:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005586:	4621      	mov	r1, r4
 8005588:	eb12 0801 	adds.w	r8, r2, r1
 800558c:	4629      	mov	r1, r5
 800558e:	eb43 0901 	adc.w	r9, r3, r1
 8005592:	f04f 0200 	mov.w	r2, #0
 8005596:	f04f 0300 	mov.w	r3, #0
 800559a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800559e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055a6:	4690      	mov	r8, r2
 80055a8:	4699      	mov	r9, r3
 80055aa:	4623      	mov	r3, r4
 80055ac:	eb18 0303 	adds.w	r3, r8, r3
 80055b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80055b4:	462b      	mov	r3, r5
 80055b6:	eb49 0303 	adc.w	r3, r9, r3
 80055ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80055be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80055ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80055ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80055d2:	460b      	mov	r3, r1
 80055d4:	18db      	adds	r3, r3, r3
 80055d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80055d8:	4613      	mov	r3, r2
 80055da:	eb42 0303 	adc.w	r3, r2, r3
 80055de:	657b      	str	r3, [r7, #84]	@ 0x54
 80055e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80055e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80055e8:	f7fb fa70 	bl	8000acc <__aeabi_uldivmod>
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	4b61      	ldr	r3, [pc, #388]	@ (8005778 <UART_SetConfig+0x2d4>)
 80055f2:	fba3 2302 	umull	r2, r3, r3, r2
 80055f6:	095b      	lsrs	r3, r3, #5
 80055f8:	011c      	lsls	r4, r3, #4
 80055fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055fe:	2200      	movs	r2, #0
 8005600:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005604:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005608:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800560c:	4642      	mov	r2, r8
 800560e:	464b      	mov	r3, r9
 8005610:	1891      	adds	r1, r2, r2
 8005612:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005614:	415b      	adcs	r3, r3
 8005616:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005618:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800561c:	4641      	mov	r1, r8
 800561e:	eb12 0a01 	adds.w	sl, r2, r1
 8005622:	4649      	mov	r1, r9
 8005624:	eb43 0b01 	adc.w	fp, r3, r1
 8005628:	f04f 0200 	mov.w	r2, #0
 800562c:	f04f 0300 	mov.w	r3, #0
 8005630:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005634:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005638:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800563c:	4692      	mov	sl, r2
 800563e:	469b      	mov	fp, r3
 8005640:	4643      	mov	r3, r8
 8005642:	eb1a 0303 	adds.w	r3, sl, r3
 8005646:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800564a:	464b      	mov	r3, r9
 800564c:	eb4b 0303 	adc.w	r3, fp, r3
 8005650:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005660:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005664:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005668:	460b      	mov	r3, r1
 800566a:	18db      	adds	r3, r3, r3
 800566c:	643b      	str	r3, [r7, #64]	@ 0x40
 800566e:	4613      	mov	r3, r2
 8005670:	eb42 0303 	adc.w	r3, r2, r3
 8005674:	647b      	str	r3, [r7, #68]	@ 0x44
 8005676:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800567a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800567e:	f7fb fa25 	bl	8000acc <__aeabi_uldivmod>
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	4611      	mov	r1, r2
 8005688:	4b3b      	ldr	r3, [pc, #236]	@ (8005778 <UART_SetConfig+0x2d4>)
 800568a:	fba3 2301 	umull	r2, r3, r3, r1
 800568e:	095b      	lsrs	r3, r3, #5
 8005690:	2264      	movs	r2, #100	@ 0x64
 8005692:	fb02 f303 	mul.w	r3, r2, r3
 8005696:	1acb      	subs	r3, r1, r3
 8005698:	00db      	lsls	r3, r3, #3
 800569a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800569e:	4b36      	ldr	r3, [pc, #216]	@ (8005778 <UART_SetConfig+0x2d4>)
 80056a0:	fba3 2302 	umull	r2, r3, r3, r2
 80056a4:	095b      	lsrs	r3, r3, #5
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80056ac:	441c      	add	r4, r3
 80056ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056b2:	2200      	movs	r2, #0
 80056b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80056bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80056c0:	4642      	mov	r2, r8
 80056c2:	464b      	mov	r3, r9
 80056c4:	1891      	adds	r1, r2, r2
 80056c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80056c8:	415b      	adcs	r3, r3
 80056ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80056d0:	4641      	mov	r1, r8
 80056d2:	1851      	adds	r1, r2, r1
 80056d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80056d6:	4649      	mov	r1, r9
 80056d8:	414b      	adcs	r3, r1
 80056da:	637b      	str	r3, [r7, #52]	@ 0x34
 80056dc:	f04f 0200 	mov.w	r2, #0
 80056e0:	f04f 0300 	mov.w	r3, #0
 80056e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80056e8:	4659      	mov	r1, fp
 80056ea:	00cb      	lsls	r3, r1, #3
 80056ec:	4651      	mov	r1, sl
 80056ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056f2:	4651      	mov	r1, sl
 80056f4:	00ca      	lsls	r2, r1, #3
 80056f6:	4610      	mov	r0, r2
 80056f8:	4619      	mov	r1, r3
 80056fa:	4603      	mov	r3, r0
 80056fc:	4642      	mov	r2, r8
 80056fe:	189b      	adds	r3, r3, r2
 8005700:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005704:	464b      	mov	r3, r9
 8005706:	460a      	mov	r2, r1
 8005708:	eb42 0303 	adc.w	r3, r2, r3
 800570c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800571c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005720:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005724:	460b      	mov	r3, r1
 8005726:	18db      	adds	r3, r3, r3
 8005728:	62bb      	str	r3, [r7, #40]	@ 0x28
 800572a:	4613      	mov	r3, r2
 800572c:	eb42 0303 	adc.w	r3, r2, r3
 8005730:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005732:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005736:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800573a:	f7fb f9c7 	bl	8000acc <__aeabi_uldivmod>
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	4b0d      	ldr	r3, [pc, #52]	@ (8005778 <UART_SetConfig+0x2d4>)
 8005744:	fba3 1302 	umull	r1, r3, r3, r2
 8005748:	095b      	lsrs	r3, r3, #5
 800574a:	2164      	movs	r1, #100	@ 0x64
 800574c:	fb01 f303 	mul.w	r3, r1, r3
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	3332      	adds	r3, #50	@ 0x32
 8005756:	4a08      	ldr	r2, [pc, #32]	@ (8005778 <UART_SetConfig+0x2d4>)
 8005758:	fba2 2303 	umull	r2, r3, r2, r3
 800575c:	095b      	lsrs	r3, r3, #5
 800575e:	f003 0207 	and.w	r2, r3, #7
 8005762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4422      	add	r2, r4
 800576a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800576c:	e106      	b.n	800597c <UART_SetConfig+0x4d8>
 800576e:	bf00      	nop
 8005770:	40011000 	.word	0x40011000
 8005774:	40011400 	.word	0x40011400
 8005778:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800577c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005780:	2200      	movs	r2, #0
 8005782:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005786:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800578a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800578e:	4642      	mov	r2, r8
 8005790:	464b      	mov	r3, r9
 8005792:	1891      	adds	r1, r2, r2
 8005794:	6239      	str	r1, [r7, #32]
 8005796:	415b      	adcs	r3, r3
 8005798:	627b      	str	r3, [r7, #36]	@ 0x24
 800579a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800579e:	4641      	mov	r1, r8
 80057a0:	1854      	adds	r4, r2, r1
 80057a2:	4649      	mov	r1, r9
 80057a4:	eb43 0501 	adc.w	r5, r3, r1
 80057a8:	f04f 0200 	mov.w	r2, #0
 80057ac:	f04f 0300 	mov.w	r3, #0
 80057b0:	00eb      	lsls	r3, r5, #3
 80057b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057b6:	00e2      	lsls	r2, r4, #3
 80057b8:	4614      	mov	r4, r2
 80057ba:	461d      	mov	r5, r3
 80057bc:	4643      	mov	r3, r8
 80057be:	18e3      	adds	r3, r4, r3
 80057c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80057c4:	464b      	mov	r3, r9
 80057c6:	eb45 0303 	adc.w	r3, r5, r3
 80057ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80057ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80057da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80057de:	f04f 0200 	mov.w	r2, #0
 80057e2:	f04f 0300 	mov.w	r3, #0
 80057e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80057ea:	4629      	mov	r1, r5
 80057ec:	008b      	lsls	r3, r1, #2
 80057ee:	4621      	mov	r1, r4
 80057f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057f4:	4621      	mov	r1, r4
 80057f6:	008a      	lsls	r2, r1, #2
 80057f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80057fc:	f7fb f966 	bl	8000acc <__aeabi_uldivmod>
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	4b60      	ldr	r3, [pc, #384]	@ (8005988 <UART_SetConfig+0x4e4>)
 8005806:	fba3 2302 	umull	r2, r3, r3, r2
 800580a:	095b      	lsrs	r3, r3, #5
 800580c:	011c      	lsls	r4, r3, #4
 800580e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005812:	2200      	movs	r2, #0
 8005814:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005818:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800581c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005820:	4642      	mov	r2, r8
 8005822:	464b      	mov	r3, r9
 8005824:	1891      	adds	r1, r2, r2
 8005826:	61b9      	str	r1, [r7, #24]
 8005828:	415b      	adcs	r3, r3
 800582a:	61fb      	str	r3, [r7, #28]
 800582c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005830:	4641      	mov	r1, r8
 8005832:	1851      	adds	r1, r2, r1
 8005834:	6139      	str	r1, [r7, #16]
 8005836:	4649      	mov	r1, r9
 8005838:	414b      	adcs	r3, r1
 800583a:	617b      	str	r3, [r7, #20]
 800583c:	f04f 0200 	mov.w	r2, #0
 8005840:	f04f 0300 	mov.w	r3, #0
 8005844:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005848:	4659      	mov	r1, fp
 800584a:	00cb      	lsls	r3, r1, #3
 800584c:	4651      	mov	r1, sl
 800584e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005852:	4651      	mov	r1, sl
 8005854:	00ca      	lsls	r2, r1, #3
 8005856:	4610      	mov	r0, r2
 8005858:	4619      	mov	r1, r3
 800585a:	4603      	mov	r3, r0
 800585c:	4642      	mov	r2, r8
 800585e:	189b      	adds	r3, r3, r2
 8005860:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005864:	464b      	mov	r3, r9
 8005866:	460a      	mov	r2, r1
 8005868:	eb42 0303 	adc.w	r3, r2, r3
 800586c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	67bb      	str	r3, [r7, #120]	@ 0x78
 800587a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800587c:	f04f 0200 	mov.w	r2, #0
 8005880:	f04f 0300 	mov.w	r3, #0
 8005884:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005888:	4649      	mov	r1, r9
 800588a:	008b      	lsls	r3, r1, #2
 800588c:	4641      	mov	r1, r8
 800588e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005892:	4641      	mov	r1, r8
 8005894:	008a      	lsls	r2, r1, #2
 8005896:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800589a:	f7fb f917 	bl	8000acc <__aeabi_uldivmod>
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	4611      	mov	r1, r2
 80058a4:	4b38      	ldr	r3, [pc, #224]	@ (8005988 <UART_SetConfig+0x4e4>)
 80058a6:	fba3 2301 	umull	r2, r3, r3, r1
 80058aa:	095b      	lsrs	r3, r3, #5
 80058ac:	2264      	movs	r2, #100	@ 0x64
 80058ae:	fb02 f303 	mul.w	r3, r2, r3
 80058b2:	1acb      	subs	r3, r1, r3
 80058b4:	011b      	lsls	r3, r3, #4
 80058b6:	3332      	adds	r3, #50	@ 0x32
 80058b8:	4a33      	ldr	r2, [pc, #204]	@ (8005988 <UART_SetConfig+0x4e4>)
 80058ba:	fba2 2303 	umull	r2, r3, r2, r3
 80058be:	095b      	lsrs	r3, r3, #5
 80058c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058c4:	441c      	add	r4, r3
 80058c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058ca:	2200      	movs	r2, #0
 80058cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80058ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80058d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80058d4:	4642      	mov	r2, r8
 80058d6:	464b      	mov	r3, r9
 80058d8:	1891      	adds	r1, r2, r2
 80058da:	60b9      	str	r1, [r7, #8]
 80058dc:	415b      	adcs	r3, r3
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058e4:	4641      	mov	r1, r8
 80058e6:	1851      	adds	r1, r2, r1
 80058e8:	6039      	str	r1, [r7, #0]
 80058ea:	4649      	mov	r1, r9
 80058ec:	414b      	adcs	r3, r1
 80058ee:	607b      	str	r3, [r7, #4]
 80058f0:	f04f 0200 	mov.w	r2, #0
 80058f4:	f04f 0300 	mov.w	r3, #0
 80058f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058fc:	4659      	mov	r1, fp
 80058fe:	00cb      	lsls	r3, r1, #3
 8005900:	4651      	mov	r1, sl
 8005902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005906:	4651      	mov	r1, sl
 8005908:	00ca      	lsls	r2, r1, #3
 800590a:	4610      	mov	r0, r2
 800590c:	4619      	mov	r1, r3
 800590e:	4603      	mov	r3, r0
 8005910:	4642      	mov	r2, r8
 8005912:	189b      	adds	r3, r3, r2
 8005914:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005916:	464b      	mov	r3, r9
 8005918:	460a      	mov	r2, r1
 800591a:	eb42 0303 	adc.w	r3, r2, r3
 800591e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	663b      	str	r3, [r7, #96]	@ 0x60
 800592a:	667a      	str	r2, [r7, #100]	@ 0x64
 800592c:	f04f 0200 	mov.w	r2, #0
 8005930:	f04f 0300 	mov.w	r3, #0
 8005934:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005938:	4649      	mov	r1, r9
 800593a:	008b      	lsls	r3, r1, #2
 800593c:	4641      	mov	r1, r8
 800593e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005942:	4641      	mov	r1, r8
 8005944:	008a      	lsls	r2, r1, #2
 8005946:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800594a:	f7fb f8bf 	bl	8000acc <__aeabi_uldivmod>
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	4b0d      	ldr	r3, [pc, #52]	@ (8005988 <UART_SetConfig+0x4e4>)
 8005954:	fba3 1302 	umull	r1, r3, r3, r2
 8005958:	095b      	lsrs	r3, r3, #5
 800595a:	2164      	movs	r1, #100	@ 0x64
 800595c:	fb01 f303 	mul.w	r3, r1, r3
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	011b      	lsls	r3, r3, #4
 8005964:	3332      	adds	r3, #50	@ 0x32
 8005966:	4a08      	ldr	r2, [pc, #32]	@ (8005988 <UART_SetConfig+0x4e4>)
 8005968:	fba2 2303 	umull	r2, r3, r2, r3
 800596c:	095b      	lsrs	r3, r3, #5
 800596e:	f003 020f 	and.w	r2, r3, #15
 8005972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4422      	add	r2, r4
 800597a:	609a      	str	r2, [r3, #8]
}
 800597c:	bf00      	nop
 800597e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005982:	46bd      	mov	sp, r7
 8005984:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005988:	51eb851f 	.word	0x51eb851f

0800598c <sniprintf>:
 800598c:	b40c      	push	{r2, r3}
 800598e:	b530      	push	{r4, r5, lr}
 8005990:	4b18      	ldr	r3, [pc, #96]	@ (80059f4 <sniprintf+0x68>)
 8005992:	1e0c      	subs	r4, r1, #0
 8005994:	681d      	ldr	r5, [r3, #0]
 8005996:	b09d      	sub	sp, #116	@ 0x74
 8005998:	da08      	bge.n	80059ac <sniprintf+0x20>
 800599a:	238b      	movs	r3, #139	@ 0x8b
 800599c:	602b      	str	r3, [r5, #0]
 800599e:	f04f 30ff 	mov.w	r0, #4294967295
 80059a2:	b01d      	add	sp, #116	@ 0x74
 80059a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059a8:	b002      	add	sp, #8
 80059aa:	4770      	bx	lr
 80059ac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80059b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80059b4:	f04f 0300 	mov.w	r3, #0
 80059b8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80059ba:	bf14      	ite	ne
 80059bc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80059c0:	4623      	moveq	r3, r4
 80059c2:	9304      	str	r3, [sp, #16]
 80059c4:	9307      	str	r3, [sp, #28]
 80059c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80059ca:	9002      	str	r0, [sp, #8]
 80059cc:	9006      	str	r0, [sp, #24]
 80059ce:	f8ad 3016 	strh.w	r3, [sp, #22]
 80059d2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80059d4:	ab21      	add	r3, sp, #132	@ 0x84
 80059d6:	a902      	add	r1, sp, #8
 80059d8:	4628      	mov	r0, r5
 80059da:	9301      	str	r3, [sp, #4]
 80059dc:	f000 f994 	bl	8005d08 <_svfiprintf_r>
 80059e0:	1c43      	adds	r3, r0, #1
 80059e2:	bfbc      	itt	lt
 80059e4:	238b      	movlt	r3, #139	@ 0x8b
 80059e6:	602b      	strlt	r3, [r5, #0]
 80059e8:	2c00      	cmp	r4, #0
 80059ea:	d0da      	beq.n	80059a2 <sniprintf+0x16>
 80059ec:	9b02      	ldr	r3, [sp, #8]
 80059ee:	2200      	movs	r2, #0
 80059f0:	701a      	strb	r2, [r3, #0]
 80059f2:	e7d6      	b.n	80059a2 <sniprintf+0x16>
 80059f4:	2000000c 	.word	0x2000000c

080059f8 <memset>:
 80059f8:	4402      	add	r2, r0
 80059fa:	4603      	mov	r3, r0
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d100      	bne.n	8005a02 <memset+0xa>
 8005a00:	4770      	bx	lr
 8005a02:	f803 1b01 	strb.w	r1, [r3], #1
 8005a06:	e7f9      	b.n	80059fc <memset+0x4>

08005a08 <__errno>:
 8005a08:	4b01      	ldr	r3, [pc, #4]	@ (8005a10 <__errno+0x8>)
 8005a0a:	6818      	ldr	r0, [r3, #0]
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	2000000c 	.word	0x2000000c

08005a14 <__libc_init_array>:
 8005a14:	b570      	push	{r4, r5, r6, lr}
 8005a16:	4d0d      	ldr	r5, [pc, #52]	@ (8005a4c <__libc_init_array+0x38>)
 8005a18:	4c0d      	ldr	r4, [pc, #52]	@ (8005a50 <__libc_init_array+0x3c>)
 8005a1a:	1b64      	subs	r4, r4, r5
 8005a1c:	10a4      	asrs	r4, r4, #2
 8005a1e:	2600      	movs	r6, #0
 8005a20:	42a6      	cmp	r6, r4
 8005a22:	d109      	bne.n	8005a38 <__libc_init_array+0x24>
 8005a24:	4d0b      	ldr	r5, [pc, #44]	@ (8005a54 <__libc_init_array+0x40>)
 8005a26:	4c0c      	ldr	r4, [pc, #48]	@ (8005a58 <__libc_init_array+0x44>)
 8005a28:	f000 fc64 	bl	80062f4 <_init>
 8005a2c:	1b64      	subs	r4, r4, r5
 8005a2e:	10a4      	asrs	r4, r4, #2
 8005a30:	2600      	movs	r6, #0
 8005a32:	42a6      	cmp	r6, r4
 8005a34:	d105      	bne.n	8005a42 <__libc_init_array+0x2e>
 8005a36:	bd70      	pop	{r4, r5, r6, pc}
 8005a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a3c:	4798      	blx	r3
 8005a3e:	3601      	adds	r6, #1
 8005a40:	e7ee      	b.n	8005a20 <__libc_init_array+0xc>
 8005a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a46:	4798      	blx	r3
 8005a48:	3601      	adds	r6, #1
 8005a4a:	e7f2      	b.n	8005a32 <__libc_init_array+0x1e>
 8005a4c:	0800650c 	.word	0x0800650c
 8005a50:	0800650c 	.word	0x0800650c
 8005a54:	0800650c 	.word	0x0800650c
 8005a58:	08006510 	.word	0x08006510

08005a5c <__retarget_lock_acquire_recursive>:
 8005a5c:	4770      	bx	lr

08005a5e <__retarget_lock_release_recursive>:
 8005a5e:	4770      	bx	lr

08005a60 <_free_r>:
 8005a60:	b538      	push	{r3, r4, r5, lr}
 8005a62:	4605      	mov	r5, r0
 8005a64:	2900      	cmp	r1, #0
 8005a66:	d041      	beq.n	8005aec <_free_r+0x8c>
 8005a68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a6c:	1f0c      	subs	r4, r1, #4
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	bfb8      	it	lt
 8005a72:	18e4      	addlt	r4, r4, r3
 8005a74:	f000 f8e0 	bl	8005c38 <__malloc_lock>
 8005a78:	4a1d      	ldr	r2, [pc, #116]	@ (8005af0 <_free_r+0x90>)
 8005a7a:	6813      	ldr	r3, [r2, #0]
 8005a7c:	b933      	cbnz	r3, 8005a8c <_free_r+0x2c>
 8005a7e:	6063      	str	r3, [r4, #4]
 8005a80:	6014      	str	r4, [r2, #0]
 8005a82:	4628      	mov	r0, r5
 8005a84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a88:	f000 b8dc 	b.w	8005c44 <__malloc_unlock>
 8005a8c:	42a3      	cmp	r3, r4
 8005a8e:	d908      	bls.n	8005aa2 <_free_r+0x42>
 8005a90:	6820      	ldr	r0, [r4, #0]
 8005a92:	1821      	adds	r1, r4, r0
 8005a94:	428b      	cmp	r3, r1
 8005a96:	bf01      	itttt	eq
 8005a98:	6819      	ldreq	r1, [r3, #0]
 8005a9a:	685b      	ldreq	r3, [r3, #4]
 8005a9c:	1809      	addeq	r1, r1, r0
 8005a9e:	6021      	streq	r1, [r4, #0]
 8005aa0:	e7ed      	b.n	8005a7e <_free_r+0x1e>
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	b10b      	cbz	r3, 8005aac <_free_r+0x4c>
 8005aa8:	42a3      	cmp	r3, r4
 8005aaa:	d9fa      	bls.n	8005aa2 <_free_r+0x42>
 8005aac:	6811      	ldr	r1, [r2, #0]
 8005aae:	1850      	adds	r0, r2, r1
 8005ab0:	42a0      	cmp	r0, r4
 8005ab2:	d10b      	bne.n	8005acc <_free_r+0x6c>
 8005ab4:	6820      	ldr	r0, [r4, #0]
 8005ab6:	4401      	add	r1, r0
 8005ab8:	1850      	adds	r0, r2, r1
 8005aba:	4283      	cmp	r3, r0
 8005abc:	6011      	str	r1, [r2, #0]
 8005abe:	d1e0      	bne.n	8005a82 <_free_r+0x22>
 8005ac0:	6818      	ldr	r0, [r3, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	6053      	str	r3, [r2, #4]
 8005ac6:	4408      	add	r0, r1
 8005ac8:	6010      	str	r0, [r2, #0]
 8005aca:	e7da      	b.n	8005a82 <_free_r+0x22>
 8005acc:	d902      	bls.n	8005ad4 <_free_r+0x74>
 8005ace:	230c      	movs	r3, #12
 8005ad0:	602b      	str	r3, [r5, #0]
 8005ad2:	e7d6      	b.n	8005a82 <_free_r+0x22>
 8005ad4:	6820      	ldr	r0, [r4, #0]
 8005ad6:	1821      	adds	r1, r4, r0
 8005ad8:	428b      	cmp	r3, r1
 8005ada:	bf04      	itt	eq
 8005adc:	6819      	ldreq	r1, [r3, #0]
 8005ade:	685b      	ldreq	r3, [r3, #4]
 8005ae0:	6063      	str	r3, [r4, #4]
 8005ae2:	bf04      	itt	eq
 8005ae4:	1809      	addeq	r1, r1, r0
 8005ae6:	6021      	streq	r1, [r4, #0]
 8005ae8:	6054      	str	r4, [r2, #4]
 8005aea:	e7ca      	b.n	8005a82 <_free_r+0x22>
 8005aec:	bd38      	pop	{r3, r4, r5, pc}
 8005aee:	bf00      	nop
 8005af0:	20000348 	.word	0x20000348

08005af4 <sbrk_aligned>:
 8005af4:	b570      	push	{r4, r5, r6, lr}
 8005af6:	4e0f      	ldr	r6, [pc, #60]	@ (8005b34 <sbrk_aligned+0x40>)
 8005af8:	460c      	mov	r4, r1
 8005afa:	6831      	ldr	r1, [r6, #0]
 8005afc:	4605      	mov	r5, r0
 8005afe:	b911      	cbnz	r1, 8005b06 <sbrk_aligned+0x12>
 8005b00:	f000 fba4 	bl	800624c <_sbrk_r>
 8005b04:	6030      	str	r0, [r6, #0]
 8005b06:	4621      	mov	r1, r4
 8005b08:	4628      	mov	r0, r5
 8005b0a:	f000 fb9f 	bl	800624c <_sbrk_r>
 8005b0e:	1c43      	adds	r3, r0, #1
 8005b10:	d103      	bne.n	8005b1a <sbrk_aligned+0x26>
 8005b12:	f04f 34ff 	mov.w	r4, #4294967295
 8005b16:	4620      	mov	r0, r4
 8005b18:	bd70      	pop	{r4, r5, r6, pc}
 8005b1a:	1cc4      	adds	r4, r0, #3
 8005b1c:	f024 0403 	bic.w	r4, r4, #3
 8005b20:	42a0      	cmp	r0, r4
 8005b22:	d0f8      	beq.n	8005b16 <sbrk_aligned+0x22>
 8005b24:	1a21      	subs	r1, r4, r0
 8005b26:	4628      	mov	r0, r5
 8005b28:	f000 fb90 	bl	800624c <_sbrk_r>
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	d1f2      	bne.n	8005b16 <sbrk_aligned+0x22>
 8005b30:	e7ef      	b.n	8005b12 <sbrk_aligned+0x1e>
 8005b32:	bf00      	nop
 8005b34:	20000344 	.word	0x20000344

08005b38 <_malloc_r>:
 8005b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b3c:	1ccd      	adds	r5, r1, #3
 8005b3e:	f025 0503 	bic.w	r5, r5, #3
 8005b42:	3508      	adds	r5, #8
 8005b44:	2d0c      	cmp	r5, #12
 8005b46:	bf38      	it	cc
 8005b48:	250c      	movcc	r5, #12
 8005b4a:	2d00      	cmp	r5, #0
 8005b4c:	4606      	mov	r6, r0
 8005b4e:	db01      	blt.n	8005b54 <_malloc_r+0x1c>
 8005b50:	42a9      	cmp	r1, r5
 8005b52:	d904      	bls.n	8005b5e <_malloc_r+0x26>
 8005b54:	230c      	movs	r3, #12
 8005b56:	6033      	str	r3, [r6, #0]
 8005b58:	2000      	movs	r0, #0
 8005b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c34 <_malloc_r+0xfc>
 8005b62:	f000 f869 	bl	8005c38 <__malloc_lock>
 8005b66:	f8d8 3000 	ldr.w	r3, [r8]
 8005b6a:	461c      	mov	r4, r3
 8005b6c:	bb44      	cbnz	r4, 8005bc0 <_malloc_r+0x88>
 8005b6e:	4629      	mov	r1, r5
 8005b70:	4630      	mov	r0, r6
 8005b72:	f7ff ffbf 	bl	8005af4 <sbrk_aligned>
 8005b76:	1c43      	adds	r3, r0, #1
 8005b78:	4604      	mov	r4, r0
 8005b7a:	d158      	bne.n	8005c2e <_malloc_r+0xf6>
 8005b7c:	f8d8 4000 	ldr.w	r4, [r8]
 8005b80:	4627      	mov	r7, r4
 8005b82:	2f00      	cmp	r7, #0
 8005b84:	d143      	bne.n	8005c0e <_malloc_r+0xd6>
 8005b86:	2c00      	cmp	r4, #0
 8005b88:	d04b      	beq.n	8005c22 <_malloc_r+0xea>
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	4639      	mov	r1, r7
 8005b8e:	4630      	mov	r0, r6
 8005b90:	eb04 0903 	add.w	r9, r4, r3
 8005b94:	f000 fb5a 	bl	800624c <_sbrk_r>
 8005b98:	4581      	cmp	r9, r0
 8005b9a:	d142      	bne.n	8005c22 <_malloc_r+0xea>
 8005b9c:	6821      	ldr	r1, [r4, #0]
 8005b9e:	1a6d      	subs	r5, r5, r1
 8005ba0:	4629      	mov	r1, r5
 8005ba2:	4630      	mov	r0, r6
 8005ba4:	f7ff ffa6 	bl	8005af4 <sbrk_aligned>
 8005ba8:	3001      	adds	r0, #1
 8005baa:	d03a      	beq.n	8005c22 <_malloc_r+0xea>
 8005bac:	6823      	ldr	r3, [r4, #0]
 8005bae:	442b      	add	r3, r5
 8005bb0:	6023      	str	r3, [r4, #0]
 8005bb2:	f8d8 3000 	ldr.w	r3, [r8]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	bb62      	cbnz	r2, 8005c14 <_malloc_r+0xdc>
 8005bba:	f8c8 7000 	str.w	r7, [r8]
 8005bbe:	e00f      	b.n	8005be0 <_malloc_r+0xa8>
 8005bc0:	6822      	ldr	r2, [r4, #0]
 8005bc2:	1b52      	subs	r2, r2, r5
 8005bc4:	d420      	bmi.n	8005c08 <_malloc_r+0xd0>
 8005bc6:	2a0b      	cmp	r2, #11
 8005bc8:	d917      	bls.n	8005bfa <_malloc_r+0xc2>
 8005bca:	1961      	adds	r1, r4, r5
 8005bcc:	42a3      	cmp	r3, r4
 8005bce:	6025      	str	r5, [r4, #0]
 8005bd0:	bf18      	it	ne
 8005bd2:	6059      	strne	r1, [r3, #4]
 8005bd4:	6863      	ldr	r3, [r4, #4]
 8005bd6:	bf08      	it	eq
 8005bd8:	f8c8 1000 	streq.w	r1, [r8]
 8005bdc:	5162      	str	r2, [r4, r5]
 8005bde:	604b      	str	r3, [r1, #4]
 8005be0:	4630      	mov	r0, r6
 8005be2:	f000 f82f 	bl	8005c44 <__malloc_unlock>
 8005be6:	f104 000b 	add.w	r0, r4, #11
 8005bea:	1d23      	adds	r3, r4, #4
 8005bec:	f020 0007 	bic.w	r0, r0, #7
 8005bf0:	1ac2      	subs	r2, r0, r3
 8005bf2:	bf1c      	itt	ne
 8005bf4:	1a1b      	subne	r3, r3, r0
 8005bf6:	50a3      	strne	r3, [r4, r2]
 8005bf8:	e7af      	b.n	8005b5a <_malloc_r+0x22>
 8005bfa:	6862      	ldr	r2, [r4, #4]
 8005bfc:	42a3      	cmp	r3, r4
 8005bfe:	bf0c      	ite	eq
 8005c00:	f8c8 2000 	streq.w	r2, [r8]
 8005c04:	605a      	strne	r2, [r3, #4]
 8005c06:	e7eb      	b.n	8005be0 <_malloc_r+0xa8>
 8005c08:	4623      	mov	r3, r4
 8005c0a:	6864      	ldr	r4, [r4, #4]
 8005c0c:	e7ae      	b.n	8005b6c <_malloc_r+0x34>
 8005c0e:	463c      	mov	r4, r7
 8005c10:	687f      	ldr	r7, [r7, #4]
 8005c12:	e7b6      	b.n	8005b82 <_malloc_r+0x4a>
 8005c14:	461a      	mov	r2, r3
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	42a3      	cmp	r3, r4
 8005c1a:	d1fb      	bne.n	8005c14 <_malloc_r+0xdc>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	6053      	str	r3, [r2, #4]
 8005c20:	e7de      	b.n	8005be0 <_malloc_r+0xa8>
 8005c22:	230c      	movs	r3, #12
 8005c24:	6033      	str	r3, [r6, #0]
 8005c26:	4630      	mov	r0, r6
 8005c28:	f000 f80c 	bl	8005c44 <__malloc_unlock>
 8005c2c:	e794      	b.n	8005b58 <_malloc_r+0x20>
 8005c2e:	6005      	str	r5, [r0, #0]
 8005c30:	e7d6      	b.n	8005be0 <_malloc_r+0xa8>
 8005c32:	bf00      	nop
 8005c34:	20000348 	.word	0x20000348

08005c38 <__malloc_lock>:
 8005c38:	4801      	ldr	r0, [pc, #4]	@ (8005c40 <__malloc_lock+0x8>)
 8005c3a:	f7ff bf0f 	b.w	8005a5c <__retarget_lock_acquire_recursive>
 8005c3e:	bf00      	nop
 8005c40:	20000340 	.word	0x20000340

08005c44 <__malloc_unlock>:
 8005c44:	4801      	ldr	r0, [pc, #4]	@ (8005c4c <__malloc_unlock+0x8>)
 8005c46:	f7ff bf0a 	b.w	8005a5e <__retarget_lock_release_recursive>
 8005c4a:	bf00      	nop
 8005c4c:	20000340 	.word	0x20000340

08005c50 <__ssputs_r>:
 8005c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c54:	688e      	ldr	r6, [r1, #8]
 8005c56:	461f      	mov	r7, r3
 8005c58:	42be      	cmp	r6, r7
 8005c5a:	680b      	ldr	r3, [r1, #0]
 8005c5c:	4682      	mov	sl, r0
 8005c5e:	460c      	mov	r4, r1
 8005c60:	4690      	mov	r8, r2
 8005c62:	d82d      	bhi.n	8005cc0 <__ssputs_r+0x70>
 8005c64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005c6c:	d026      	beq.n	8005cbc <__ssputs_r+0x6c>
 8005c6e:	6965      	ldr	r5, [r4, #20]
 8005c70:	6909      	ldr	r1, [r1, #16]
 8005c72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c76:	eba3 0901 	sub.w	r9, r3, r1
 8005c7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c7e:	1c7b      	adds	r3, r7, #1
 8005c80:	444b      	add	r3, r9
 8005c82:	106d      	asrs	r5, r5, #1
 8005c84:	429d      	cmp	r5, r3
 8005c86:	bf38      	it	cc
 8005c88:	461d      	movcc	r5, r3
 8005c8a:	0553      	lsls	r3, r2, #21
 8005c8c:	d527      	bpl.n	8005cde <__ssputs_r+0x8e>
 8005c8e:	4629      	mov	r1, r5
 8005c90:	f7ff ff52 	bl	8005b38 <_malloc_r>
 8005c94:	4606      	mov	r6, r0
 8005c96:	b360      	cbz	r0, 8005cf2 <__ssputs_r+0xa2>
 8005c98:	6921      	ldr	r1, [r4, #16]
 8005c9a:	464a      	mov	r2, r9
 8005c9c:	f000 fae6 	bl	800626c <memcpy>
 8005ca0:	89a3      	ldrh	r3, [r4, #12]
 8005ca2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005ca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005caa:	81a3      	strh	r3, [r4, #12]
 8005cac:	6126      	str	r6, [r4, #16]
 8005cae:	6165      	str	r5, [r4, #20]
 8005cb0:	444e      	add	r6, r9
 8005cb2:	eba5 0509 	sub.w	r5, r5, r9
 8005cb6:	6026      	str	r6, [r4, #0]
 8005cb8:	60a5      	str	r5, [r4, #8]
 8005cba:	463e      	mov	r6, r7
 8005cbc:	42be      	cmp	r6, r7
 8005cbe:	d900      	bls.n	8005cc2 <__ssputs_r+0x72>
 8005cc0:	463e      	mov	r6, r7
 8005cc2:	6820      	ldr	r0, [r4, #0]
 8005cc4:	4632      	mov	r2, r6
 8005cc6:	4641      	mov	r1, r8
 8005cc8:	f000 faa6 	bl	8006218 <memmove>
 8005ccc:	68a3      	ldr	r3, [r4, #8]
 8005cce:	1b9b      	subs	r3, r3, r6
 8005cd0:	60a3      	str	r3, [r4, #8]
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	4433      	add	r3, r6
 8005cd6:	6023      	str	r3, [r4, #0]
 8005cd8:	2000      	movs	r0, #0
 8005cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cde:	462a      	mov	r2, r5
 8005ce0:	f000 fad2 	bl	8006288 <_realloc_r>
 8005ce4:	4606      	mov	r6, r0
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	d1e0      	bne.n	8005cac <__ssputs_r+0x5c>
 8005cea:	6921      	ldr	r1, [r4, #16]
 8005cec:	4650      	mov	r0, sl
 8005cee:	f7ff feb7 	bl	8005a60 <_free_r>
 8005cf2:	230c      	movs	r3, #12
 8005cf4:	f8ca 3000 	str.w	r3, [sl]
 8005cf8:	89a3      	ldrh	r3, [r4, #12]
 8005cfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cfe:	81a3      	strh	r3, [r4, #12]
 8005d00:	f04f 30ff 	mov.w	r0, #4294967295
 8005d04:	e7e9      	b.n	8005cda <__ssputs_r+0x8a>
	...

08005d08 <_svfiprintf_r>:
 8005d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d0c:	4698      	mov	r8, r3
 8005d0e:	898b      	ldrh	r3, [r1, #12]
 8005d10:	061b      	lsls	r3, r3, #24
 8005d12:	b09d      	sub	sp, #116	@ 0x74
 8005d14:	4607      	mov	r7, r0
 8005d16:	460d      	mov	r5, r1
 8005d18:	4614      	mov	r4, r2
 8005d1a:	d510      	bpl.n	8005d3e <_svfiprintf_r+0x36>
 8005d1c:	690b      	ldr	r3, [r1, #16]
 8005d1e:	b973      	cbnz	r3, 8005d3e <_svfiprintf_r+0x36>
 8005d20:	2140      	movs	r1, #64	@ 0x40
 8005d22:	f7ff ff09 	bl	8005b38 <_malloc_r>
 8005d26:	6028      	str	r0, [r5, #0]
 8005d28:	6128      	str	r0, [r5, #16]
 8005d2a:	b930      	cbnz	r0, 8005d3a <_svfiprintf_r+0x32>
 8005d2c:	230c      	movs	r3, #12
 8005d2e:	603b      	str	r3, [r7, #0]
 8005d30:	f04f 30ff 	mov.w	r0, #4294967295
 8005d34:	b01d      	add	sp, #116	@ 0x74
 8005d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d3a:	2340      	movs	r3, #64	@ 0x40
 8005d3c:	616b      	str	r3, [r5, #20]
 8005d3e:	2300      	movs	r3, #0
 8005d40:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d42:	2320      	movs	r3, #32
 8005d44:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d48:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d4c:	2330      	movs	r3, #48	@ 0x30
 8005d4e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005eec <_svfiprintf_r+0x1e4>
 8005d52:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d56:	f04f 0901 	mov.w	r9, #1
 8005d5a:	4623      	mov	r3, r4
 8005d5c:	469a      	mov	sl, r3
 8005d5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d62:	b10a      	cbz	r2, 8005d68 <_svfiprintf_r+0x60>
 8005d64:	2a25      	cmp	r2, #37	@ 0x25
 8005d66:	d1f9      	bne.n	8005d5c <_svfiprintf_r+0x54>
 8005d68:	ebba 0b04 	subs.w	fp, sl, r4
 8005d6c:	d00b      	beq.n	8005d86 <_svfiprintf_r+0x7e>
 8005d6e:	465b      	mov	r3, fp
 8005d70:	4622      	mov	r2, r4
 8005d72:	4629      	mov	r1, r5
 8005d74:	4638      	mov	r0, r7
 8005d76:	f7ff ff6b 	bl	8005c50 <__ssputs_r>
 8005d7a:	3001      	adds	r0, #1
 8005d7c:	f000 80a7 	beq.w	8005ece <_svfiprintf_r+0x1c6>
 8005d80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d82:	445a      	add	r2, fp
 8005d84:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d86:	f89a 3000 	ldrb.w	r3, [sl]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 809f 	beq.w	8005ece <_svfiprintf_r+0x1c6>
 8005d90:	2300      	movs	r3, #0
 8005d92:	f04f 32ff 	mov.w	r2, #4294967295
 8005d96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d9a:	f10a 0a01 	add.w	sl, sl, #1
 8005d9e:	9304      	str	r3, [sp, #16]
 8005da0:	9307      	str	r3, [sp, #28]
 8005da2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005da6:	931a      	str	r3, [sp, #104]	@ 0x68
 8005da8:	4654      	mov	r4, sl
 8005daa:	2205      	movs	r2, #5
 8005dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005db0:	484e      	ldr	r0, [pc, #312]	@ (8005eec <_svfiprintf_r+0x1e4>)
 8005db2:	f7fa fa1d 	bl	80001f0 <memchr>
 8005db6:	9a04      	ldr	r2, [sp, #16]
 8005db8:	b9d8      	cbnz	r0, 8005df2 <_svfiprintf_r+0xea>
 8005dba:	06d0      	lsls	r0, r2, #27
 8005dbc:	bf44      	itt	mi
 8005dbe:	2320      	movmi	r3, #32
 8005dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005dc4:	0711      	lsls	r1, r2, #28
 8005dc6:	bf44      	itt	mi
 8005dc8:	232b      	movmi	r3, #43	@ 0x2b
 8005dca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005dce:	f89a 3000 	ldrb.w	r3, [sl]
 8005dd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dd4:	d015      	beq.n	8005e02 <_svfiprintf_r+0xfa>
 8005dd6:	9a07      	ldr	r2, [sp, #28]
 8005dd8:	4654      	mov	r4, sl
 8005dda:	2000      	movs	r0, #0
 8005ddc:	f04f 0c0a 	mov.w	ip, #10
 8005de0:	4621      	mov	r1, r4
 8005de2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005de6:	3b30      	subs	r3, #48	@ 0x30
 8005de8:	2b09      	cmp	r3, #9
 8005dea:	d94b      	bls.n	8005e84 <_svfiprintf_r+0x17c>
 8005dec:	b1b0      	cbz	r0, 8005e1c <_svfiprintf_r+0x114>
 8005dee:	9207      	str	r2, [sp, #28]
 8005df0:	e014      	b.n	8005e1c <_svfiprintf_r+0x114>
 8005df2:	eba0 0308 	sub.w	r3, r0, r8
 8005df6:	fa09 f303 	lsl.w	r3, r9, r3
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	9304      	str	r3, [sp, #16]
 8005dfe:	46a2      	mov	sl, r4
 8005e00:	e7d2      	b.n	8005da8 <_svfiprintf_r+0xa0>
 8005e02:	9b03      	ldr	r3, [sp, #12]
 8005e04:	1d19      	adds	r1, r3, #4
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	9103      	str	r1, [sp, #12]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	bfbb      	ittet	lt
 8005e0e:	425b      	neglt	r3, r3
 8005e10:	f042 0202 	orrlt.w	r2, r2, #2
 8005e14:	9307      	strge	r3, [sp, #28]
 8005e16:	9307      	strlt	r3, [sp, #28]
 8005e18:	bfb8      	it	lt
 8005e1a:	9204      	strlt	r2, [sp, #16]
 8005e1c:	7823      	ldrb	r3, [r4, #0]
 8005e1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e20:	d10a      	bne.n	8005e38 <_svfiprintf_r+0x130>
 8005e22:	7863      	ldrb	r3, [r4, #1]
 8005e24:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e26:	d132      	bne.n	8005e8e <_svfiprintf_r+0x186>
 8005e28:	9b03      	ldr	r3, [sp, #12]
 8005e2a:	1d1a      	adds	r2, r3, #4
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	9203      	str	r2, [sp, #12]
 8005e30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e34:	3402      	adds	r4, #2
 8005e36:	9305      	str	r3, [sp, #20]
 8005e38:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005efc <_svfiprintf_r+0x1f4>
 8005e3c:	7821      	ldrb	r1, [r4, #0]
 8005e3e:	2203      	movs	r2, #3
 8005e40:	4650      	mov	r0, sl
 8005e42:	f7fa f9d5 	bl	80001f0 <memchr>
 8005e46:	b138      	cbz	r0, 8005e58 <_svfiprintf_r+0x150>
 8005e48:	9b04      	ldr	r3, [sp, #16]
 8005e4a:	eba0 000a 	sub.w	r0, r0, sl
 8005e4e:	2240      	movs	r2, #64	@ 0x40
 8005e50:	4082      	lsls	r2, r0
 8005e52:	4313      	orrs	r3, r2
 8005e54:	3401      	adds	r4, #1
 8005e56:	9304      	str	r3, [sp, #16]
 8005e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e5c:	4824      	ldr	r0, [pc, #144]	@ (8005ef0 <_svfiprintf_r+0x1e8>)
 8005e5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e62:	2206      	movs	r2, #6
 8005e64:	f7fa f9c4 	bl	80001f0 <memchr>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	d036      	beq.n	8005eda <_svfiprintf_r+0x1d2>
 8005e6c:	4b21      	ldr	r3, [pc, #132]	@ (8005ef4 <_svfiprintf_r+0x1ec>)
 8005e6e:	bb1b      	cbnz	r3, 8005eb8 <_svfiprintf_r+0x1b0>
 8005e70:	9b03      	ldr	r3, [sp, #12]
 8005e72:	3307      	adds	r3, #7
 8005e74:	f023 0307 	bic.w	r3, r3, #7
 8005e78:	3308      	adds	r3, #8
 8005e7a:	9303      	str	r3, [sp, #12]
 8005e7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e7e:	4433      	add	r3, r6
 8005e80:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e82:	e76a      	b.n	8005d5a <_svfiprintf_r+0x52>
 8005e84:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e88:	460c      	mov	r4, r1
 8005e8a:	2001      	movs	r0, #1
 8005e8c:	e7a8      	b.n	8005de0 <_svfiprintf_r+0xd8>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	3401      	adds	r4, #1
 8005e92:	9305      	str	r3, [sp, #20]
 8005e94:	4619      	mov	r1, r3
 8005e96:	f04f 0c0a 	mov.w	ip, #10
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ea0:	3a30      	subs	r2, #48	@ 0x30
 8005ea2:	2a09      	cmp	r2, #9
 8005ea4:	d903      	bls.n	8005eae <_svfiprintf_r+0x1a6>
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d0c6      	beq.n	8005e38 <_svfiprintf_r+0x130>
 8005eaa:	9105      	str	r1, [sp, #20]
 8005eac:	e7c4      	b.n	8005e38 <_svfiprintf_r+0x130>
 8005eae:	fb0c 2101 	mla	r1, ip, r1, r2
 8005eb2:	4604      	mov	r4, r0
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e7f0      	b.n	8005e9a <_svfiprintf_r+0x192>
 8005eb8:	ab03      	add	r3, sp, #12
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	462a      	mov	r2, r5
 8005ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8005ef8 <_svfiprintf_r+0x1f0>)
 8005ec0:	a904      	add	r1, sp, #16
 8005ec2:	4638      	mov	r0, r7
 8005ec4:	f3af 8000 	nop.w
 8005ec8:	1c42      	adds	r2, r0, #1
 8005eca:	4606      	mov	r6, r0
 8005ecc:	d1d6      	bne.n	8005e7c <_svfiprintf_r+0x174>
 8005ece:	89ab      	ldrh	r3, [r5, #12]
 8005ed0:	065b      	lsls	r3, r3, #25
 8005ed2:	f53f af2d 	bmi.w	8005d30 <_svfiprintf_r+0x28>
 8005ed6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ed8:	e72c      	b.n	8005d34 <_svfiprintf_r+0x2c>
 8005eda:	ab03      	add	r3, sp, #12
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	462a      	mov	r2, r5
 8005ee0:	4b05      	ldr	r3, [pc, #20]	@ (8005ef8 <_svfiprintf_r+0x1f0>)
 8005ee2:	a904      	add	r1, sp, #16
 8005ee4:	4638      	mov	r0, r7
 8005ee6:	f000 f879 	bl	8005fdc <_printf_i>
 8005eea:	e7ed      	b.n	8005ec8 <_svfiprintf_r+0x1c0>
 8005eec:	080064d0 	.word	0x080064d0
 8005ef0:	080064da 	.word	0x080064da
 8005ef4:	00000000 	.word	0x00000000
 8005ef8:	08005c51 	.word	0x08005c51
 8005efc:	080064d6 	.word	0x080064d6

08005f00 <_printf_common>:
 8005f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f04:	4616      	mov	r6, r2
 8005f06:	4698      	mov	r8, r3
 8005f08:	688a      	ldr	r2, [r1, #8]
 8005f0a:	690b      	ldr	r3, [r1, #16]
 8005f0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f10:	4293      	cmp	r3, r2
 8005f12:	bfb8      	it	lt
 8005f14:	4613      	movlt	r3, r2
 8005f16:	6033      	str	r3, [r6, #0]
 8005f18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f1c:	4607      	mov	r7, r0
 8005f1e:	460c      	mov	r4, r1
 8005f20:	b10a      	cbz	r2, 8005f26 <_printf_common+0x26>
 8005f22:	3301      	adds	r3, #1
 8005f24:	6033      	str	r3, [r6, #0]
 8005f26:	6823      	ldr	r3, [r4, #0]
 8005f28:	0699      	lsls	r1, r3, #26
 8005f2a:	bf42      	ittt	mi
 8005f2c:	6833      	ldrmi	r3, [r6, #0]
 8005f2e:	3302      	addmi	r3, #2
 8005f30:	6033      	strmi	r3, [r6, #0]
 8005f32:	6825      	ldr	r5, [r4, #0]
 8005f34:	f015 0506 	ands.w	r5, r5, #6
 8005f38:	d106      	bne.n	8005f48 <_printf_common+0x48>
 8005f3a:	f104 0a19 	add.w	sl, r4, #25
 8005f3e:	68e3      	ldr	r3, [r4, #12]
 8005f40:	6832      	ldr	r2, [r6, #0]
 8005f42:	1a9b      	subs	r3, r3, r2
 8005f44:	42ab      	cmp	r3, r5
 8005f46:	dc26      	bgt.n	8005f96 <_printf_common+0x96>
 8005f48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f4c:	6822      	ldr	r2, [r4, #0]
 8005f4e:	3b00      	subs	r3, #0
 8005f50:	bf18      	it	ne
 8005f52:	2301      	movne	r3, #1
 8005f54:	0692      	lsls	r2, r2, #26
 8005f56:	d42b      	bmi.n	8005fb0 <_printf_common+0xb0>
 8005f58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f5c:	4641      	mov	r1, r8
 8005f5e:	4638      	mov	r0, r7
 8005f60:	47c8      	blx	r9
 8005f62:	3001      	adds	r0, #1
 8005f64:	d01e      	beq.n	8005fa4 <_printf_common+0xa4>
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	6922      	ldr	r2, [r4, #16]
 8005f6a:	f003 0306 	and.w	r3, r3, #6
 8005f6e:	2b04      	cmp	r3, #4
 8005f70:	bf02      	ittt	eq
 8005f72:	68e5      	ldreq	r5, [r4, #12]
 8005f74:	6833      	ldreq	r3, [r6, #0]
 8005f76:	1aed      	subeq	r5, r5, r3
 8005f78:	68a3      	ldr	r3, [r4, #8]
 8005f7a:	bf0c      	ite	eq
 8005f7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f80:	2500      	movne	r5, #0
 8005f82:	4293      	cmp	r3, r2
 8005f84:	bfc4      	itt	gt
 8005f86:	1a9b      	subgt	r3, r3, r2
 8005f88:	18ed      	addgt	r5, r5, r3
 8005f8a:	2600      	movs	r6, #0
 8005f8c:	341a      	adds	r4, #26
 8005f8e:	42b5      	cmp	r5, r6
 8005f90:	d11a      	bne.n	8005fc8 <_printf_common+0xc8>
 8005f92:	2000      	movs	r0, #0
 8005f94:	e008      	b.n	8005fa8 <_printf_common+0xa8>
 8005f96:	2301      	movs	r3, #1
 8005f98:	4652      	mov	r2, sl
 8005f9a:	4641      	mov	r1, r8
 8005f9c:	4638      	mov	r0, r7
 8005f9e:	47c8      	blx	r9
 8005fa0:	3001      	adds	r0, #1
 8005fa2:	d103      	bne.n	8005fac <_printf_common+0xac>
 8005fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fac:	3501      	adds	r5, #1
 8005fae:	e7c6      	b.n	8005f3e <_printf_common+0x3e>
 8005fb0:	18e1      	adds	r1, r4, r3
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	2030      	movs	r0, #48	@ 0x30
 8005fb6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005fba:	4422      	add	r2, r4
 8005fbc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005fc0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005fc4:	3302      	adds	r3, #2
 8005fc6:	e7c7      	b.n	8005f58 <_printf_common+0x58>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	4622      	mov	r2, r4
 8005fcc:	4641      	mov	r1, r8
 8005fce:	4638      	mov	r0, r7
 8005fd0:	47c8      	blx	r9
 8005fd2:	3001      	adds	r0, #1
 8005fd4:	d0e6      	beq.n	8005fa4 <_printf_common+0xa4>
 8005fd6:	3601      	adds	r6, #1
 8005fd8:	e7d9      	b.n	8005f8e <_printf_common+0x8e>
	...

08005fdc <_printf_i>:
 8005fdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe0:	7e0f      	ldrb	r7, [r1, #24]
 8005fe2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005fe4:	2f78      	cmp	r7, #120	@ 0x78
 8005fe6:	4691      	mov	r9, r2
 8005fe8:	4680      	mov	r8, r0
 8005fea:	460c      	mov	r4, r1
 8005fec:	469a      	mov	sl, r3
 8005fee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005ff2:	d807      	bhi.n	8006004 <_printf_i+0x28>
 8005ff4:	2f62      	cmp	r7, #98	@ 0x62
 8005ff6:	d80a      	bhi.n	800600e <_printf_i+0x32>
 8005ff8:	2f00      	cmp	r7, #0
 8005ffa:	f000 80d1 	beq.w	80061a0 <_printf_i+0x1c4>
 8005ffe:	2f58      	cmp	r7, #88	@ 0x58
 8006000:	f000 80b8 	beq.w	8006174 <_printf_i+0x198>
 8006004:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006008:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800600c:	e03a      	b.n	8006084 <_printf_i+0xa8>
 800600e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006012:	2b15      	cmp	r3, #21
 8006014:	d8f6      	bhi.n	8006004 <_printf_i+0x28>
 8006016:	a101      	add	r1, pc, #4	@ (adr r1, 800601c <_printf_i+0x40>)
 8006018:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800601c:	08006075 	.word	0x08006075
 8006020:	08006089 	.word	0x08006089
 8006024:	08006005 	.word	0x08006005
 8006028:	08006005 	.word	0x08006005
 800602c:	08006005 	.word	0x08006005
 8006030:	08006005 	.word	0x08006005
 8006034:	08006089 	.word	0x08006089
 8006038:	08006005 	.word	0x08006005
 800603c:	08006005 	.word	0x08006005
 8006040:	08006005 	.word	0x08006005
 8006044:	08006005 	.word	0x08006005
 8006048:	08006187 	.word	0x08006187
 800604c:	080060b3 	.word	0x080060b3
 8006050:	08006141 	.word	0x08006141
 8006054:	08006005 	.word	0x08006005
 8006058:	08006005 	.word	0x08006005
 800605c:	080061a9 	.word	0x080061a9
 8006060:	08006005 	.word	0x08006005
 8006064:	080060b3 	.word	0x080060b3
 8006068:	08006005 	.word	0x08006005
 800606c:	08006005 	.word	0x08006005
 8006070:	08006149 	.word	0x08006149
 8006074:	6833      	ldr	r3, [r6, #0]
 8006076:	1d1a      	adds	r2, r3, #4
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	6032      	str	r2, [r6, #0]
 800607c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006080:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006084:	2301      	movs	r3, #1
 8006086:	e09c      	b.n	80061c2 <_printf_i+0x1e6>
 8006088:	6833      	ldr	r3, [r6, #0]
 800608a:	6820      	ldr	r0, [r4, #0]
 800608c:	1d19      	adds	r1, r3, #4
 800608e:	6031      	str	r1, [r6, #0]
 8006090:	0606      	lsls	r6, r0, #24
 8006092:	d501      	bpl.n	8006098 <_printf_i+0xbc>
 8006094:	681d      	ldr	r5, [r3, #0]
 8006096:	e003      	b.n	80060a0 <_printf_i+0xc4>
 8006098:	0645      	lsls	r5, r0, #25
 800609a:	d5fb      	bpl.n	8006094 <_printf_i+0xb8>
 800609c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80060a0:	2d00      	cmp	r5, #0
 80060a2:	da03      	bge.n	80060ac <_printf_i+0xd0>
 80060a4:	232d      	movs	r3, #45	@ 0x2d
 80060a6:	426d      	negs	r5, r5
 80060a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060ac:	4858      	ldr	r0, [pc, #352]	@ (8006210 <_printf_i+0x234>)
 80060ae:	230a      	movs	r3, #10
 80060b0:	e011      	b.n	80060d6 <_printf_i+0xfa>
 80060b2:	6821      	ldr	r1, [r4, #0]
 80060b4:	6833      	ldr	r3, [r6, #0]
 80060b6:	0608      	lsls	r0, r1, #24
 80060b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80060bc:	d402      	bmi.n	80060c4 <_printf_i+0xe8>
 80060be:	0649      	lsls	r1, r1, #25
 80060c0:	bf48      	it	mi
 80060c2:	b2ad      	uxthmi	r5, r5
 80060c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80060c6:	4852      	ldr	r0, [pc, #328]	@ (8006210 <_printf_i+0x234>)
 80060c8:	6033      	str	r3, [r6, #0]
 80060ca:	bf14      	ite	ne
 80060cc:	230a      	movne	r3, #10
 80060ce:	2308      	moveq	r3, #8
 80060d0:	2100      	movs	r1, #0
 80060d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80060d6:	6866      	ldr	r6, [r4, #4]
 80060d8:	60a6      	str	r6, [r4, #8]
 80060da:	2e00      	cmp	r6, #0
 80060dc:	db05      	blt.n	80060ea <_printf_i+0x10e>
 80060de:	6821      	ldr	r1, [r4, #0]
 80060e0:	432e      	orrs	r6, r5
 80060e2:	f021 0104 	bic.w	r1, r1, #4
 80060e6:	6021      	str	r1, [r4, #0]
 80060e8:	d04b      	beq.n	8006182 <_printf_i+0x1a6>
 80060ea:	4616      	mov	r6, r2
 80060ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80060f0:	fb03 5711 	mls	r7, r3, r1, r5
 80060f4:	5dc7      	ldrb	r7, [r0, r7]
 80060f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060fa:	462f      	mov	r7, r5
 80060fc:	42bb      	cmp	r3, r7
 80060fe:	460d      	mov	r5, r1
 8006100:	d9f4      	bls.n	80060ec <_printf_i+0x110>
 8006102:	2b08      	cmp	r3, #8
 8006104:	d10b      	bne.n	800611e <_printf_i+0x142>
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	07df      	lsls	r7, r3, #31
 800610a:	d508      	bpl.n	800611e <_printf_i+0x142>
 800610c:	6923      	ldr	r3, [r4, #16]
 800610e:	6861      	ldr	r1, [r4, #4]
 8006110:	4299      	cmp	r1, r3
 8006112:	bfde      	ittt	le
 8006114:	2330      	movle	r3, #48	@ 0x30
 8006116:	f806 3c01 	strble.w	r3, [r6, #-1]
 800611a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800611e:	1b92      	subs	r2, r2, r6
 8006120:	6122      	str	r2, [r4, #16]
 8006122:	f8cd a000 	str.w	sl, [sp]
 8006126:	464b      	mov	r3, r9
 8006128:	aa03      	add	r2, sp, #12
 800612a:	4621      	mov	r1, r4
 800612c:	4640      	mov	r0, r8
 800612e:	f7ff fee7 	bl	8005f00 <_printf_common>
 8006132:	3001      	adds	r0, #1
 8006134:	d14a      	bne.n	80061cc <_printf_i+0x1f0>
 8006136:	f04f 30ff 	mov.w	r0, #4294967295
 800613a:	b004      	add	sp, #16
 800613c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006140:	6823      	ldr	r3, [r4, #0]
 8006142:	f043 0320 	orr.w	r3, r3, #32
 8006146:	6023      	str	r3, [r4, #0]
 8006148:	4832      	ldr	r0, [pc, #200]	@ (8006214 <_printf_i+0x238>)
 800614a:	2778      	movs	r7, #120	@ 0x78
 800614c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	6831      	ldr	r1, [r6, #0]
 8006154:	061f      	lsls	r7, r3, #24
 8006156:	f851 5b04 	ldr.w	r5, [r1], #4
 800615a:	d402      	bmi.n	8006162 <_printf_i+0x186>
 800615c:	065f      	lsls	r7, r3, #25
 800615e:	bf48      	it	mi
 8006160:	b2ad      	uxthmi	r5, r5
 8006162:	6031      	str	r1, [r6, #0]
 8006164:	07d9      	lsls	r1, r3, #31
 8006166:	bf44      	itt	mi
 8006168:	f043 0320 	orrmi.w	r3, r3, #32
 800616c:	6023      	strmi	r3, [r4, #0]
 800616e:	b11d      	cbz	r5, 8006178 <_printf_i+0x19c>
 8006170:	2310      	movs	r3, #16
 8006172:	e7ad      	b.n	80060d0 <_printf_i+0xf4>
 8006174:	4826      	ldr	r0, [pc, #152]	@ (8006210 <_printf_i+0x234>)
 8006176:	e7e9      	b.n	800614c <_printf_i+0x170>
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	f023 0320 	bic.w	r3, r3, #32
 800617e:	6023      	str	r3, [r4, #0]
 8006180:	e7f6      	b.n	8006170 <_printf_i+0x194>
 8006182:	4616      	mov	r6, r2
 8006184:	e7bd      	b.n	8006102 <_printf_i+0x126>
 8006186:	6833      	ldr	r3, [r6, #0]
 8006188:	6825      	ldr	r5, [r4, #0]
 800618a:	6961      	ldr	r1, [r4, #20]
 800618c:	1d18      	adds	r0, r3, #4
 800618e:	6030      	str	r0, [r6, #0]
 8006190:	062e      	lsls	r6, r5, #24
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	d501      	bpl.n	800619a <_printf_i+0x1be>
 8006196:	6019      	str	r1, [r3, #0]
 8006198:	e002      	b.n	80061a0 <_printf_i+0x1c4>
 800619a:	0668      	lsls	r0, r5, #25
 800619c:	d5fb      	bpl.n	8006196 <_printf_i+0x1ba>
 800619e:	8019      	strh	r1, [r3, #0]
 80061a0:	2300      	movs	r3, #0
 80061a2:	6123      	str	r3, [r4, #16]
 80061a4:	4616      	mov	r6, r2
 80061a6:	e7bc      	b.n	8006122 <_printf_i+0x146>
 80061a8:	6833      	ldr	r3, [r6, #0]
 80061aa:	1d1a      	adds	r2, r3, #4
 80061ac:	6032      	str	r2, [r6, #0]
 80061ae:	681e      	ldr	r6, [r3, #0]
 80061b0:	6862      	ldr	r2, [r4, #4]
 80061b2:	2100      	movs	r1, #0
 80061b4:	4630      	mov	r0, r6
 80061b6:	f7fa f81b 	bl	80001f0 <memchr>
 80061ba:	b108      	cbz	r0, 80061c0 <_printf_i+0x1e4>
 80061bc:	1b80      	subs	r0, r0, r6
 80061be:	6060      	str	r0, [r4, #4]
 80061c0:	6863      	ldr	r3, [r4, #4]
 80061c2:	6123      	str	r3, [r4, #16]
 80061c4:	2300      	movs	r3, #0
 80061c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061ca:	e7aa      	b.n	8006122 <_printf_i+0x146>
 80061cc:	6923      	ldr	r3, [r4, #16]
 80061ce:	4632      	mov	r2, r6
 80061d0:	4649      	mov	r1, r9
 80061d2:	4640      	mov	r0, r8
 80061d4:	47d0      	blx	sl
 80061d6:	3001      	adds	r0, #1
 80061d8:	d0ad      	beq.n	8006136 <_printf_i+0x15a>
 80061da:	6823      	ldr	r3, [r4, #0]
 80061dc:	079b      	lsls	r3, r3, #30
 80061de:	d413      	bmi.n	8006208 <_printf_i+0x22c>
 80061e0:	68e0      	ldr	r0, [r4, #12]
 80061e2:	9b03      	ldr	r3, [sp, #12]
 80061e4:	4298      	cmp	r0, r3
 80061e6:	bfb8      	it	lt
 80061e8:	4618      	movlt	r0, r3
 80061ea:	e7a6      	b.n	800613a <_printf_i+0x15e>
 80061ec:	2301      	movs	r3, #1
 80061ee:	4632      	mov	r2, r6
 80061f0:	4649      	mov	r1, r9
 80061f2:	4640      	mov	r0, r8
 80061f4:	47d0      	blx	sl
 80061f6:	3001      	adds	r0, #1
 80061f8:	d09d      	beq.n	8006136 <_printf_i+0x15a>
 80061fa:	3501      	adds	r5, #1
 80061fc:	68e3      	ldr	r3, [r4, #12]
 80061fe:	9903      	ldr	r1, [sp, #12]
 8006200:	1a5b      	subs	r3, r3, r1
 8006202:	42ab      	cmp	r3, r5
 8006204:	dcf2      	bgt.n	80061ec <_printf_i+0x210>
 8006206:	e7eb      	b.n	80061e0 <_printf_i+0x204>
 8006208:	2500      	movs	r5, #0
 800620a:	f104 0619 	add.w	r6, r4, #25
 800620e:	e7f5      	b.n	80061fc <_printf_i+0x220>
 8006210:	080064e1 	.word	0x080064e1
 8006214:	080064f2 	.word	0x080064f2

08006218 <memmove>:
 8006218:	4288      	cmp	r0, r1
 800621a:	b510      	push	{r4, lr}
 800621c:	eb01 0402 	add.w	r4, r1, r2
 8006220:	d902      	bls.n	8006228 <memmove+0x10>
 8006222:	4284      	cmp	r4, r0
 8006224:	4623      	mov	r3, r4
 8006226:	d807      	bhi.n	8006238 <memmove+0x20>
 8006228:	1e43      	subs	r3, r0, #1
 800622a:	42a1      	cmp	r1, r4
 800622c:	d008      	beq.n	8006240 <memmove+0x28>
 800622e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006232:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006236:	e7f8      	b.n	800622a <memmove+0x12>
 8006238:	4402      	add	r2, r0
 800623a:	4601      	mov	r1, r0
 800623c:	428a      	cmp	r2, r1
 800623e:	d100      	bne.n	8006242 <memmove+0x2a>
 8006240:	bd10      	pop	{r4, pc}
 8006242:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006246:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800624a:	e7f7      	b.n	800623c <memmove+0x24>

0800624c <_sbrk_r>:
 800624c:	b538      	push	{r3, r4, r5, lr}
 800624e:	4d06      	ldr	r5, [pc, #24]	@ (8006268 <_sbrk_r+0x1c>)
 8006250:	2300      	movs	r3, #0
 8006252:	4604      	mov	r4, r0
 8006254:	4608      	mov	r0, r1
 8006256:	602b      	str	r3, [r5, #0]
 8006258:	f7fb f80c 	bl	8001274 <_sbrk>
 800625c:	1c43      	adds	r3, r0, #1
 800625e:	d102      	bne.n	8006266 <_sbrk_r+0x1a>
 8006260:	682b      	ldr	r3, [r5, #0]
 8006262:	b103      	cbz	r3, 8006266 <_sbrk_r+0x1a>
 8006264:	6023      	str	r3, [r4, #0]
 8006266:	bd38      	pop	{r3, r4, r5, pc}
 8006268:	2000033c 	.word	0x2000033c

0800626c <memcpy>:
 800626c:	440a      	add	r2, r1
 800626e:	4291      	cmp	r1, r2
 8006270:	f100 33ff 	add.w	r3, r0, #4294967295
 8006274:	d100      	bne.n	8006278 <memcpy+0xc>
 8006276:	4770      	bx	lr
 8006278:	b510      	push	{r4, lr}
 800627a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800627e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006282:	4291      	cmp	r1, r2
 8006284:	d1f9      	bne.n	800627a <memcpy+0xe>
 8006286:	bd10      	pop	{r4, pc}

08006288 <_realloc_r>:
 8006288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800628c:	4607      	mov	r7, r0
 800628e:	4614      	mov	r4, r2
 8006290:	460d      	mov	r5, r1
 8006292:	b921      	cbnz	r1, 800629e <_realloc_r+0x16>
 8006294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006298:	4611      	mov	r1, r2
 800629a:	f7ff bc4d 	b.w	8005b38 <_malloc_r>
 800629e:	b92a      	cbnz	r2, 80062ac <_realloc_r+0x24>
 80062a0:	f7ff fbde 	bl	8005a60 <_free_r>
 80062a4:	4625      	mov	r5, r4
 80062a6:	4628      	mov	r0, r5
 80062a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062ac:	f000 f81a 	bl	80062e4 <_malloc_usable_size_r>
 80062b0:	4284      	cmp	r4, r0
 80062b2:	4606      	mov	r6, r0
 80062b4:	d802      	bhi.n	80062bc <_realloc_r+0x34>
 80062b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80062ba:	d8f4      	bhi.n	80062a6 <_realloc_r+0x1e>
 80062bc:	4621      	mov	r1, r4
 80062be:	4638      	mov	r0, r7
 80062c0:	f7ff fc3a 	bl	8005b38 <_malloc_r>
 80062c4:	4680      	mov	r8, r0
 80062c6:	b908      	cbnz	r0, 80062cc <_realloc_r+0x44>
 80062c8:	4645      	mov	r5, r8
 80062ca:	e7ec      	b.n	80062a6 <_realloc_r+0x1e>
 80062cc:	42b4      	cmp	r4, r6
 80062ce:	4622      	mov	r2, r4
 80062d0:	4629      	mov	r1, r5
 80062d2:	bf28      	it	cs
 80062d4:	4632      	movcs	r2, r6
 80062d6:	f7ff ffc9 	bl	800626c <memcpy>
 80062da:	4629      	mov	r1, r5
 80062dc:	4638      	mov	r0, r7
 80062de:	f7ff fbbf 	bl	8005a60 <_free_r>
 80062e2:	e7f1      	b.n	80062c8 <_realloc_r+0x40>

080062e4 <_malloc_usable_size_r>:
 80062e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062e8:	1f18      	subs	r0, r3, #4
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	bfbc      	itt	lt
 80062ee:	580b      	ldrlt	r3, [r1, r0]
 80062f0:	18c0      	addlt	r0, r0, r3
 80062f2:	4770      	bx	lr

080062f4 <_init>:
 80062f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f6:	bf00      	nop
 80062f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062fa:	bc08      	pop	{r3}
 80062fc:	469e      	mov	lr, r3
 80062fe:	4770      	bx	lr

08006300 <_fini>:
 8006300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006302:	bf00      	nop
 8006304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006306:	bc08      	pop	{r3}
 8006308:	469e      	mov	lr, r3
 800630a:	4770      	bx	lr
